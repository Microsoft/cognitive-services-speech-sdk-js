{"version":3,"sources":["webpack:///webpack/bootstrap 45b3da0d3fafe1eb4e14","webpack:///../../src/sdk/Exports.ts","webpack:///../../src/common/Exports.ts","webpack:///../../src/common.speech/Exports.ts","webpack:///../../src/common/Error.ts","webpack:///../../src/sdk/Contracts.ts","webpack:///../../src/common/Guid.ts","webpack:///../../src/common.browser/Exports.ts","webpack:///../../src/sdk/Audio/AudioStreamFormat.ts","webpack:///../../src/common/PlatformEvent.ts","webpack:///../../src/common.speech/TranslationStatus.ts","webpack:///../../src/common.speech/IAuthentication.ts","webpack:///../../src/common.speech/RecognitionEvents.ts","webpack:///../../src/common/ConnectionMessage.ts","webpack:///../../src/common/EventSource.ts","webpack:///../../src/common/InMemoryStorage.ts","webpack:///../../src/common/List.ts","webpack:///../../src/common/Promise.ts","webpack:///../../src/common/Queue.ts","webpack:///../../src/common.browser/WebsocketMessageAdapter.ts","webpack:///../../src/sdk/Audio/AudioInputStream.ts","webpack:///../../src/common.speech/SpeechConnectionFactory.ts","webpack:///./bundleApp.js","webpack:///../../microsoft.cognitiveservices.speech.sdk.ts","webpack:///../../src/common.browser/ConsoleLoggingListener.ts","webpack:///../../src/common/AudioSourceEvents.ts","webpack:///../../src/common/ConnectionEvents.ts","webpack:///../../src/common/ConnectionOpenResponse.ts","webpack:///../../src/common/Events.ts","webpack:///../../src/common/IConnection.ts","webpack:///../../src/common/RawWebsocketMessage.ts","webpack:///../../src/common/RiffPcmEncoder.ts","webpack:///../../src/common/Storage.ts","webpack:///../../src/common/Stream.ts","webpack:///../../src/common.browser/LocalStorage.ts","webpack:///../../src/common.browser/MicAudioSource.ts","webpack:///../../src/common.browser/FileAudioSource.ts","webpack:///../../src/common.browser/OpusRecorder.ts","webpack:///../../src/common.browser/PCMRecorder.ts","webpack:///../../src/common.browser/SessionStorage.ts","webpack:///../../src/common.browser/WebsocketConnection.ts","webpack:///./node_modules/ws/browser.js","webpack:///../../src/common.browser/ReplayableAudioNode.ts","webpack:///../../src/sdk/Audio/AudioConfig.ts","webpack:///../../src/sdk/CancellationReason.ts","webpack:///../../src/sdk/Audio/PullAudioInputStreamCallback.ts","webpack:///../../src/sdk/KeywordRecognitionModel.ts","webpack:///../../src/sdk/SessionEventArgs.ts","webpack:///../../src/sdk/RecognitionEventArgs.ts","webpack:///../../src/sdk/OutputFormat.ts","webpack:///../../src/sdk/IntentRecognitionEventArgs.ts","webpack:///../../src/sdk/RecognitionResult.ts","webpack:///../../src/sdk/SpeechRecognitionResult.ts","webpack:///../../src/sdk/IntentRecognitionResult.ts","webpack:///../../src/sdk/LanguageUnderstandingModel.ts","webpack:///../../src/sdk/SpeechRecognitionEventArgs.ts","webpack:///../../src/sdk/SpeechRecognitionCanceledEventArgs.ts","webpack:///../../src/sdk/TranslationRecognitionEventArgs.ts","webpack:///../../src/sdk/TranslationSynthesisEventArgs.ts","webpack:///../../src/sdk/TranslationRecognitionResult.ts","webpack:///../../src/sdk/TranslationSynthesisResult.ts","webpack:///../../src/sdk/ResultReason.ts","webpack:///../../src/sdk/SpeechConfig.ts","webpack:///../../src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","webpack:///../../src/common.speech/CognitiveTokenAuthentication.ts","webpack:///../../src/common.speech/IntentConnectionFactory.ts","webpack:///../../src/common.speech/ServiceRecognizerBase.ts","webpack:///../../src/common.speech/SpeechConnectionMessage.Internal.ts","webpack:///../../src/common.speech/RecognizerConfig.ts","webpack:///../../src/common.speech/WebsocketMessageFormatter.ts","webpack:///../../src/common.speech/QueryParameterNames.ts","webpack:///../../src/common.speech/TranslationConnectionFactory.ts","webpack:///../../src/common.speech/EnumTranslation.ts","webpack:///../../src/common.speech/ServiceMessages/Enums.ts","webpack:///../../src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","webpack:///../../src/common.speech/ServiceMessages/TranslationHypothesis.ts","webpack:///../../src/common.speech/ServiceMessages/TranslationPhrase.ts","webpack:///../../src/common.speech/TranslationServiceRecognizer.ts","webpack:///../../src/common.speech/ServiceMessages/SpeechDetected.ts","webpack:///../../src/common.speech/ServiceMessages/SpeechHypothesis.ts","webpack:///../../src/common.speech/SpeechServiceRecognizer.ts","webpack:///../../src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","webpack:///../../src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","webpack:///../../src/common.speech/AddedLmIntent.ts","webpack:///../../src/common.speech/IntentServiceRecognizer.ts","webpack:///../../src/common.speech/ServiceMessages/IntentResponse.ts","webpack:///../../src/common.speech/RequestSession.ts","webpack:///../../src/common.speech/ServiceTelemetryListener.Internal.ts","webpack:///../../src/sdk/SpeechTranslationConfig.ts","webpack:///../../src/sdk/PropertyCollection.ts","webpack:///../../src/sdk/PropertyId.ts","webpack:///../../src/sdk/Recognizer.ts","webpack:///../../src/sdk/SpeechRecognizer.ts","webpack:///../../src/sdk/IntentRecognizer.ts","webpack:///../../src/sdk/TranslationRecognizer.ts","webpack:///../../src/sdk/Translations.ts","webpack:///../../src/sdk/NoMatchReason.ts","webpack:///../../src/sdk/NoMatchDetails.ts","webpack:///../../src/sdk/TranslationRecognitionCanceledEventArgs.ts","webpack:///../../src/sdk/IntentRecognitionCanceledEventArgs.ts","webpack:///../../src/sdk/CancellationDetails.ts","webpack:///../../src/sdk/CancellationErrorCodes.ts"],"names":[],"mappings":"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","file":"microsoft.cognitiveservices.speech.sdk.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 45b3da0d3fafe1eb4e14","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport { AudioConfig } from \"./Audio/AudioConfig\";\nexport { AudioStreamFormat } from \"./Audio/AudioStreamFormat\";\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream\";\nexport { CancellationReason } from \"./CancellationReason\";\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback\";\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel\";\nexport { SessionEventArgs } from \"./SessionEventArgs\";\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs\";\nexport { OutputFormat } from \"./OutputFormat\";\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs\";\nexport { RecognitionResult } from \"./RecognitionResult\";\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult\";\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult\";\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel\";\nexport { SpeechRecognitionEventArgs } from \"./SpeechRecognitionEventArgs\";\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs\";\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs\";\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs\";\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult\";\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult\";\nexport { ResultReason } from \"./ResultReason\";\nexport { SpeechConfig } from \"./SpeechConfig\";\nexport { SpeechTranslationConfig } from \"./SpeechTranslationConfig\";\nexport { PropertyCollection } from \"./PropertyCollection\";\nexport { PropertyId } from \"./PropertyId\";\nexport { Recognizer } from \"./Recognizer\";\nexport { SpeechRecognizer } from \"./SpeechRecognizer\";\nexport { IntentRecognizer } from \"./IntentRecognizer\";\nexport { TranslationRecognizer } from \"./TranslationRecognizer\";\nexport { Translations } from \"./Translations\";\nexport { NoMatchReason } from \"./NoMatchReason\";\nexport { NoMatchDetails } from \"./NoMatchDetails\";\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs\";\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs\";\nexport { CancellationDetails } from \"./CancellationDetails\";\nexport { CancellationErrorCode } from \"./CancellationErrorCodes\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/Exports.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport * from \"./AudioSourceEvents\";\nexport * from \"./ConnectionEvents\";\nexport * from \"./ConnectionMessage\";\nexport * from \"./ConnectionOpenResponse\";\nexport * from \"./Error\";\nexport * from \"./Events\";\nexport * from \"./EventSource\";\nexport * from \"./Guid\";\nexport * from \"./IAudioSource\";\nexport * from \"./IConnection\";\nexport * from \"./IDetachable\";\nexport * from \"./IDictionary\";\nexport * from \"./IDisposable\";\nexport * from \"./IEventSource\";\nexport * from \"./IKeyValueStorage\";\nexport * from \"./InMemoryStorage\";\nexport * from \"./ITimer\";\nexport * from \"./IWebsocketMessageFormatter\";\nexport * from \"./List\";\nexport * from \"./PlatformEvent\";\nexport * from \"./Promise\";\nexport * from \"./Queue\";\nexport * from \"./RawWebsocketMessage\";\nexport * from \"./RiffPcmEncoder\";\nexport * from \"./Storage\";\nexport * from \"./Stream\";\nexport { TranslationStatus } from \"../common.speech/TranslationStatus\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/Exports.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// Make sure not to export internal modules.\n//\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\nexport * from \"./CognitiveTokenAuthentication\";\nexport * from \"./IAuthentication\";\nexport * from \"./IConnectionFactory\";\nexport * from \"./IntentConnectionFactory\";\nexport * from \"./RecognitionEvents\";\nexport * from \"./ServiceRecognizerBase\";\nexport * from \"./RecognizerConfig\";\nexport * from \"./SpeechServiceInterfaces\";\nexport * from \"./WebsocketMessageFormatter\";\nexport * from \"./SpeechConnectionFactory\";\nexport * from \"./TranslationConnectionFactory\";\nexport * from \"./EnumTranslation\";\nexport * from \"./ServiceMessages/Enums\";\nexport * from \"./ServiceMessages/TranslationSynthesisEnd\";\nexport * from \"./ServiceMessages/TranslationHypothesis\";\nexport * from \"./ServiceMessages/TranslationPhrase\";\nexport * from \"./TranslationServiceRecognizer\";\nexport * from \"./ServiceMessages/SpeechDetected\";\nexport * from \"./ServiceMessages/SpeechHypothesis\";\nexport * from \"./SpeechServiceRecognizer\";\nexport * from \"./ServiceMessages/DetailedSpeechPhrase\";\nexport * from \"./ServiceMessages/SimpleSpeechPhrase\";\nexport * from \"./AddedLmIntent\";\nexport * from \"./IntentServiceRecognizer\";\nexport * from \"./ServiceMessages/IntentResponse\";\nexport * from \"./RequestSession\";\n\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/Exports.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * The error that is thrown when an argument passed in is null.\n *\n * @export\n * @class ArgumentNullError\n * @extends {Error}\n */\nexport class ArgumentNullError extends Error {\n\n    /**\n     * Creates an instance of ArgumentNullError.\n     *\n     * @param {string} argumentName - Name of the argument that is null\n     *\n     * @memberOf ArgumentNullError\n     */\n    public constructor(argumentName: string) {\n        super(argumentName);\n        this.name = \"ArgumentNull\";\n        this.message = argumentName;\n    }\n}\n\n/**\n * The error that is thrown when an invalid operation is performed in the code.\n *\n * @export\n * @class InvalidOperationError\n * @extends {Error}\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class InvalidOperationError extends Error {\n\n    /**\n     * Creates an instance of InvalidOperationError.\n     *\n     * @param {string} error - The error\n     *\n     * @memberOf InvalidOperationError\n     */\n    public constructor(error: string) {\n        super(error);\n        this.name = \"InvalidOperation\";\n        this.message = error;\n    }\n}\n\n/**\n * The error that is thrown when an object is disposed.\n *\n * @export\n * @class ObjectDisposedError\n * @extends {Error}\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class ObjectDisposedError extends Error {\n\n    /**\n     * Creates an instance of ObjectDisposedError.\n     *\n     * @param {string} objectName - The object that is disposed\n     * @param {string} error - The error\n     *\n     * @memberOf ObjectDisposedError\n     */\n    public constructor(objectName: string, error?: string) {\n        super(error);\n        this.name = objectName + \"ObjectDisposed\";\n        this.message = error;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/Error.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * @class Contracts\n * @private\n */\nexport class Contracts {\n    public static throwIfNullOrUndefined(param: any, name: string): void {\n        if (param === undefined || param === null) {\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\n        }\n    }\n\n    public static throwIfNull(param: any, name: string): void {\n        if (param === null) {\n            throw new Error(\"throwIfNull:\" + name);\n        }\n    }\n\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\n        Contracts.throwIfNullOrUndefined(param, name);\n\n        if ((\"\" + param).trim().length < 1) {\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\n        }\n    }\n\n    public static throwIfDisposed(isDisposed: boolean): void {\n        if (isDisposed) {\n            throw new Error(\"the object is already disposed\");\n        }\n    }\n\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\n        Contracts.throwIfNullOrUndefined(array, name);\n\n        if (array.length === 0) {\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\n        }\n\n        for (const item of array) {\n            Contracts.throwIfNullOrWhitespace(item, name);\n        }\n    }\n\n    public static throwIfFileDoesNotExist(param: any, name: string): void {\n        Contracts.throwIfNullOrWhitespace(param, name);\n\n        // TODO check for file existence.\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/Contracts.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nconst createGuid: () => string = (): string => {\n    let d = new Date().getTime();\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c: string) => {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n\n    return guid;\n};\n\nconst createNoDashGuid: () => string = (): string => {\n    return createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\n};\n\nexport { createGuid, createNoDashGuid };\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/Guid.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport * from \"./ConsoleLoggingListener\";\nexport * from \"./IRecorder\";\nexport * from \"./LocalStorage\";\nexport * from \"./MicAudioSource\";\nexport * from \"./FileAudioSource\";\nexport * from \"./OpusRecorder\";\nexport * from \"./PCMRecorder\";\nexport * from \"./SessionStorage\";\nexport * from \"./WebsocketConnection\";\nexport * from \"./WebsocketMessageAdapter\";\nexport * from \"./ReplayableAudioNode\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/Exports.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Represents audio stream format used for custom audio input configurations.\n * @class AudioStreamFormat\n */\nexport abstract class AudioStreamFormat {\n    /**\n     * Creates an audio stream format object representing the default audio stream\n     * format (16KHz 16bit mono PCM).\n     * @member AudioStreamFormat.getDefaultInputFormat\n     * @function\n     * @public\n     * @returns {AudioStreamFormat} The audio stream format being created.\n     */\n    public static getDefaultInputFormat(): AudioStreamFormat {\n        return AudioStreamFormatImpl.getDefaultInputFormat();\n    }\n\n    /**\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\n     * @member AudioStreamFormat.getWaveFormatPCM\n     * @function\n     * @public\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\n     *        uses one channel and stereo data uses two channels.\n     * @returns {AudioStreamFormat} The audio stream format being created.\n     */\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioStreamFormat.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * @private\n * @class AudioStreamFormatImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\n    /**\n     * Creates an instance with the given values.\n     * @constructor\n     * @param {number} samplesPerSec - Samples per second.\n     * @param {number} bitsPerSample - Bits per sample.\n     * @param {number} channels - Number of channels.\n     */\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1) {\n        super();\n        this.formatTag = 1;\n        this.bitsPerSample = bitsPerSample;\n        this.samplesPerSec = samplesPerSec;\n        this.channels = channels;\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\n    }\n\n    /**\n     * Retrieves the default input format.\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\n     * @function\n     * @public\n     * @returns {AudioStreamFormatImpl} The default input format.\n     */\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\n        return new AudioStreamFormatImpl();\n    }\n\n    /**\n     * Closes the configuration object.\n     * @member AudioStreamFormatImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void { return; }\n\n    /**\n     * The format of the audio, valid values: 1 (PCM)\n     * @member AudioStreamFormatImpl.prototype.formatTag\n     * @function\n     * @public\n     */\n    public formatTag: number;\n\n    /**\n     * The number of channels, valid values: 1 (Mono).\n     * @member AudioStreamFormatImpl.prototype.channels\n     * @function\n     * @public\n     */\n    public channels: number;\n\n    /**\n     * The sample rate, valid values: 16000.\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\n     * @function\n     * @public\n     */\n    public samplesPerSec: number;\n\n    /**\n     * The bits per sample, valid values: 16\n     * @member AudioStreamFormatImpl.prototype.b\n     * @function\n     * @public\n     */\n    public bitsPerSample: number;\n\n    /**\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\n     * @function\n     * @public\n     */\n    public avgBytesPerSec: number;\n\n    /**\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\n     * @member AudioStreamFormatImpl.prototype.blockAlign\n     * @function\n     * @public\n     */\n    public blockAlign: number;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/Audio/AudioStreamFormat.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { createNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\n\nexport enum EventType {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n\nexport class PlatformEvent {\n    private privName: string;\n    private privEventId: string;\n    private privEventTime: string;\n    private privEventType: EventType;\n    private privMetadata: IStringDictionary<string>;\n\n    constructor(eventName: string, eventType: EventType) {\n        this.privName = eventName;\n        this.privEventId = createNoDashGuid();\n        this.privEventTime = new Date().toISOString();\n        this.privEventType = eventType;\n        this.privMetadata = { };\n    }\n\n    public get name(): string {\n        return this.privName;\n    }\n\n    public get eventId(): string {\n        return this.privEventId;\n    }\n\n    public get eventTime(): string {\n        return this.privEventTime;\n    }\n\n    public get eventType(): EventType {\n        return this.privEventType;\n    }\n\n    public get metadata(): IStringDictionary<string> {\n        return this.privMetadata;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/PlatformEvent.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines translation status.\n * @class TranslationStatus\n */\nexport enum TranslationStatus {\n    /**\n     * @member TranslationStatus.Success\n     */\n    Success = 0,\n\n    /**\n     * @member TranslationStatus.Error\n     */\n    Error,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/TranslationStatus.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Promise } from \"../common/Exports\";\n\nexport interface IAuthentication {\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\n}\n\nexport class AuthInfo {\n    private privHeaderName: string;\n    private privToken: string;\n\n    public constructor(headerName: string, token: string) {\n        this.privHeaderName = headerName;\n        this.privToken = token;\n    }\n\n    public get headerName(): string {\n        return this.privHeaderName;\n    }\n\n    public get token(): string {\n        return this.privToken;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/IAuthentication.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { EventType, PlatformEvent } from \"../common/Exports\";\n\nexport class SpeechRecognitionEvent extends PlatformEvent {\n    private privRequestId: string;\n    private privSessionId: string;\n\n    constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n\n        this.privRequestId = requestId;\n        this.privSessionId = sessionId;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\n\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\n        super(\"ListeningStartedEvent\", requestId, sessionId);\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\n    private privAuthFetchEventid: string;\n\n    constructor(requestId: string, authFetchEventid: string, sessionId: string) {\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\n        this.privAuthFetchEventid = authFetchEventid;\n    }\n\n    public get authFetchEventid(): string {\n        return this.privAuthFetchEventid;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n    private privAuthFetchEventId: string;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\n\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n        this.privAuthFetchEventId = authFetchEventId;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n\n    public get authFetchEventId(): string {\n        return this.privAuthFetchEventId;\n    }\n}\n\nexport enum RecognitionCompletionStatus {\n    Success,\n    AudioSourceError,\n    AudioSourceTimeout,\n    AuthTokenFetchError,\n    AuthTokenFetchTimeout,\n    UnAuthorized,\n    ConnectTimeout,\n    ConnectError,\n    ClientRecognitionActivityTimeout,\n    UnknownError,\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n    private privAuthFetchEventId: string;\n    private privServiceTag: string;\n    private privStatus: RecognitionCompletionStatus;\n    private privError: string;\n\n    constructor(\n        requestId: string,\n        audioSourceId: string,\n        audioNodeId: string,\n        authFetchEventId: string,\n        sessionId: string,\n        serviceTag: string,\n        status: RecognitionCompletionStatus,\n        error: string) {\n\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\n\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n        this.privAuthFetchEventId = authFetchEventId;\n        this.privStatus = status;\n        this.privError = error;\n        this.privServiceTag = serviceTag;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n\n    public get authFetchEventId(): string {\n        return this.privAuthFetchEventId;\n    }\n\n    public get serviceTag(): string {\n        return this.privServiceTag;\n    }\n\n    public get status(): RecognitionCompletionStatus {\n        return this.privStatus;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/RecognitionEvents.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\n\nexport enum MessageType {\n    Text,\n    Binary,\n}\n\nexport class ConnectionMessage {\n\n    private privMessageType: MessageType;\n    private privHeaders: IStringDictionary<string>;\n    private privBody: any = null;\n\n    private privId: string;\n\n    public constructor(\n        messageType: MessageType,\n        body: any,\n        headers?: IStringDictionary<string>,\n        id?: string) {\n\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\n            throw new InvalidOperationError(\"Payload must be a string\");\n        }\n\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n        }\n\n        this.privMessageType = messageType;\n        this.privBody = body;\n        this.privHeaders = headers ? headers : {};\n        this.privId = id ? id : createNoDashGuid();\n    }\n\n    public get messageType(): MessageType {\n        return this.privMessageType;\n    }\n\n    public get headers(): any {\n        return this.privHeaders;\n    }\n\n    public get body(): any {\n        return this.privBody;\n    }\n\n    public get textBody(): string {\n        if (this.privMessageType === MessageType.Binary) {\n            throw new InvalidOperationError(\"Not supported for binary message\");\n        }\n\n        return this.privBody as string;\n    }\n\n    public get binaryBody(): ArrayBuffer {\n        if (this.privMessageType === MessageType.Text) {\n            throw new InvalidOperationError(\"Not supported for text message\");\n        }\n\n        return this.privBody;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/ConnectionMessage.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ObjectDisposedError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IEventListener, IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\n    private privMetadata: IStringDictionary<string>;\n    private privIsDisposed: boolean = false;\n\n    constructor(metadata?: IStringDictionary<string>) {\n        this.privMetadata = metadata;\n    }\n\n    public onEvent = (event: TEvent): void => {\n        if (this.isDisposed()) {\n            throw (new ObjectDisposedError(\"EventSource\"));\n        }\n\n        if (this.metadata) {\n            for (const paramName in this.metadata) {\n                if (paramName) {\n                    if (event.metadata) {\n                        if (!event.metadata[paramName]) {\n                            event.metadata[paramName] = this.metadata[paramName];\n                        }\n                    }\n                }\n            }\n        }\n\n        for (const eventId in this.privEventListeners) {\n            if (eventId && this.privEventListeners[eventId]) {\n                this.privEventListeners[eventId](event);\n            }\n        }\n    }\n\n    public attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\n        const id = createNoDashGuid();\n        this.privEventListeners[id] = onEventCallback;\n        return {\n            detach: () => {\n                delete this.privEventListeners[id];\n            },\n        };\n    }\n\n    public attachListener = (listener: IEventListener<TEvent>): IDetachable => {\n        return this.attach(listener.onEvent);\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privIsDisposed;\n    }\n\n    public dispose = (): void => {\n        this.privEventListeners = null;\n        this.privIsDisposed = true;\n    }\n\n    public get metadata(): IStringDictionary<string> {\n        return this.privMetadata;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/EventSource.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError } from \"./Error\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\n\nexport class InMemoryStorage implements IKeyValueStorage {\n\n    private privStore: IStringDictionary<string> = {};\n\n    public get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return this.privStore[key];\n    }\n\n    public getOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.privStore[key] === undefined) {\n            this.privStore[key] = valueToAdd;\n        }\n\n        return this.privStore[key];\n    }\n\n    public set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        this.privStore[key] = value;\n    }\n\n    public remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.privStore[key] !== undefined) {\n            delete this.privStore[key];\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/InMemoryStorage.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IDisposable } from \"./IDisposable\";\n\nexport interface IList<TItem> extends IDisposable {\n    get(itemIndex: number): TItem;\n    first(): TItem;\n    last(): TItem;\n\n    add(item: TItem): void;\n    insertAt(index: number, item: TItem): void;\n\n    removeFirst(): TItem;\n    removeLast(): TItem;\n    removeAt(index: number): TItem;\n    remove(index: number, count: number): TItem[];\n    clear(): void;\n\n    length(): number;\n\n    onAdded(addedCallback: () => void): IDetachable;\n    onRemoved(removedCallback: () => void): IDetachable;\n    onDisposed(disposedCallback: () => void): IDetachable;\n\n    join(seperator?: string): string;\n\n    toArray(): TItem[];\n\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\n    all(callback: (item: TItem) => boolean): boolean;\n    forEach(callback: (item: TItem, index: number) => void): void;\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    clone(): List<TItem>;\n    concat(list: List<TItem>): List<TItem>;\n    concatArray(array: TItem[]): List<TItem>;\n}\n\nexport class List<TItem> implements IList<TItem>  {\n    private privList: TItem[];\n    private privSubscriptionIdCounter: number = 0;\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\n    private privDisposeReason: string = null;\n\n    public constructor(list?: TItem[]) {\n        this.privList = [];\n        // copy the list rather than taking as is.\n        if (list) {\n            for (const item of list) {\n                this.privList.push(item);\n            }\n        }\n    }\n\n    public get = (itemIndex: number): TItem => {\n        this.throwIfDisposed();\n        return this.privList[itemIndex];\n    }\n\n    public first = (): TItem => {\n        return this.get(0);\n    }\n\n    public last = (): TItem => {\n        return this.get(this.length() - 1);\n    }\n\n    public add = (item: TItem): void => {\n        this.throwIfDisposed();\n        this.insertAt(this.privList.length, item);\n    }\n\n    public insertAt = (index: number, item: TItem): void => {\n        this.throwIfDisposed();\n        if (index === 0) {\n            this.privList.unshift(item);\n        } else if (index === this.privList.length) {\n            this.privList.push(item);\n        } else {\n            this.privList.splice(index, 0, item);\n        }\n        this.triggerSubscriptions(this.privAddSubscriptions);\n    }\n\n    public removeFirst = (): TItem => {\n        this.throwIfDisposed();\n        return this.removeAt(0);\n    }\n\n    public removeLast = (): TItem => {\n        this.throwIfDisposed();\n        return this.removeAt(this.length() - 1);\n    }\n\n    public removeAt = (index: number): TItem => {\n        this.throwIfDisposed();\n        return this.remove(index, 1)[0];\n    }\n\n    public remove = (index: number, count: number): TItem[] => {\n        this.throwIfDisposed();\n        const removedElements = this.privList.splice(index, count);\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\n        return removedElements;\n    }\n\n    public clear = (): void => {\n        this.throwIfDisposed();\n        this.remove(0, this.length());\n    }\n\n    public length = (): number => {\n        this.throwIfDisposed();\n        return this.privList.length;\n    }\n\n    public onAdded = (addedCallback: () => void): IDetachable => {\n        this.throwIfDisposed();\n        const subscriptionId = this.privSubscriptionIdCounter++;\n\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\n\n        return {\n            detach: () => {\n                delete this.privAddSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public onRemoved = (removedCallback: () => void): IDetachable => {\n        this.throwIfDisposed();\n        const subscriptionId = this.privSubscriptionIdCounter++;\n\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\n\n        return {\n            detach: () => {\n                delete this.privRemoveSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public onDisposed = (disposedCallback: () => void): IDetachable => {\n        this.throwIfDisposed();\n        const subscriptionId = this.privSubscriptionIdCounter++;\n\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\n\n        return {\n            detach: () => {\n                delete this.privDisposedSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public join = (seperator?: string): string => {\n        this.throwIfDisposed();\n        return this.privList.join(seperator);\n    }\n\n    public toArray = (): TItem[] => {\n        const cloneCopy = Array<TItem>();\n        this.privList.forEach((val: TItem) => {\n            cloneCopy.push(val);\n        });\n        return cloneCopy;\n    }\n\n    public any = (callback?: (item: TItem, index: number) => boolean): boolean => {\n        this.throwIfDisposed();\n        if (callback) {\n            return this.where(callback).length() > 0;\n        } else {\n            return this.length() > 0;\n        }\n    }\n\n    public all = (callback: (item: TItem) => boolean): boolean => {\n        this.throwIfDisposed();\n        return this.where(callback).length() === this.length();\n    }\n\n    public forEach = (callback: (item: TItem, index: number) => void): void => {\n        this.throwIfDisposed();\n        for (let i = 0; i < this.length(); i++) {\n            callback(this.privList[i], i);\n        }\n    }\n\n    public select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\n        this.throwIfDisposed();\n        const selectList: T2[] = [];\n        for (let i = 0; i < this.privList.length; i++) {\n            selectList.push(callback(this.privList[i], i));\n        }\n\n        return new List<T2>(selectList);\n    }\n\n    public where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\n        this.throwIfDisposed();\n        const filteredList = new List<TItem>();\n        for (let i = 0; i < this.privList.length; i++) {\n            if (callback(this.privList[i], i)) {\n                filteredList.add(this.privList[i]);\n            }\n        }\n        return filteredList;\n    }\n\n    public orderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.throwIfDisposed();\n        const clonedArray = this.toArray();\n        const orderedArray = clonedArray.sort(compareFn);\n        return new List(orderedArray);\n    }\n\n    public orderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.throwIfDisposed();\n        return this.orderBy((a: TItem, b: TItem) => compareFn(b, a));\n    }\n\n    public clone = (): List<TItem> => {\n        this.throwIfDisposed();\n        return new List<TItem>(this.toArray());\n    }\n\n    public concat = (list: List<TItem>): List<TItem> => {\n        this.throwIfDisposed();\n        return new List<TItem>(this.privList.concat(list.toArray()));\n    }\n\n    public concatArray = (array: TItem[]): List<TItem> => {\n        this.throwIfDisposed();\n        return new List<TItem>(this.privList.concat(array));\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privList == null;\n    }\n\n    public dispose = (reason?: string): void => {\n        if (!this.isDisposed()) {\n            this.privDisposeReason = reason;\n            this.privList = null;\n            this.privAddSubscriptions = null;\n            this.privRemoveSubscriptions = null;\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\n        }\n    }\n\n    private throwIfDisposed = (): void => {\n        if (this.isDisposed()) {\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\n        }\n    }\n\n    private triggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\n        if (subscriptions) {\n            for (const subscriptionId in subscriptions) {\n                if (subscriptionId) {\n                    subscriptions[subscriptionId]();\n                }\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/List.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError  } from \"./Error\";\n\nexport enum PromiseState {\n    None,\n    Resolved,\n    Rejected,\n}\n\nexport interface IPromise<T> {\n    result(): PromiseResult<T>;\n\n    continueWith<TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\n\n    continueWithPromise<TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\n\n    onSuccessContinueWith<TContinuationResult>(\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\n\n    onSuccessContinueWithPromise<TContinuationResult>(\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\n\n    on(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\n\n    finally(callback: () => void): IPromise<T>;\n}\n\nexport interface IDeferred<T> {\n    state(): PromiseState;\n\n    promise(): IPromise<T>;\n\n    resolve(result: T): IDeferred<T>;\n\n    reject(error: string): IDeferred<T>;\n}\n\nexport class PromiseResult<T> {\n    protected privIsCompleted: boolean;\n    protected privIsError: boolean;\n    protected privError: string;\n    protected privResult: T;\n\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\n        promiseResultEventSource.on((result: T) => {\n            if (!this.privIsCompleted) {\n                this.privIsCompleted = true;\n                this.privIsError = false;\n                this.privResult = result;\n            }\n        }, (error: string) => {\n            if (!this.privIsCompleted) {\n                this.privIsCompleted = true;\n                this.privIsError = true;\n                this.privError = error;\n            }\n        });\n    }\n\n    public get isCompleted(): boolean {\n        return this.privIsCompleted;\n    }\n\n    public get isError(): boolean {\n        return this.privIsError;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n\n    public get result(): T {\n        return this.privResult;\n    }\n\n    public throwIfError = (): void => {\n        if (this.isError) {\n            throw this.error;\n        }\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class PromiseResultEventSource<T>  {\n\n    private privOnSetResult: (result: T) => void;\n    private privOnSetError: (error: string) => void;\n\n    public setResult = (result: T): void => {\n        this.privOnSetResult(result);\n    }\n\n    public setError = (error: string): void => {\n        this.privOnSetError(error);\n    }\n\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\n        this.privOnSetResult = onSetResult;\n        this.privOnSetError = onSetError;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class PromiseHelper {\n    public static whenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\n        if (!promises || promises.length === 0) {\n            throw new ArgumentNullError(\"promises\");\n        }\n\n        const deferred = new Deferred<boolean>();\n        const errors: string[] = [];\n        let completedPromises: number = 0;\n\n        const checkForCompletion = () => {\n            completedPromises++;\n            if (completedPromises === promises.length) {\n                if (errors.length === 0) {\n                    deferred.resolve(true);\n                } else {\n                    deferred.reject(errors.join(\", \"));\n                }\n            }\n        };\n\n        for (const promise of promises) {\n            promise.on((r: any) => {\n                checkForCompletion();\n            }, (e: string) => {\n                errors.push(e);\n                checkForCompletion();\n            });\n        }\n\n        return deferred.promise();\n    }\n\n    public static fromResult = <TResult>(result: TResult): Promise<TResult> => {\n        const deferred = new Deferred<TResult>();\n        deferred.resolve(result);\n        return deferred.promise();\n    }\n\n    public static fromError = <TResult>(error: string): Promise<TResult> => {\n        const deferred = new Deferred<TResult>();\n        deferred.reject(error);\n        return deferred.promise();\n    }\n}\n\n// TODO: replace with ES6 promises\n// tslint:disable-next-line:max-classes-per-file\nexport class Promise<T> implements IPromise<T> {\n    private privSink: Sink<T>;\n\n    public constructor(sink: Sink<T>) {\n        this.privSink = sink;\n    }\n\n    public result = (): PromiseResult<T> => {\n        return this.privSink.result;\n    }\n\n    public continueWith = <TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.privSink.on(\n            (r: T) => {\n                try {\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\n                    continuationDeferral.resolve(continuationResult);\n                } catch (e) {\n                    continuationDeferral.reject(e);\n                }\n            },\n            (error: string) => {\n                try {\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\n                    continuationDeferral.resolve(continuationResult);\n                } catch (e) {\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\n                }\n            },\n        );\n\n        return continuationDeferral.promise();\n    }\n\n    public onSuccessContinueWith = <TContinuationResult>(\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.privSink.on(\n            (r: T) => {\n                try {\n                    const continuationResult: TContinuationResult = continuationCallback(r);\n                    continuationDeferral.resolve(continuationResult);\n                } catch (e) {\n                    continuationDeferral.reject(e);\n                }\n            },\n            (error: string) => {\n                continuationDeferral.reject(error);\n            },\n        );\n\n        return continuationDeferral.promise();\n    }\n\n    public continueWithPromise = <TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.privSink.on(\n            (r: T) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\n                    if (!continuationPromise) {\n                        throw new Error(\"'Continuation callback did not return promise'\");\n                    }\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\n                        continuationDeferral.resolve(continuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.reject(e);\n                }\n            },\n            (error: string) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\n                    if (!continuationPromise) {\n                        throw new Error(\"Continuation callback did not return promise\");\n                    }\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\n                        continuationDeferral.resolve(continuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\n                }\n            },\n        );\n\n        return continuationDeferral.promise();\n    }\n\n    public onSuccessContinueWithPromise = <TContinuationResult>(\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.privSink.on(\n            (r: T) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\n                    if (!continuationPromise) {\n                        throw new Error(\"Continuation callback did not return promise\");\n                    }\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\n                        continuationDeferral.resolve(continuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.reject(e);\n                }\n            },\n            (error: string) => {\n                continuationDeferral.reject(error);\n            },\n        );\n\n        return continuationDeferral.promise();\n    }\n\n    public on = (\n        successCallback: (result: T) => void,\n        errorCallback: (error: string) => void): Promise<T> => {\n        if (!successCallback) {\n            throw new ArgumentNullError(\"successCallback\");\n        }\n\n        if (!errorCallback) {\n            throw new ArgumentNullError(\"errorCallback\");\n        }\n\n        this.privSink.on(successCallback, errorCallback);\n        return this;\n    }\n\n    public finally = (callback: () => void): Promise<T> => {\n        if (!callback) {\n            throw new ArgumentNullError(\"callback\");\n        }\n\n        const callbackWrapper = (_: any) => {\n            callback();\n        };\n\n        return this.on(callbackWrapper, callbackWrapper);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Deferred<T> implements IDeferred<T> {\n    private privPromise: Promise<T>;\n    private privSink: Sink<T>;\n\n    public constructor() {\n        this.privSink = new Sink<T>();\n        this.privPromise = new Promise<T>(this.privSink);\n    }\n\n    public state = (): PromiseState => {\n        return this.privSink.state;\n    }\n\n    public promise = (): Promise<T> => {\n        return this.privPromise;\n    }\n\n    public resolve = (result: T): Deferred<T> => {\n        this.privSink.resolve(result);\n        return this;\n    }\n\n    public reject = (error: string): Deferred<T> => {\n        this.privSink.reject(error);\n        return this;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Sink<T> {\n    private privState: PromiseState = PromiseState.None;\n    private privPromiseResult: PromiseResult<T> = null;\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\n\n    private privSuccessHandlers: Array<((result: T) => void)> = [];\n    private privErrorHandlers: Array<(e: string) => void> = [];\n\n    public constructor() {\n        this.privPromiseResultEvents = new PromiseResultEventSource();\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\n    }\n\n    public get state(): PromiseState {\n        return this.privState;\n    }\n\n    public get result(): PromiseResult<T> {\n        return this.privPromiseResult;\n    }\n\n    public resolve = (result: T): void => {\n        if (this.privState !== PromiseState.None) {\n            throw new Error(\"'Cannot resolve a completed promise'\");\n        }\n\n        this.privState = PromiseState.Resolved;\n        this.privPromiseResultEvents.setResult(result);\n\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\n        }\n\n        this.detachHandlers();\n    }\n\n    public reject = (error: string): void => {\n        if (this.privState !== PromiseState.None) {\n            throw new Error(\"'Cannot reject a completed promise'\");\n        }\n\n        this.privState = PromiseState.Rejected;\n        this.privPromiseResultEvents.setError(error);\n\n        for (const errorHandler of this.privErrorHandlers) {\n            this.executeErrorCallback(error, errorHandler);\n        }\n\n        this.detachHandlers();\n    }\n\n    public on = (\n        successCallback: (result: T) => void,\n        errorCallback: (error: string) => void): void => {\n\n        if (successCallback == null) {\n            successCallback = (r: T) => { return; };\n        }\n\n        if (this.privState === PromiseState.None) {\n            this.privSuccessHandlers.push(successCallback);\n            this.privErrorHandlers.push(errorCallback);\n        } else {\n            if (this.privState === PromiseState.Resolved) {\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\n            } else if (this.privState === PromiseState.Rejected) {\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\n            }\n\n            this.detachHandlers();\n        }\n    }\n\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\n        try {\n            successCallback(result);\n        } catch (e) {\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\n        }\n    }\n\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\n        if (errorCallback) {\n            try {\n                errorCallback(error);\n            } catch (e) {\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n            }\n        } else {\n            throw new Error(`'Unhandled error: ${error}'`);\n        }\n    }\n\n    private detachHandlers = (): void => {\n        this.privErrorHandlers = [];\n        this.privSuccessHandlers = [];\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/Promise.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IDisposable } from \"./IDisposable\";\nimport { List } from \"./List\";\nimport { Deferred, Promise, PromiseHelper } from \"./Promise\";\n\nexport interface IQueue<TItem> extends IDisposable {\n    enqueue(item: TItem): void;\n    enqueueFromPromise(promise: Promise<TItem>): void;\n    dequeue(): Promise<TItem>;\n    peek(): Promise<TItem>;\n    length(): number;\n}\n\nenum SubscriberType {\n    Dequeue,\n    Peek,\n}\n\nexport class Queue<TItem> implements IQueue<TItem> {\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\n    private privList: List<TItem>;\n    private privDetachables: IDetachable[];\n    private privSubscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\n    private privIsDrainInProgress: boolean = false;\n    private privIsDisposing: boolean = false;\n    private privDisposeReason: string = null;\n\n    public constructor(list?: List<TItem>) {\n        this.privList = list ? list : new List<TItem>();\n        this.privDetachables = [];\n        this.privSubscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\n        this.privDetachables.push(this.privList.onAdded(this.drain));\n    }\n\n    public enqueue = (item: TItem): void => {\n        this.throwIfDispose();\n        this.enqueueFromPromise(PromiseHelper.fromResult(item));\n    }\n\n    public enqueueFromPromise = (promise: Promise<TItem>): void => {\n        this.throwIfDispose();\n        this.privPromiseStore.add(promise);\n        promise.finally(() => {\n            while (this.privPromiseStore.length() > 0) {\n                if (!this.privPromiseStore.first().result().isCompleted) {\n                    break;\n                } else {\n                    const p = this.privPromiseStore.removeFirst();\n                    if (!p.result().isError) {\n                        this.privList.add(p.result().result);\n                    } else {\n                        // TODO: Log as warning.\n                    }\n                }\n            }\n        });\n    }\n\n    public dequeue = (): Promise<TItem> => {\n        this.throwIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n\n        if (this.privSubscribers) {\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\n            this.drain();\n        }\n\n        return deferredSubscriber.promise();\n    }\n\n    public peek = (): Promise<TItem> => {\n        this.throwIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n\n        const subs = this.privSubscribers;\n        if (subs) {\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\n            this.drain();\n        }\n\n        return deferredSubscriber.promise();\n    }\n\n    public length = (): number => {\n        this.throwIfDispose();\n        return this.privList.length();\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privSubscribers == null;\n    }\n\n    public drainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\n        if (!this.isDisposed() && !this.privIsDisposing) {\n            this.privDisposeReason = reason;\n            this.privIsDisposing = true;\n\n            const subs = this.privSubscribers;\n            if (subs) {\n                while (subs.length() > 0) {\n                    const subscriber = subs.removeFirst();\n                    // TODO: this needs work (Resolve(null) instead?).\n                    subscriber.deferral.resolve(undefined);\n                    // subscriber.deferral.reject(\"Disposed\");\n                }\n\n                // note: this block assumes cooperative multitasking, i.e.,\n                // between the if-statement and the assignment there are no\n                // thread switches.\n                // Reason is that between the initial const = this.; and this\n                // point there is the derral.resolve() operation that might have\n                // caused recursive calls to the Queue, especially, calling\n                // Dispose() on the queue alredy (which would reset the var\n                // here to null!).\n                // That should generally hold true for javascript...\n                if (this.privSubscribers === subs) {\n                    this.privSubscribers = subs;\n                }\n            }\n\n            for (const detachable of this.privDetachables) {\n                detachable.detach();\n            }\n\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\n                return PromiseHelper\n                    .whenAll(this.privPromiseStore.toArray())\n                    .continueWith(() => {\n                        this.privSubscribers = null;\n                        this.privList.forEach((item: TItem, index: number): void => {\n                            pendingItemProcessor(item);\n                        });\n                        this.privList = null;\n                        return true;\n                    });\n            } else {\n                this.privSubscribers = null;\n                this.privList = null;\n            }\n        }\n\n        return PromiseHelper.fromResult(true);\n    }\n\n    public dispose = (reason?: string): void => {\n        this.drainAndDispose(null, reason);\n    }\n\n    private drain = (): void => {\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\n            this.privIsDrainInProgress = true;\n\n            const subs = this.privSubscribers;\n            const lists = this.privList;\n            if (subs && lists) {\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\n                    const subscriber = subs.removeFirst();\n                    if (subscriber.type === SubscriberType.Peek) {\n                        subscriber.deferral.resolve(lists.first());\n                    } else {\n                        const dequeuedItem = lists.removeFirst();\n                        subscriber.deferral.resolve(dequeuedItem);\n                    }\n                }\n\n                // note: this block assumes cooperative multitasking, i.e.,\n                // between the if-statement and the assignment there are no\n                // thread switches.\n                // Reason is that between the initial const = this.; and this\n                // point there is the derral.resolve() operation that might have\n                // caused recursive calls to the Queue, especially, calling\n                // Dispose() on the queue alredy (which would reset the var\n                // here to null!).\n                // That should generally hold true for javascript...\n                if (this.privSubscribers === subs) {\n                    this.privSubscribers = subs;\n                }\n\n                // note: this block assumes cooperative multitasking, i.e.,\n                // between the if-statement and the assignment there are no\n                // thread switches.\n                // Reason is that between the initial const = this.; and this\n                // point there is the derral.resolve() operation that might have\n                // caused recursive calls to the Queue, especially, calling\n                // Dispose() on the queue alredy (which would reset the var\n                // here to null!).\n                // That should generally hold true for javascript...\n                if (this.privList === lists) {\n                    this.privList = lists;\n                }\n            }\n\n            this.privIsDrainInProgress = false;\n        }\n    }\n\n    private throwIfDispose = (): void => {\n        if (this.isDisposed()) {\n            if (this.privDisposeReason) {\n                throw new InvalidOperationError(this.privDisposeReason);\n            }\n\n            throw new ObjectDisposedError(\"Queue\");\n        } else if (this.privIsDisposing) {\n            throw new InvalidOperationError(\"Queue disposing\");\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/Queue.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport {\n    ArgumentNullError,\n    ConnectionClosedEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionMessageReceivedEvent,\n    ConnectionMessageSentEvent,\n    ConnectionOpenResponse,\n    ConnectionStartEvent,\n    ConnectionState,\n    Deferred,\n    Events,\n    EventSource,\n    IWebsocketMessageFormatter,\n    MessageType,\n    Promise,\n    PromiseHelper,\n    Queue,\n    RawWebsocketMessage,\n} from \"../common/Exports\";\n\nimport ws = require(\"ws\");\n\ninterface ISendItem {\n    Message: ConnectionMessage;\n    RawWebsocketMessage: RawWebsocketMessage;\n    sendStatusDeferral: Deferred<boolean>;\n}\n\nexport class WebsocketMessageAdapter {\n    private privConnectionState: ConnectionState;\n    private privMessageFormatter: IWebsocketMessageFormatter;\n    private privWebsocketClient: WebSocket | ws;\n\n    private privSendMessageQueue: Queue<ISendItem>;\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\n    private privDisconnectDeferral: Deferred<boolean>;\n    private privConnectionEvents: EventSource<ConnectionEvent>;\n    private privConnectionId: string;\n    private privUri: string;\n\n    public static forceNpmWebSocket: boolean = false;\n\n    public constructor(\n        uri: string,\n        connectionId: string,\n        messageFormatter: IWebsocketMessageFormatter) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\n        this.privConnectionId = connectionId;\n        this.privMessageFormatter = messageFormatter;\n        this.privConnectionState = ConnectionState.None;\n        this.privUri = uri;\n    }\n\n    public get state(): ConnectionState {\n        return this.privConnectionState;\n    }\n\n    public open = (): Promise<ConnectionOpenResponse> => {\n        if (this.privConnectionState === ConnectionState.Disconnected) {\n            return PromiseHelper.fromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\n        }\n\n        if (this.privConnectionEstablishDeferral) {\n            return this.privConnectionEstablishDeferral.promise();\n        }\n\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\n        this.privConnectionState = ConnectionState.Connecting;\n\n        try {\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\n                this.privWebsocketClient = new WebSocket(this.privUri);\n            } else {\n                this.privWebsocketClient = new ws(this.privUri);\n            }\n\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\n            this.privDisconnectDeferral = new Deferred<boolean>();\n            this.privSendMessageQueue = new Queue<ISendItem>();\n            this.processSendQueue();\n        } catch (error) {\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\n            return this.privConnectionEstablishDeferral.promise();\n        }\n\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\n\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\n            this.privConnectionState = ConnectionState.Connected;\n            this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\n        };\n\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\n            // TODO: Understand what this is error is. Will we still get onClose ?\n            if (this.privConnectionState !== ConnectionState.Connecting) {\n                // TODO: Is this required ?\n                // this.onEvent(new ConnectionErrorEvent(errorMsg, connectionId));\n            }\n        };\n\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\n            if (this.privConnectionState === ConnectionState.Connecting) {\n                this.privConnectionState = ConnectionState.Disconnected;\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason));\n            } else {\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\n            }\n\n            this.onClose(e.code, e.reason);\n        };\n\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\n            const networkReceivedTime = new Date().toISOString();\n            if (this.privConnectionState === ConnectionState.Connected) {\n                const deferred = new Deferred<ConnectionMessage>();\n                // let id = ++this.idCounter;\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise());\n                if (e.data instanceof ArrayBuffer) {\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\n                    this.privMessageFormatter\n                        .toConnectionMessage(rawMessage)\n                        .on((connectionMessage: ConnectionMessage) => {\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\n                            deferred.resolve(connectionMessage);\n                        }, (error: string) => {\n                            // TODO: Events for these ?\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\n                        });\n                } else {\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\n                    this.privMessageFormatter\n                        .toConnectionMessage(rawMessage)\n                        .on((connectionMessage: ConnectionMessage) => {\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\n                            deferred.resolve(connectionMessage);\n                        }, (error: string) => {\n                            // TODO: Events for these ?\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\n                        });\n                }\n            }\n        };\n\n        return this.privConnectionEstablishDeferral.promise();\n    }\n\n    public send = (message: ConnectionMessage): Promise<boolean> => {\n        if (this.privConnectionState !== ConnectionState.Connected) {\n            return PromiseHelper.fromError<boolean>(`Cannot send on connection that is in ${this.privConnectionState} state`);\n        }\n\n        const messageSendStatusDeferral = new Deferred<boolean>();\n        const messageSendDeferral = new Deferred<ISendItem>();\n\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise());\n\n        this.privMessageFormatter\n            .fromConnectionMessage(message)\n            .on((rawMessage: RawWebsocketMessage) => {\n                messageSendDeferral.resolve({\n                    Message: message,\n                    RawWebsocketMessage: rawMessage,\n                    sendStatusDeferral: messageSendStatusDeferral,\n                });\n            }, (error: string) => {\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\n            });\n\n        return messageSendStatusDeferral.promise();\n    }\n\n    public read = (): Promise<ConnectionMessage> => {\n        if (this.privConnectionState !== ConnectionState.Connected) {\n            return PromiseHelper.fromError<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\n        }\n\n        return this.privReceivingMessageQueue.dequeue();\n    }\n\n    public close = (reason?: string): Promise<boolean> => {\n        if (this.privWebsocketClient) {\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\n            }\n        } else {\n            const deferral = new Deferred<boolean>();\n            deferral.resolve(true);\n            return deferral.promise();\n        }\n\n        return this.privDisconnectDeferral.promise();\n    }\n\n    public get events(): EventSource<ConnectionEvent> {\n        return this.privConnectionEvents;\n    }\n\n    private sendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\n        try {\n            // indicates we are draining the queue and it came with no message;\n            if (!sendItem) {\n                return PromiseHelper.fromResult(true);\n            }\n\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\n            this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\n            return PromiseHelper.fromResult(true);\n        } catch (e) {\n            return PromiseHelper.fromError<boolean>(`websocket send error: ${e}`);\n        }\n    }\n\n    private onClose = (code: number, reason: string): void => {\n        const closeReason = `Connection closed. ${code}: ${reason}`;\n        this.privConnectionState = ConnectionState.Disconnected;\n        this.privDisconnectDeferral.resolve(true);\n        this.privReceivingMessageQueue.dispose(reason);\n        this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\n            // TODO: Events for these ?\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\n        }, closeReason);\n\n        this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\n        }, closeReason);\n    }\n\n    private processSendQueue = (): void => {\n        this.privSendMessageQueue\n            .dequeue()\n            .on((sendItem: ISendItem) => {\n                // indicates we are draining the queue and it came with no message;\n                if (!sendItem) {\n                    return;\n                }\n\n                this.sendRawMessage(sendItem)\n                    .on((result: boolean) => {\n                        sendItem.sendStatusDeferral.resolve(result);\n                        this.processSendQueue();\n                    }, (sendError: string) => {\n                        sendItem.sendStatusDeferral.reject(sendError);\n                        this.processSendQueue();\n                    });\n            }, (error: string) => {\n                // do nothing\n            });\n    }\n\n    private onEvent = (event: ConnectionEvent): void => {\n        this.privConnectionEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/WebsocketMessageAdapter.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { createNoDashGuid } from \"../../../src/common/Guid\";\nimport {\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStreamChunk,\n    Promise,\n    PromiseHelper,\n    Stream,\n    StreamReader,\n} from \"../../common/Exports\";\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n\nconst bufferSize: number = 4096;\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @class AudioInputStream\n */\nexport abstract class AudioInputStream {\n\n    /**\n     * Creates and initializes an instance.\n     * @constructor\n     */\n    protected constructor() { }\n\n    /**\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\n     * @member AudioInputStream.createPushStream\n     * @function\n     * @public\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     *        written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\n     * @returns {PushAudioInputStream} The audio input stream being created.\n     */\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\n        return PushAudioInputStream.create(format);\n    }\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\n     * and close() methods.\n     * @member AudioInputStream.createPullStream\n     * @function\n     * @public\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\n     *        PullAudioInputStreamCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\n     *        the callback's read() method (currently only support 16 kHz 16bit mono PCM).\n     * @returns {PullAudioInputStream} The audio input stream being created.\n     */\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\n        return PullAudioInputStream.create(callback, format);\n        // throw new Error(\"Oops\");\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @class PushAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\nexport abstract class PushAudioInputStream extends AudioInputStream {\n\n    /**\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\n     * @member PushAudioInputStream.create\n     * @function\n     * @public\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\n     *        push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\n     * @returns {PushAudioInputStream} The push audio input stream being created.\n     */\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\n        return new PushAudioInputStreamImpl(format);\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PushAudioInputStream.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public abstract write(dataBuffer: ArrayBuffer): void;\n\n    /**\n     * Closes the stream.\n     * @member PushAudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @private\n * @class PushAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\n\n    private privFormat: AudioStreamFormat;\n    private privId: string;\n    private privEvents: EventSource<AudioSourceEvent>;\n    private privStream: Stream<ArrayBuffer> = new Stream<ArrayBuffer>();\n\n    /**\n     * Creates and initalizes an instance with the given values.\n     * @constructor\n     * @param {AudioStreamFormat} format - The audio stream format.\n     */\n    public constructor(format?: AudioStreamFormat) {\n        super();\n        if (format === undefined) {\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\n        } else {\n            this.privFormat = format;\n        }\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privId = createNoDashGuid();\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): AudioStreamFormat {\n        return this.privFormat;\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PushAudioInputStreamImpl.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public write(dataBuffer: ArrayBuffer): void {\n        // Break the data up into smaller chunks if needed.\n        let i: number;\n        for (i = bufferSize - 1; i < dataBuffer.byteLength; i += bufferSize) {\n            this.privStream.write(dataBuffer.slice(i - (bufferSize - 1), i + 1));\n        }\n\n        if ((i - (bufferSize - 1)) !== dataBuffer.byteLength) {\n            this.privStream.write(dataBuffer.slice(i - (bufferSize - 1), dataBuffer.byteLength));\n        }\n    }\n\n    /**\n     * Closes the stream.\n     * @member PushAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privStream.close();\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public turnOn(): Promise<boolean> {\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return PromiseHelper.fromResult(true);\n    }\n\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        return this.turnOn()\n            .onSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\n                // For now we support a single parallel reader of the pushed stream.\n                // So we can simiply hand the stream to the recognizer and let it recognize.\n\n                return this.privStream.getReader();\n            })\n            .onSuccessContinueWith((streamReader: StreamReader<ArrayBuffer>) => {\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n\n                return {\n                    detach: () => {\n                        streamReader.close();\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                        this.turnOff();\n                    },\n                    id: () => {\n                        return audioNodeId;\n                    },\n                    read: () => {\n                        return streamReader.read();\n                    },\n                };\n            });\n    }\n\n    public detach(audioNodeId: string): void {\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n\n    public turnOff(): Promise<boolean> {\n        return PromiseHelper.fromResult(false);\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n}\n\n/*\n * Represents audio input stream used for custom audio input configurations.\n * @class PullAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\nexport abstract class PullAudioInputStream extends AudioInputStream {\n    /**\n     * Creates and initializes and instance.\n     * @constructor\n     */\n    protected constructor() { super(); }\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n     * @member PullAudioInputStream.create\n     * @function\n     * @public\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n     *        derived from PullAudioInputStreamCustomCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\n     * @returns {PullAudioInputStream} The push audio input stream being created.\n     */\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\n        return new PullAudioInputStreamImpl(callback, format);\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member PullAudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n\n}\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class PullAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\n\n    private privCallback: PullAudioInputStreamCallback;\n    private privFormat: AudioStreamFormat;\n    private privId: string;\n    private privEvents: EventSource<AudioSourceEvent>;\n    private privIsClosed: boolean;\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n     * @constructor\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n     *        derived from PullAudioInputStreamCustomCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\n     */\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat) {\n        super();\n        if (undefined === format) {\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat();\n        } else {\n            this.privFormat = format;\n        }\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privId = createNoDashGuid();\n        this.privCallback = callback;\n        this.privIsClosed = false;\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): AudioStreamFormat {\n        return this.privFormat;\n    }\n\n    /**\n     * Closes the stream.\n     * @member PullAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privIsClosed = true;\n        this.privCallback.close();\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public turnOn(): Promise<boolean> {\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return PromiseHelper.fromResult(true);\n    }\n\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        return this.turnOn()\n            .onSuccessContinueWith((result: boolean) => {\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n\n                return {\n                    detach: () => {\n                        this.privCallback.close();\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                        this.turnOff();\n                    },\n                    id: () => {\n                        return audioNodeId;\n                    },\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => {\n                        const readBuff: ArrayBuffer = new ArrayBuffer(bufferSize);\n                        const pulledBytes: number = this.privCallback.read(readBuff);\n\n                        return PromiseHelper.fromResult<IStreamChunk<ArrayBuffer>>({\n                            buffer: readBuff.slice(0, pulledBytes),\n                            isEnd: this.privIsClosed,\n                        });\n                    },\n                };\n            });\n\n    }\n\n    public detach(audioNodeId: string): void {\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n\n    public turnOff(): Promise<boolean> {\n        return PromiseHelper.fromResult(false);\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/Audio/AudioInputStream.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { WebsocketConnection } from \"../common.browser/Exports\";\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { IConnection, IStringDictionary, Storage } from \"../common/Exports\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { AuthInfo, IConnectionFactory, RecognitionMode, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\n\nexport class SpeechConnectionFactory implements IConnectionFactory {\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n        const queryParams: IStringDictionary<string> = {};\n\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n        if (endpointId) {\n            if (!endpoint || endpoint.search(QueryParameterNames.DeploymentIdParamName) === -1) {\n                queryParams[QueryParameterNames.DeploymentIdParamName] = endpointId;\n            }\n        } else if (language) {\n            if (!endpoint || endpoint.search(QueryParameterNames.LanguageParamName) === -1) {\n                queryParams[QueryParameterNames.LanguageParamName] = language;\n            }\n        }\n\n        if (!endpoint || endpoint.search(QueryParameterNames.FormatParamName) === -1) {\n            queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n        }\n\n        if (this.isDebugModeEnabled) {\n            queryParams[QueryParameterNames.TestHooksParamName] = \"1\";\n        }\n\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n\n            switch (config.recognitionMode) {\n                case RecognitionMode.Conversation:\n                    endpoint = this.host(region) + this.conversationRelativeUri;\n                    break;\n                case RecognitionMode.Dictation:\n                    endpoint = this.host(region) + this.dictationRelativeUri;\n                    break;\n                default:\n                    endpoint = this.host(region) + this.interactiveRelativeUri; // default is interactive\n                    break;\n            }\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[authInfo.headerName] = authInfo.token;\n        headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\n\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\n    }\n\n    private host(region: string): string {\n        return Storage.local.getOrAdd(\"Host\", \"wss://\" + region + \".stt.speech.microsoft.com\");\n    }\n\n    private get interactiveRelativeUri(): string {\n        return Storage.local.getOrAdd(\"InteractiveRelativeUri\", \"/speech/recognition/interactive/cognitiveservices/v1\");\n    }\n\n    private get conversationRelativeUri(): string {\n        return Storage.local.getOrAdd(\"ConversationRelativeUri\", \"/speech/recognition/conversation/cognitiveservices/v1\");\n    }\n\n    private get dictationRelativeUri(): string {\n        return Storage.local.getOrAdd(\"DictationRelativeUri\", \"/speech/recognition/dictation/cognitiveservices/v1\");\n    }\n\n    private get isDebugModeEnabled(): boolean {\n        const value = Storage.local.getOrAdd(\"IsDebugModeEnabled\", \"false\");\n        return value.toLowerCase() === \"true\";\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/SpeechConnectionFactory.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nwindow.SpeechSDK = require('./distrib/lib/microsoft.cognitiveservices.speech.sdk.js');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./bundleApp.js\n// module id = 21\n// module chunks = 0","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ConsoleLoggingListener, LocalStorage, SessionStorage } from \"./src/common.browser/Exports\";\nimport { Events, Storage } from \"./src/common/Exports\";\n\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\nEvents.instance.attachListener(new ConsoleLoggingListener());\n\n// Speech SDK API\nexport * from \"./src/sdk/Exports\";\n\n\n\n// WEBPACK FOOTER //\n// ../../microsoft.cognitiveservices.speech.sdk.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\n\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\n    private privLogLevelFilter: EventType;\n\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\n        this.privLogLevelFilter = logLevelFilter;\n    }\n\n    public onEvent = (event: PlatformEvent): void => {\n        if (event.eventType >= this.privLogLevelFilter) {\n            const log = this.toString(event);\n\n            switch (event.eventType) {\n                case EventType.Debug:\n                    // tslint:disable-next-line:no-console\n                    console.debug(log);\n                    break;\n                case EventType.Info:\n                    // tslint:disable-next-line:no-console\n                    console.info(log);\n                    break;\n                case EventType.Warning:\n                    // tslint:disable-next-line:no-console\n                    console.warn(log);\n                    break;\n                case EventType.Error:\n                    // tslint:disable-next-line:no-console\n                    console.error(log);\n                    break;\n                default:\n                    // tslint:disable-next-line:no-console\n                    console.log(log);\n                    break;\n            }\n        }\n    }\n\n    private toString = (event: any): string => {\n        const logFragments = [\n            `${event.EventTime}`,\n            `${event.Name}`,\n        ];\n\n        for (const prop in event) {\n            if (prop && event.hasOwnProperty(prop) &&\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\n                prop !== \"eventId\" && prop !== \"name\" &&\n                prop !== \"constructor\") {\n                const value = event[prop];\n                let valueToLog = \"<NULL>\";\n                if (value !== undefined && value !== null) {\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\n                        valueToLog = value.toString();\n                    } else {\n                        valueToLog = JSON.stringify(value);\n                    }\n                }\n\n                logFragments.push(`${prop}: ${valueToLog}`);\n            }\n\n        }\n\n        return logFragments.join(\" | \");\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/ConsoleLoggingListener.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class AudioSourceEvent extends PlatformEvent {\n    private privAudioSourceId: string;\n\n    constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n        this.privAudioSourceId = audioSourceId;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceReadyEvent\", audioSourceId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceOffEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceOffEvent\", audioSourceId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\n    private privError: string;\n\n    constructor(audioSourceId: string, error: string) {\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\n        this.privError = error;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\n    private privAudioNodeId: string;\n\n    constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\n        super(eventName, audioSourceId);\n        this.privAudioNodeId = audioNodeId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\n    private privError: string;\n\n    constructor(audioSourceId: string, audioNodeId: string, error: string) {\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\n        this.privError = error;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/AudioSourceEvents.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ConnectionMessage } from \"./ConnectionMessage\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class ConnectionEvent extends PlatformEvent {\n    private privConnectionId: string;\n\n    constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n        this.privConnectionId = connectionId;\n    }\n\n    public get connectionId(): string {\n        return this.privConnectionId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionStartEvent extends ConnectionEvent {\n    private privUri: string;\n    private privHeaders: IStringDictionary<string>;\n\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\n        super(\"ConnectionStartEvent\", connectionId);\n        this.privUri = uri;\n        this.privHeaders = headers;\n    }\n\n    public get uri(): string {\n        return this.privUri;\n    }\n\n    public get headers(): IStringDictionary<string> {\n        return this.privHeaders;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\n        super(\"ConnectionEstablishedEvent\", connectionId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionClosedEvent extends ConnectionEvent {\n    private privRreason: string;\n    private privStatusCode: number;\n\n    constructor(connectionId: string, statusCode: number, reason: string) {\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\n        this.privRreason = reason;\n        this.privStatusCode = statusCode;\n    }\n\n    public get reason(): string {\n        return this.privRreason;\n    }\n\n    public get statusCode(): number {\n        return this.privStatusCode;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\n    private privStatusCode: number;\n    private privReason: string;\n\n    constructor(connectionId: string, statuscode: number, reason: string) {\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\n        this.privStatusCode = statuscode;\n        this.privReason = reason;\n    }\n\n    public get reason(): string {\n        return this.privReason;\n    }\n\n    public get statusCode(): number {\n        return this.privStatusCode;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\n    private privNetworkReceivedTime: string;\n    private privMessage: ConnectionMessage;\n\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\n        this.privMessage = message;\n    }\n\n    public get networkReceivedTime(): string {\n        return this.privNetworkReceivedTime;\n    }\n\n    public get message(): ConnectionMessage {\n        return this.privMessage;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\n    private privNetworkSentTime: string;\n    private privMessage: ConnectionMessage;\n\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageSentEvent\", connectionId);\n        this.privNetworkSentTime = networkSentTimeISO;\n        this.privMessage = message;\n    }\n\n    public get networkSentTime(): string {\n        return this.privNetworkSentTime;\n    }\n\n    public get message(): ConnectionMessage {\n        return this.privMessage;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/ConnectionEvents.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport class ConnectionOpenResponse {\n    private privStatusCode: number;\n    private privReason: string;\n\n    constructor(statusCode: number, reason: string) {\n        this.privStatusCode = statusCode;\n        this.privReason = reason;\n    }\n\n    public get statusCode(): number {\n        return this.privStatusCode;\n    }\n\n    public get reason(): string {\n        return this.privReason;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/ConnectionOpenResponse.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError } from \"./Error\";\nimport { EventSource } from \"./EventSource\";\nimport { IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class Events {\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\n\n    public static setEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\n        if (!eventSource) {\n            throw new ArgumentNullError(\"eventSource\");\n        }\n\n        Events.privInstance = eventSource;\n    }\n\n    public static get instance(): IEventSource<PlatformEvent> {\n        return Events.privInstance;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/Events.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ConnectionEvent } from \"./ConnectionEvents\";\nimport { ConnectionMessage } from \"./ConnectionMessage\";\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\nimport { EventSource } from \"./EventSource\";\nimport { IDisposable } from \"./IDisposable\";\nimport { Promise } from \"./Promise\";\n\nexport enum ConnectionState {\n    None,\n    Connected,\n    Connecting,\n    Disconnected,\n}\n\nexport interface IConnection extends IDisposable {\n    id: string;\n    state(): ConnectionState;\n    open(): Promise<ConnectionOpenResponse>;\n    send(message: ConnectionMessage): Promise<boolean>;\n    read(): Promise<ConnectionMessage>;\n    events: EventSource<ConnectionEvent>;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/IConnection.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { MessageType } from \"./ConnectionMessage\";\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\n\nexport class RawWebsocketMessage {\n    private privMessageType: MessageType;\n    private privPayload: any = null;\n    private privId: string;\n\n    public constructor(messageType: MessageType, payload: any, id?: string) {\n        if (!payload) {\n            throw new ArgumentNullError(\"payload\");\n        }\n\n        if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n        }\n\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\n            throw new InvalidOperationError(\"Payload must be a string\");\n        }\n\n        this.privMessageType = messageType;\n        this.privPayload = payload;\n        this.privId = id ? id : createNoDashGuid();\n    }\n\n    public get messageType(): MessageType {\n        return this.privMessageType;\n    }\n\n    public get payload(): any {\n        return this.privPayload;\n    }\n\n    public get textContent(): string {\n        if (this.privMessageType === MessageType.Binary) {\n            throw new InvalidOperationError(\"Not supported for binary message\");\n        }\n\n        return this.privPayload as string;\n    }\n\n    public get binaryContent(): ArrayBuffer {\n        if (this.privMessageType === MessageType.Text) {\n            throw new InvalidOperationError(\"Not supported for text message\");\n        }\n\n        return this.privPayload;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/RawWebsocketMessage.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport class RiffPcmEncoder {\n\n    private privActualSampleRate: number;\n    private privDesiredSampleRate: number;\n    private privChannelCount: number = 1;\n\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\n        this.privActualSampleRate = actualSampleRate;\n        this.privDesiredSampleRate = desiredSampleRate;\n    }\n\n    public encode = (\n        needHeader: boolean,\n        actualAudioFrame: Float32Array): ArrayBuffer => {\n\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\n\n        if (!audioFrame) {\n            return null;\n        }\n\n        const audioLength = audioFrame.length * 2;\n\n        if (!needHeader) {\n            const buffer = new ArrayBuffer(audioLength);\n            const view = new DataView(buffer);\n            this.floatTo16BitPCM(view, 0, audioFrame);\n\n            return buffer;\n        }\n\n        const buffer = new ArrayBuffer(44 + audioLength);\n\n        const bitsPerSample = 16;\n        const bytesPerSample = bitsPerSample / 8;\n        // We dont know ahead of time about the length of audio to stream. So set to 0.\n        const fileLength = 0;\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n        const view = new DataView(buffer);\n\n        /* RIFF identifier */\n        this.setString(view, 0, \"RIFF\");\n        /* file length */\n        view.setUint32(4, fileLength, true);\n        /* RIFF type & Format */\n        this.setString(view, 8, \"WAVEfmt \");\n        /* format chunk length */\n        view.setUint32(16, 16, true);\n        /* sample format (raw) */\n        view.setUint16(20, 1, true);\n        /* channel count */\n        view.setUint16(22, this.privChannelCount, true);\n        /* sample rate */\n        view.setUint32(24, this.privDesiredSampleRate, true);\n        /* byte rate (sample rate * block align) */\n        view.setUint32(28, this.privDesiredSampleRate * this.privChannelCount * bytesPerSample, true);\n        /* block align (channel count * bytes per sample) */\n        view.setUint16(32, this.privChannelCount * bytesPerSample, true);\n        /* bits per sample */\n        view.setUint16(34, bitsPerSample, true);\n        /* data chunk identifier */\n        this.setString(view, 36, \"data\");\n        /* data chunk length */\n        view.setUint32(40, fileLength, true);\n\n        this.floatTo16BitPCM(view, 44, audioFrame);\n\n        return buffer;\n    }\n\n    private setString = (view: DataView, offset: number, str: string): void => {\n        for (let i = 0; i < str.length; i++) {\n            view.setUint8(offset + i, str.charCodeAt(i));\n        }\n    }\n\n    private floatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\n        for (let i = 0; i < input.length; i++ , offset += 2) {\n            const s = Math.max(-1, Math.min(1, input[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n\n    private downSampleAudioFrame = (\n        srcFrame: Float32Array,\n        srcRate: number,\n        dstRate: number): Float32Array => {\n\n        if (dstRate === srcRate || dstRate > srcRate) {\n            return srcFrame;\n        }\n\n        const ratio = srcRate / dstRate;\n        const dstLength = Math.round(srcFrame.length / ratio);\n        const dstFrame = new Float32Array(dstLength);\n        let srcOffset = 0;\n        let dstOffset = 0;\n        while (dstOffset < dstLength) {\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\n            let accum = 0;\n            let count = 0;\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\n                accum += srcFrame[srcOffset++];\n                count++;\n            }\n            dstFrame[dstOffset++] = accum / count;\n        }\n\n        return dstFrame;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/RiffPcmEncoder.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError } from \"./Error\";\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\nimport { InMemoryStorage } from \"./InMemoryStorage\";\n\nexport class Storage {\n    private static privSessionStorage: IKeyValueStorage = new InMemoryStorage();\n    private static privLocalStorage: IKeyValueStorage = new InMemoryStorage();\n\n    public static setSessionStorage = (sessionStorage: IKeyValueStorage): void => {\n        if (!sessionStorage) {\n            throw new ArgumentNullError(\"sessionStorage\");\n        }\n\n        Storage.privSessionStorage = sessionStorage;\n    }\n\n    public static setLocalStorage = (localStorage: IKeyValueStorage): void => {\n        if (!localStorage) {\n            throw new ArgumentNullError(\"localStorage\");\n        }\n\n        Storage.privLocalStorage = localStorage;\n    }\n\n    public static get session(): IKeyValueStorage {\n        return Storage.privSessionStorage;\n    }\n\n    public static get local(): IKeyValueStorage {\n        return Storage.privLocalStorage;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/Storage.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { Promise } from \"./Promise\";\nimport { Queue } from \"./Queue\";\nimport { IStreamChunk } from \"./Stream\";\n\nexport interface IStreamChunk<TBuffer> {\n    isEnd: boolean;\n    buffer: TBuffer;\n}\n\nexport class Stream<TBuffer> {\n    private privId: string;\n    private privReaderIdCounter: number = 1;\n    private privStreambuffer: Array<IStreamChunk<TBuffer>>;\n    private privIsEnded: boolean = false;\n    private privReaderQueues: IStringDictionary<Queue<IStreamChunk<TBuffer>>>;\n\n    public constructor(streamId?: string) {\n        this.privId = streamId ? streamId : createNoDashGuid();\n        this.privStreambuffer = [];\n        this.privReaderQueues = {};\n    }\n\n    public get isClosed(): boolean {\n        return this.privIsEnded;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n\n    public write = (buffer2: TBuffer): void => {\n        this.throwIfClosed();\n        this.writeStreamChunk({\n            buffer: buffer2,\n            isEnd: false,\n        });\n    }\n\n    public getReader = (): StreamReader<TBuffer> => {\n        const readerId = this.privReaderIdCounter;\n        this.privReaderIdCounter++;\n        const readerQueue = new Queue<IStreamChunk<TBuffer>>();\n        const currentLength = this.privStreambuffer.length;\n        this.privReaderQueues[readerId] = readerQueue;\n        for (let i = 0; i < currentLength; i++) {\n            readerQueue.enqueue(this.privStreambuffer[i]);\n        }\n        return new StreamReader(\n            this.privId,\n            readerQueue,\n            () => {\n                delete this.privReaderQueues[readerId];\n            });\n    }\n\n    public close = (): void => {\n        if (!this.privIsEnded) {\n            this.writeStreamChunk({\n                buffer: null,\n                isEnd: true,\n            });\n            this.privIsEnded = true;\n        }\n    }\n\n    private writeStreamChunk = (streamChunk: IStreamChunk<TBuffer>): void => {\n        this.throwIfClosed();\n        this.privStreambuffer.push(streamChunk);\n        for (const readerId in this.privReaderQueues) {\n            if (!this.privReaderQueues[readerId].isDisposed()) {\n                try {\n                    this.privReaderQueues[readerId].enqueue(streamChunk);\n                } catch (e) {\n                    // Do nothing\n                }\n            }\n        }\n    }\n\n    private throwIfClosed = (): void => {\n        if (this.privIsEnded) {\n            throw new InvalidOperationError(\"Stream closed\");\n        }\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class StreamReader<TBuffer> {\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\n    private privOnClose: () => void;\n    private privIsClosed: boolean = false;\n    private privStreamId: string;\n\n    public constructor(streamId: string, readerQueue: Queue<IStreamChunk<TBuffer>>, onClose: () => void) {\n        this.privReaderQueue = readerQueue;\n        this.privOnClose = onClose;\n        this.privStreamId = streamId;\n    }\n\n    public get isClosed(): boolean {\n        return this.privIsClosed;\n    }\n\n    public get streamId(): string {\n        return this.privStreamId;\n    }\n\n    public read = (): Promise<IStreamChunk<TBuffer>> => {\n        if (this.isClosed) {\n            throw new InvalidOperationError(\"StreamReader closed\");\n        }\n\n        return this.privReaderQueue\n            .dequeue()\n            .onSuccessContinueWith((streamChunk: IStreamChunk<TBuffer>) => {\n                if (streamChunk.isEnd) {\n                    this.privReaderQueue.dispose(\"End of stream reached\");\n                }\n\n                return streamChunk;\n            });\n    }\n\n    public close = (): void => {\n        if (!this.privIsClosed) {\n            this.privIsClosed = true;\n            this.privReaderQueue.dispose(\"StreamReader closed\");\n            this.privOnClose();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common/Stream.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\n\nexport class LocalStorage implements IKeyValueStorage {\n\n    public get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return localStorage.getItem(key);\n    }\n\n    public getOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        const value = localStorage.getItem(key);\n        if (value === null || value === undefined) {\n            localStorage.setItem(key, valueToAdd);\n        }\n\n        return localStorage.getItem(key);\n    }\n\n    public set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        localStorage.setItem(key, value);\n    }\n\n    public remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        localStorage.removeItem(key);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/LocalStorage.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\nimport {\n    AudioSourceErrorEvent,\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceOffEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    createNoDashGuid,\n    Deferred,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStringDictionary,\n    Promise,\n    PromiseHelper,\n    Stream,\n    StreamReader,\n} from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\n// Extending the default definition with browser specific definitions for backward compatibility\ninterface INavigatorUserMedia extends NavigatorUserMedia {\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n}\n\nexport class MicAudioSource implements IAudioSource {\n\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\n\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\n\n    private privId: string;\n\n    private privEvents: EventSource<AudioSourceEvent>;\n\n    private privInitializeDeferral: Deferred<boolean>;\n\n    private privMediaStream: MediaStream;\n\n    private privContext: AudioContext;\n\n    private readonly privConstraints: MediaStreamConstraints;\n\n    public constructor(private readonly privRecorder: IRecorder, constraints?: MediaStreamConstraints, audioSourceId?: string) {\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privConstraints = constraints || { audio: true, video: false };\n    }\n\n    public get format(): AudioStreamFormat {\n        return MicAudioSource.AUDIOFORMAT;\n    }\n\n    public turnOn = (): Promise<boolean> => {\n        if (this.privInitializeDeferral) {\n            return this.privInitializeDeferral.promise();\n        }\n\n        this.privInitializeDeferral = new Deferred<boolean>();\n\n        this.createAudioContext();\n\n        const nav = window.navigator as INavigatorUserMedia;\n\n        let getUserMedia = (\n            nav.getUserMedia ||\n            nav.webkitGetUserMedia ||\n            nav.mozGetUserMedia ||\n            nav.msGetUserMedia\n        );\n\n        if (!!nav.mediaDevices) {\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\n                nav.mediaDevices\n                    .getUserMedia(constraints)\n                    .then(successCallback)\n                    .catch(errorCallback);\n            };\n        }\n\n        if (!getUserMedia) {\n            const errorMsg = \"Browser does not support getUserMedia.\";\n            this.privInitializeDeferral.reject(errorMsg);\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\n        } else {\n            const next = () => {\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n                getUserMedia(\n                    this.privConstraints,\n                    (mediaStream: MediaStream) => {\n                        this.privMediaStream = mediaStream;\n                        this.onEvent(new AudioSourceReadyEvent(this.privId));\n                        this.privInitializeDeferral.resolve(true);\n                    }, (error: MediaStreamError) => {\n                        const errorMsg = `Error occurred during microphone initialization: ${error}`;\n                        const tmp = this.privInitializeDeferral;\n                        // HACK: this should be handled through onError callbacks of all promises up the stack.\n                        // Unfortunately, the current implementation does not provide an easy way to reject promises\n                        // without a lot of code replication.\n                        // TODO: fix promise implementation, allow for a graceful reject chaining.\n                        this.privInitializeDeferral = null;\n                        tmp.reject(errorMsg); // this will bubble up through the whole chain of promises,\n                        // with each new level adding extra \"Unhandled callback error\" prefix to the error message.\n                        // The following line is not guaranteed to be executed.\n                        this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\n                    });\n            };\n\n            if (this.privContext.state === \"suspended\") {\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\n                // https://github.com/WebAudio/web-audio-api/issues/790\n                this.privContext.resume().then(next, (reason: any) => {\n                    this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);\n                });\n            } else {\n                next();\n            }\n        }\n\n        return this.privInitializeDeferral.promise();\n    }\n\n    public id = (): string => {\n        return this.privId;\n    }\n\n    public attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        return this.listen(audioNodeId).onSuccessContinueWith<IAudioStreamNode>(\n            (streamReader: StreamReader<ArrayBuffer>) => {\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n                return {\n                    detach: () => {\n                        streamReader.close();\n                        delete this.privStreams[audioNodeId];\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                        this.turnOff();\n                    },\n                    id: () => {\n                        return audioNodeId;\n                    },\n                    read: () => {\n                        return streamReader.read();\n                    },\n                };\n            });\n    }\n\n    public detach = (audioNodeId: string): void => {\n        if (audioNodeId && this.privStreams[audioNodeId]) {\n            this.privStreams[audioNodeId].close();\n            delete this.privStreams[audioNodeId];\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n        }\n    }\n\n    public turnOff = (): Promise<boolean> => {\n        for (const streamId in this.privStreams) {\n            if (streamId) {\n                const stream = this.privStreams[streamId];\n                if (stream) {\n                    stream.close();\n                }\n            }\n        }\n\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\n        this.privInitializeDeferral = null;\n\n        this.destroyAudioContext();\n\n        return PromiseHelper.fromResult(true);\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    private listen = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\n        return this.turnOn()\n            .onSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\n                this.privStreams[audioNodeId] = stream;\n\n                try {\n                    this.privRecorder.record(this.privContext, this.privMediaStream, stream);\n                } catch (error) {\n                    this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error));\n                    throw error;\n                }\n\n                return stream.getReader();\n            });\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private createAudioContext = (): void => {\n        if (!!this.privContext) {\n            return;\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\n        const AudioContext = ((window as any).AudioContext)\n            || ((window as any).webkitAudioContext)\n            || false;\n\n        if (!AudioContext) {\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\n        }\n\n        this.privContext = new AudioContext();\n    }\n\n    private destroyAudioContext = (): void => {\n        if (!this.privContext) {\n            return;\n        }\n\n        this.privRecorder.releaseMediaResources(this.privContext);\n\n        // This pattern brought to you by a bug in the TypeScript compiler where it\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\n        // https://github.com/Microsoft/TypeScript/issues/11498\n        let hasClose: boolean = false;\n        if (\"close\" in this.privContext) {\n            hasClose = true;\n        }\n\n        if (hasClose) {\n            this.privContext.close();\n            this.privContext = null;\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\n            // Suspend actually takes a callback, but analogous to the\n            // resume method, it'll be only fired if suspend is called\n            // in a direct response to a user action. The later is not always\n            // the case, as TurnOff is also called, when we receive an\n            // end-of-speech message from the service. So, doing a best effort\n            // fire-and-forget here.\n            this.privContext.suspend();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/MicAudioSource.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\nimport {\n    AudioSourceErrorEvent,\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceOffEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    createNoDashGuid,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStringDictionary,\n    Promise,\n    PromiseHelper,\n    Stream,\n    StreamReader,\n} from \"../common/Exports\";\n\nexport class FileAudioSource implements IAudioSource {\n\n    // Recommended sample rate (bytes/second).\n    private static readonly SAMPLE_RATE: number = 16000 * 2; // 16 kHz * 16 bits\n\n    // We should stream audio at no faster than 2x real-time (i.e., send five chunks\n    // per second, with the chunk size == sample rate in bytes per second * 2 / 5).\n    private static readonly CHUNK_SIZE: number = FileAudioSource.SAMPLE_RATE * 2 / 5;\n\n    private static readonly UPLOAD_INTERVAL: number = 200; // milliseconds\n\n    // 10 seconds of audio in bytes =\n    // sample rate (bytes/second) * 600 (seconds) + 44 (size of the wave header).\n    private static readonly MAX_SIZE: number = FileAudioSource.SAMPLE_RATE * 600 + 44;\n\n    private static readonly FILEFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getWaveFormatPCM(16000, 16, 1) as AudioStreamFormatImpl;\n\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\n\n    private privId: string;\n\n    private privEvents: EventSource<AudioSourceEvent>;\n\n    private privFile: File;\n\n    public constructor(file: File, audioSourceId?: string) {\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privFile = file;\n    }\n\n    public get format(): AudioStreamFormat {\n        return FileAudioSource.FILEFORMAT;\n    }\n\n    public turnOn = (): Promise<boolean> => {\n        if (typeof FileReader === \"undefined\") {\n            const errorMsg = \"Browser does not support FileReader.\";\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // initialization error - no streamid at this point\n            return PromiseHelper.fromError<boolean>(errorMsg);\n        } else if (this.privFile.name.lastIndexOf(\".wav\") !== this.privFile.name.length - 4) {\n            const errorMsg = this.privFile.name + \" is not supported. Only WAVE files are allowed at the moment.\";\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\n            return PromiseHelper.fromError<boolean>(errorMsg);\n        } else if (this.privFile.size > FileAudioSource.MAX_SIZE) {\n            const errorMsg = this.privFile.name + \" exceeds the maximum allowed file size (\" + FileAudioSource.MAX_SIZE + \").\";\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\n            return PromiseHelper.fromError<boolean>(errorMsg);\n        }\n\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return PromiseHelper.fromResult(true);\n    }\n\n    public id = (): string => {\n        return this.privId;\n    }\n\n    public attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        return this.upload(audioNodeId).onSuccessContinueWith<IAudioStreamNode>(\n            (streamReader: StreamReader<ArrayBuffer>) => {\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n                return {\n                    detach: () => {\n                        streamReader.close();\n                        delete this.privStreams[audioNodeId];\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                        this.turnOff();\n                    },\n                    id: () => {\n                        return audioNodeId;\n                    },\n                    read: () => {\n                        return streamReader.read();\n                    },\n                };\n            });\n    }\n\n    public detach = (audioNodeId: string): void => {\n        if (audioNodeId && this.privStreams[audioNodeId]) {\n            this.privStreams[audioNodeId].close();\n            delete this.privStreams[audioNodeId];\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n        }\n    }\n\n    public turnOff = (): Promise<boolean> => {\n        for (const streamId in this.privStreams) {\n            if (streamId) {\n                const stream = this.privStreams[streamId];\n                if (stream && !stream.isClosed) {\n                    stream.close();\n                }\n            }\n        }\n\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\n        return PromiseHelper.fromResult(true);\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    private upload = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\n        return this.turnOn()\n            .onSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\n\n                this.privStreams[audioNodeId] = stream;\n\n                const reader: FileReader = new FileReader();\n\n                let startOffset = 0;\n                let endOffset = FileAudioSource.CHUNK_SIZE;\n\n                const processNextChunk = (event: Event): void => {\n                    if (stream.isClosed) {\n                        return; // output stream was closed (somebody called TurnOff). We're done here.\n                    }\n\n                    stream.write(reader.result as ArrayBuffer);\n\n                    if (endOffset < this.privFile.size) {\n                        startOffset = endOffset;\n                        endOffset = Math.min(endOffset + FileAudioSource.CHUNK_SIZE, this.privFile.size);\n                        const chunk = this.privFile.slice(startOffset, endOffset);\n                        reader.readAsArrayBuffer(chunk);\n                    } else {\n                        // we've written the entire file to the output stream, can close it now.\n                        stream.close();\n                    }\n                };\n\n                reader.onload = processNextChunk;\n\n                reader.onerror = (event: ProgressEvent) => {\n                    const errorMsg = `Error occurred while processing '${this.privFile.name}'. ${event}`;\n                    this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\n                    throw new Error(errorMsg);\n                };\n\n                const chunk = this.privFile.slice(startOffset, endOffset);\n                reader.readAsArrayBuffer(chunk);\n\n                return stream.getReader();\n            });\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/FileAudioSource.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Stream } from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\n// getting around the build error for MediaRecorder as Typescript does not have a definition for this one.\ndeclare var MediaRecorder: any;\n\nexport class OpusRecorder implements IRecorder {\n    private privMediaResources: IMediaResources;\n    private privMediaRecorderOptions: any;\n\n    constructor(options?: { mimeType: string, bitsPerSecond: number }) {\n        this.privMediaRecorderOptions = options;\n    }\n\n    public record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\n        const mediaRecorder: any = new MediaRecorder(mediaStream, this.privMediaRecorderOptions);\n        const timeslice = 100; // this is in ms - 100 ensures that the chunk doesn't exceed the max size of chunk allowed in WS connection\n        mediaRecorder.ondataavailable = (dataAvailableEvent: any) => {\n            if (outputStream) {\n                const reader = new FileReader();\n                reader.readAsArrayBuffer(dataAvailableEvent.data);\n                reader.onloadend = (event: ProgressEvent) => {\n                    outputStream.write(reader.result as ArrayBuffer);\n                };\n            }\n        };\n\n        this.privMediaResources = {\n            recorder: mediaRecorder,\n            stream: mediaStream,\n        };\n        mediaRecorder.start(timeslice);\n    }\n\n    public releaseMediaResources = (context: AudioContext): void => {\n        if (this.privMediaResources.recorder.state !== \"inactive\") {\n            this.privMediaResources.recorder.stop();\n        }\n        this.privMediaResources.stream.getTracks().forEach((track: any) => track.stop());\n    }\n}\n\ninterface IMediaResources {\n    stream: MediaStream;\n    recorder: any;\n}\n\n/* Declaring this inline to avoid compiler warnings\ndeclare class MediaRecorder {\n    constructor(mediaStream: MediaStream, options: any);\n\n    public state: string;\n\n    public ondataavailable(dataAvailableEvent: any): void;\n    public stop(): void;\n}*/\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/OpusRecorder.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\nexport class PcmRecorder implements IRecorder {\n    private privMediaResources: IMediaResources;\n\n    public record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\n        const desiredSampleRate = 16000;\n\n        const scriptNode = (() => {\n            let bufferSize = 0;\n            try {\n                return context.createScriptProcessor(bufferSize, 1, 1);\n            } catch (error) {\n                // Webkit (<= version 31) requires a valid bufferSize.\n                bufferSize = 2048;\n                let audioSampleRate = context.sampleRate;\n                while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\n                    bufferSize <<= 1 ;\n                    audioSampleRate >>= 1;\n                }\n                return context.createScriptProcessor(bufferSize, 1, 1);\n            }\n        })();\n\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\n        let needHeader: boolean = true;\n        const that = this;\n        scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\n            const inputFrame = event.inputBuffer.getChannelData(0);\n\n            if (outputStream && !outputStream.isClosed) {\n                const waveFrame = waveStreamEncoder.encode(needHeader, inputFrame);\n                if (!!waveFrame) {\n                    outputStream.write(waveFrame);\n                    needHeader = false;\n                }\n            }\n        };\n\n        const micInput = context.createMediaStreamSource(mediaStream);\n\n        this.privMediaResources = {\n            scriptProcessorNode: scriptNode,\n            source: micInput,\n            stream: mediaStream,\n        };\n\n        micInput.connect(scriptNode);\n        scriptNode.connect(context.destination);\n    }\n\n    public releaseMediaResources = (context: AudioContext): void => {\n        if (this.privMediaResources) {\n            if (this.privMediaResources.scriptProcessorNode) {\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\n                this.privMediaResources.scriptProcessorNode = null;\n            }\n            if (this.privMediaResources.source) {\n                this.privMediaResources.source.disconnect();\n                this.privMediaResources.stream.getTracks().forEach((track: any) => track.stop());\n                this.privMediaResources.source = null;\n            }\n        }\n    }\n}\n\ninterface IMediaResources {\n    source: MediaStreamAudioSourceNode;\n    scriptProcessorNode: ScriptProcessorNode;\n    stream: MediaStream;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/PCMRecorder.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\n\nexport class SessionStorage implements IKeyValueStorage {\n\n    public get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return sessionStorage.getItem(key);\n    }\n\n    public getOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        const value = sessionStorage.getItem(key);\n        if (value === null || value === undefined) {\n            sessionStorage.setItem(key, valueToAdd);\n        }\n\n        return sessionStorage.getItem(key);\n    }\n\n    public set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        sessionStorage.setItem(key, value);\n    }\n\n    public remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        sessionStorage.removeItem(key);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/SessionStorage.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ArgumentNullError,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionOpenResponse,\n    ConnectionState,\n    createNoDashGuid,\n    EventSource,\n    IConnection,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n    Promise,\n} from \"../common/Exports\";\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\n\nexport class WebsocketConnection implements IConnection {\n\n    private privUri: string;\n    private privMessageFormatter: IWebsocketMessageFormatter;\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\n    private privId: string;\n    private privIsDisposed: boolean = false;\n\n    public constructor(\n        uri: string,\n        queryParameters: IStringDictionary<string>,\n        headers: IStringDictionary<string>,\n        messageFormatter: IWebsocketMessageFormatter,\n        connectionId?: string) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.privMessageFormatter = messageFormatter;\n\n        let queryParams = \"\";\n        let i = 0;\n\n        if (queryParameters) {\n            for (const paramName in queryParameters) {\n                if (paramName) {\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\n                    const val = encodeURIComponent(queryParameters[paramName]);\n                    queryParams += `${paramName}=${val}`;\n                    i++;\n                }\n            }\n        }\n\n        if (headers) {\n            for (const headerName in headers) {\n                if (headerName) {\n                    queryParams += i === 0 ? \"?\" : \"&\";\n                    const val = encodeURIComponent(headers[headerName]);\n                    queryParams += `${headerName}=${val}`;\n                    i++;\n                }\n            }\n        }\n\n        this.privUri = uri + queryParams;\n        this.privId = connectionId ? connectionId : createNoDashGuid();\n\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\n            this.privUri,\n            this.id,\n            this.privMessageFormatter);\n    }\n\n    public dispose = (): void => {\n        this.privIsDisposed = true;\n\n        if (this.privConnectionMessageAdapter) {\n            this.privConnectionMessageAdapter.close();\n        }\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privIsDisposed;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n\n    public state = (): ConnectionState => {\n        return this.privConnectionMessageAdapter.state;\n    }\n\n    public open = (): Promise<ConnectionOpenResponse> => {\n        return this.privConnectionMessageAdapter.open();\n    }\n\n    public send = (message: ConnectionMessage): Promise<boolean> => {\n        return this.privConnectionMessageAdapter.send(message);\n    }\n\n    public read = (): Promise<ConnectionMessage> => {\n        return this.privConnectionMessageAdapter.read();\n    }\n\n    public get events(): EventSource<ConnectionEvent> {\n        return this.privConnectionMessageAdapter.events;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/WebsocketConnection.ts","'use strict';\n\nmodule.exports = function() {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ws/browser.js\n// module id = 40\n// module chunks = 0","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\nimport {\n    IAudioStreamNode,\n    IStreamChunk,\n    Promise,\n    PromiseHelper,\n} from \"../common/Exports\";\n\nexport class ReplayableAudioNode implements IAudioStreamNode {\n    private privAudioNode: IAudioStreamNode;\n    private privFormat: AudioStreamFormatImpl;\n    private privBuffers: BufferEntry[] = [];\n    private privReplayOffset: number = 0;\n    private privLastShrinkOffset: number = 0;\n    private privBufferStartOffset: number = 0;\n    private privBufferSerial: number = 0;\n    private privBufferedBytes: number = 0;\n    private privReplay: boolean = false;\n\n    public constructor(audioSource: IAudioStreamNode, format: AudioStreamFormatImpl) {\n        this.privAudioNode = audioSource;\n        this.privFormat = format;\n    }\n\n    public id = (): string => {\n        return this.privAudioNode.id();\n    }\n\n    // Reads and returns the next chunk of audio buffer.\n    // If replay of existing buffers are needed, read() will first seek and replay\n    // existing content, and upoin completion it will read new content from the underlying\n    // audio node, saving that content into the replayable buffers.\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\n        // if there is a replay request to honor.\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\n            // Find the start point in the buffers.\n            // Offsets are in 100ns increments.\n            // So how many bytes do we need to seek to get the right offset?\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\n\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privFormat.avgBytesPerSec * 1e-7);\n            if (0 !== (bytesToSeek % 2)) {\n                bytesToSeek++;\n            }\n\n            let i: number = 0;\n\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].buffer.byteLength) {\n                bytesToSeek -= this.privBuffers[i++].buffer.byteLength;\n            }\n\n            const retVal: ArrayBuffer = this.privBuffers[i].buffer.slice(bytesToSeek);\n\n            this.privReplayOffset += (retVal.byteLength / this.privFormat.avgBytesPerSec) * 1e+7;\n\n            // If we've reached the end of the buffers, stop replaying.\n            if (i === this.privBuffers.length - 1) {\n                this.privReplay = false;\n            }\n\n            return PromiseHelper.fromResult<IStreamChunk<ArrayBuffer>>({\n                buffer: retVal,\n                isEnd: false,\n            });\n        }\n\n        return this.privAudioNode.read()\n            .onSuccessContinueWith((result: IStreamChunk<ArrayBuffer>) => {\n                if (result.buffer) {\n\n                    this.privBuffers.push(new BufferEntry(result.buffer, this.privBufferSerial++, this.privBufferedBytes));\n                    this.privBufferedBytes += result.buffer.byteLength;\n                }\n                return result;\n            });\n    }\n\n    public detach(): void {\n        this.privAudioNode.detach();\n        this.privBuffers = undefined;\n    }\n\n    public replay(): void {\n        if (0 !== this.privBuffers.length) {\n            this.privReplay = true;\n            this.privReplayOffset = this.privLastShrinkOffset;\n        }\n    }\n\n    // Shrinks the existing audio buffers to start at the new offset, or at the\n    // beginnign of the buffer closest to the requested offset.\n    // A replay request will start from the last shrink point.\n    public shrinkBuffers(offset: number): void {\n        this.privLastShrinkOffset = offset;\n\n        // Find the start point in the buffers.\n        // Offsets are in 100ns increments.\n        // So how many bytes do we need to seek to get the right offset?\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\n\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privFormat.avgBytesPerSec * 1e-7);\n\n        let i: number = 0;\n\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].buffer.byteLength) {\n            bytesToSeek -= this.privBuffers[i++].buffer.byteLength;\n        }\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privFormat.avgBytesPerSec) * 1e+7));\n\n        this.privBuffers = this.privBuffers.slice(i);\n    }\n}\n\n// Primary use of this class is to help debugging problems with the replay\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\n// the ArrayBuffer directly.\n// tslint:disable-next-line:max-classes-per-file\nclass BufferEntry {\n    public buffer: ArrayBuffer;\n    public serial: number;\n    public byteOffset: number;\n\n    public constructor(buffer: ArrayBuffer, serial: number, byteOffset: number) {\n        this.buffer = buffer;\n        this.serial = serial;\n        this.byteOffset = byteOffset;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.browser/ReplayableAudioNode.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AudioStreamFormat } from \"../../../src/sdk/Exports\";\nimport { FileAudioSource, MicAudioSource, PcmRecorder } from \"../../common.browser/Exports\";\nimport { AudioSourceEvent, EventSource, IAudioSource, IAudioStreamNode, Promise } from \"../../common/Exports\";\nimport { AudioInputStream, PullAudioInputStreamCallback } from \"../Exports\";\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\n\n/**\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\n * @class AudioConfig\n */\nexport abstract class AudioConfig {\n    /**\n     * Creates an AudioConfig object representing the default microphone on the system.\n     * @member AudioConfig.fromDefaultMicrophoneInput\n     * @function\n     * @public\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromDefaultMicrophoneInput(): AudioConfig {\n        const pcmRecorder = new PcmRecorder();\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\n    }\n\n    /**\n     * Creates an AudioConfig object representing a microphone on the system based on the specified constraints.\n     * @member AudioConfig.fromMicrophoneInput\n     * @function\n     * @public\n     * @param {MediaStreamConstraints} constraints A MediaStreamConstraints object specifying the requirements for microphone media device.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromMicrophoneInput(constraints?: MediaStreamConstraints): AudioConfig {\n        const pcmRecorder = new PcmRecorder();\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, constraints));\n    }\n\n    /**\n     * Creates an AudioConfig object representing the specified file.\n     * @member AudioConfig.fromWavFileInput\n     * @function\n     * @public\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM with 16-bit\n     *        samples, 16 kHz sample rate, and a single channel (Mono) is supported.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromWavFileInput(file: File): AudioConfig {\n        return new AudioConfigImpl(new FileAudioSource(file));\n    }\n\n    /**\n     * Creates an AudioConfig object representing the specified stream.\n     * @member AudioConfig.fromStreamInput\n     * @function\n     * @public\n     * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input\n     *        stream. Currently, only WAV / PCM with 16-bit samples, 16 kHz sample rate, and a single channel\n     *        (Mono) is supported.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback): AudioConfig {\n        if (audioStream instanceof PullAudioInputStreamCallback) {\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\n        }\n\n        if (audioStream instanceof AudioInputStream) {\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\n        }\n\n        throw new Error(\"Not Supported Type\");\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioConfig.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class AudioConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\n    private privSource: IAudioSource;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {IAudioSource} source - An audio source.\n     */\n    public constructor(source: IAudioSource) {\n        super();\n        this.privSource = source;\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): AudioStreamFormat {\n        return this.privSource.format;\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privSource.turnOff();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.id\n     * @function\n     * @public\n     */\n    public id(): string {\n        return this.privSource.id();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.turnOn\n     * @function\n     * @public\n     * @returns {Promise<boolean>} A promise.\n     */\n    public turnOn(): Promise<boolean> {\n        return this.privSource.turnOn();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.attach\n     * @function\n     * @public\n     * @param {string} audioNodeId - The audio node id.\n     * @returns {Promise<IAudioStreamNode>} A promise.\n     */\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        return this.privSource.attach(audioNodeId);\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.detach\n     * @function\n     * @public\n     * @param {string} audioNodeId - The audio node id.\n     */\n    public detach(audioNodeId: string): void {\n        return this.detach(audioNodeId);\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.turnOff\n     * @function\n     * @public\n     * @returns {Promise<boolean>} A promise.\n     */\n    public turnOff(): Promise<boolean> {\n        return this.privSource.turnOff();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.events\n     * @function\n     * @public\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\n     */\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privSource.events;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/Audio/AudioConfig.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the possible reasons a recognition result might be canceled.\n * @class CancellationReason\n */\nexport enum CancellationReason {\n    /**\n     * Indicates that an error occurred during speech recognition.\n     * @member CancellationReason.Error\n     */\n    Error,\n\n    /**\n     * Indicates that the end of the audio stream was reached.\n     * @member CancellationReason.EndOfStream\n     */\n    EndOfStream,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/CancellationReason.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n /**\n  * An abstract base class that defines callback methods (read() and close()) for\n  * custom audio input streams).\n  * @class PullAudioInputStreamCallback\n  */\nexport abstract class PullAudioInputStreamCallback {\n\n    /**\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\n     * to be read is determined by the size of dataBuffer.\n     * @member PullAudioInputStreamCallback.prototype.read\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\n     * @returns {number} the number of bytes have been read.\n     */\n    public abstract read(dataBuffer: ArrayBuffer): number;\n\n    /**\n     * Closes the audio input stream.\n     * @member PullAudioInputStreamCallback.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/Audio/PullAudioInputStreamCallback.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\n\n/**\n * Represents a keyword recognition model for recognizing when\n * the user says a keyword to initiate further speech recognition.\n * @class KeywordRecognitionModel\n */\nexport class KeywordRecognitionModel {\n    private privDisposed: boolean = false;\n\n    /**\n     * Create and initializes a new instance.\n     * @constructor\n     */\n    private constructor() {\n    }\n\n    /**\n     * Creates a keyword recognition model using the specified filename.\n     * @member KeywordRecognitionModel.fromFile\n     * @function\n     * @public\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\n     *        Note, the file can point to a zip file in which case the model\n     *        will be extracted from the zip.\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\n     */\n    public static fromFile(fileName: string): KeywordRecognitionModel {\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\n\n        throw new Error(\"Not yet implemented.\");\n    }\n\n    /**\n     * Creates a keyword recognition model using the specified filename.\n     * @member KeywordRecognitionModel.fromStream\n     * @function\n     * @public\n     * @param {string} file - A File that represents file for the keyword recognition model.\n     *        Note, the file can point to a zip file in which case the model will be extracted from the zip.\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\n     */\n    public static fromStream(file: File): KeywordRecognitionModel {\n        Contracts.throwIfNull(file, \"file\");\n\n        throw new Error(\"Not yet implemented.\");\n    }\n\n    /**\n     * Dispose of associated resources.\n     * @member KeywordRecognitionModel.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        if (this.privDisposed) {\n            return;\n        }\n\n        this.privDisposed = true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/KeywordRecognitionModel.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\n * @class SessionEventArgs\n */\nexport class SessionEventArgs {\n    private privSessionId: string;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(sessionId: string) {\n        this.privSessionId = sessionId;\n    }\n\n    /**\n     * Represents the session identifier.\n     * @member SessionEventArgs.prototype.sessionId\n     * @function\n     * @public\n     * @returns {string} Represents the session identifier.\n     */\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/SessionEventArgs.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { SessionEventArgs } from \"./Exports\";\n\n/**\n * Defines payload for session events like Speech Start/End Detected\n * @class\n */\nexport class RecognitionEventArgs extends SessionEventArgs {\n    private privOffset: number;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {number} offset - The offset.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(offset: number, sessionId?: string) {\n        super(sessionId);\n\n        this.privOffset = offset;\n    }\n\n    /**\n     * Represents the message offset\n     * @member RecognitionEventArgs.prototype.offset\n     * @function\n     * @public\n     */\n    public get offset(): number {\n        return this.privOffset;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/RecognitionEventArgs.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Define Speech Recognizer output formats.\n * @class OutputFormat\n */\nexport enum OutputFormat {\n    /**\n     * @member OutputFormat.Simple\n     */\n    Simple = 0,\n\n    /**\n     * @member OutputFormat.Detailed\n     */\n    Detailed,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/OutputFormat.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports\";\n\n/**\n * Intent recognition result event arguments.\n * @class\n */\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\n    private privResult: IntentRecognitionResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param result - The result of the intent recognition.\n     * @param offset - The offset.\n     * @param sessionId - The session id.\n     */\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\n        super(offset, sessionId);\n\n        this.privResult = result;\n    }\n\n    /**\n     * Represents the intent recognition result.\n     * @member IntentRecognitionEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\n     */\n    public get result(): IntentRecognitionResult {\n        return this.privResult;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/IntentRecognitionEventArgs.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, ResultReason } from \"./Exports\";\n\n/**\n * Defines result of speech recognition.\n * @class RecognitionResult\n */\nexport class RecognitionResult {\n    private privResultId: string;\n    private privReason: ResultReason;\n    private privText: string;\n    private privDuration: number;\n    private privOffset: number;\n    private privErrorDetails: string;\n    private privJson: string;\n    private privProperties: PropertyCollection;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} resultId - The result id.\n     * @param {ResultReason} reason - The reason.\n     * @param {string} text - The recognized text.\n     * @param {number} duration - The duration.\n     * @param {number} offset - The offset into the stream.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {string} json - Additional Json, if provided.\n     * @param {PropertyCollection} properties - Additional properties, if provided.\n     */\n    constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\n                offset?: number, errorDetails?: string, json?: string, properties?: PropertyCollection) {\n        this.privResultId = resultId;\n        this.privReason = reason;\n        this.privText = text;\n        this.privDuration = duration;\n        this.privOffset = offset;\n        this.privErrorDetails = errorDetails;\n        this.privJson = json;\n        this.privProperties = properties;\n    }\n\n    /**\n     * Specifies the result identifier.\n     * @member RecognitionResult.prototype.resultId\n     * @function\n     * @public\n     * @returns {string} Specifies the result identifier.\n     */\n    public get resultId(): string {\n        return this.privResultId;\n    }\n\n    /**\n     * Specifies status of the result.\n     * @member RecognitionResult.prototype.reason\n     * @function\n     * @public\n     * @returns {ResultReason} Specifies status of the result.\n     */\n    public get reason(): ResultReason {\n        return this.privReason;\n    }\n\n    /**\n     * Presents the recognized text in the result.\n     * @member RecognitionResult.prototype.text\n     * @function\n     * @public\n     * @returns {string} Presents the recognized text in the result.\n     */\n    public get text(): string {\n        return this.privText;\n    }\n\n    /**\n     * Duration of recognized speech in 100 nano second incements.\n     * @member RecognitionResult.prototype.duration\n     * @function\n     * @public\n     * @returns {number} Duration of recognized speech in 100 nano second incements.\n     */\n    public get duration(): number {\n        return this.privDuration;\n    }\n\n    /**\n     * Offset of recognized speech in 100 nano second incements.\n     * @member RecognitionResult.prototype.offset\n     * @function\n     * @public\n     * @returns {number} Offset of recognized speech in 100 nano second incements.\n     */\n    public get offset(): number {\n        return this.privOffset;\n    }\n\n    /**\n     * In case of an unsuccessful recognition, provides details of the occurred error.\n     * @member RecognitionResult.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} a brief description of an error.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n\n    /**\n     * A string containing Json serialized recognition result as it was received from the service.\n     * @member RecognitionResult.prototype.json\n     * @function\n     * @private\n     * @returns {string} Json serialized representation of the result.\n     */\n    public get json(): string {\n        return this.privJson;\n    }\n\n    /**\n     *  The set of properties exposed in the result.\n     * @member RecognitionResult.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The set of properties exposed in the result.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/RecognitionResult.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\n\n/**\n * Defines result of speech recognition.\n * @class SpeechRecognitionResult\n */\nexport class SpeechRecognitionResult extends RecognitionResult {\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @public\n     * @param {string} resultId - The result id.\n     * @param {ResultReason} reason - The reason.\n     * @param {string} text - The recognized text.\n     * @param {number} duration - The duration.\n     * @param {number} offset - The offset into the stream.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {string} json - Additional Json, if provided.\n     * @param {PropertyCollection} properties - Additional properties, if provided.\n     */\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\n                       duration?: number, offset?: number, errorDetails?: string,\n                       json?: string, properties?: PropertyCollection) {\n        super(resultId, reason, text, duration, offset, errorDetails, json, properties);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/SpeechRecognitionResult.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports\";\n\n/**\n * Intent recognition result.\n * @class\n */\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\n    private privIntentId: string;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param intentId - The intent id.\n     * @param resultId - The result id.\n     * @param reason - The reason.\n     * @param text - The recognized text.\n     * @param duration - The duration.\n     * @param offset - The offset into the stream.\n     * @param errorDetails - Error details, if provided.\n     * @param json - Additional Json, if provided.\n     * @param properties - Additional properties, if provided.\n     */\n    constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\n                duration?: number, offset?: number, errorDetails?: string, json?: string,\n                properties?: PropertyCollection) {\n        super(resultId, reason, text, duration, offset, errorDetails, json, properties);\n\n        this.privIntentId = intentId;\n    }\n\n    /**\n     * A String that represents the intent identifier being recognized.\n     * @member IntentRecognitionResult.prototype.intentId\n     * @function\n     * @public\n     * @returns {string} A String that represents the intent identifier being recognized.\n     */\n    public get intentId(): string {\n        return this.privIntentId;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/IntentRecognitionResult.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\n\n/**\n * Language understanding model\n * @class LanguageUnderstandingModel\n */\nexport class LanguageUnderstandingModel {\n    /**\n     * Creates and initializes a new instance\n     * @constructor\n     */\n    protected constructor() {\n    }\n\n    /**\n     * Creates an language understanding model using the specified endpoint.\n     * @member LanguageUnderstandingModel.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\n     */\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\n        Contracts.throwIfNull(uri, \"uri\");\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\n\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\n        // Need to extract the app ID from the URL.\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\n\n        // Start tearing the string apart.\n\n        // region can be extracted from the host name.\n        const firstDot: number = uri.host.indexOf(\".\");\n        if (-1 === firstDot) {\n            throw new Error(\"Could not determine region from endpoint\");\n        }\n        langModelImp.region = uri.host.substr(0, firstDot);\n\n        // Now the app ID.\n\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\n        if (-1 === lastSegment) {\n            throw new Error(\"Could not determine appId from endpoint\");\n        }\n\n        langModelImp.appId = uri.pathname.substr(lastSegment);\n\n        // And finally the key.\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\n        if (undefined === langModelImp.subscriptionKey) {\n            throw new Error(\"Could not determine subscription key from endpoint\");\n        }\n\n        return langModelImp;\n    }\n\n    /**\n     * Creates an language understanding model using the application id of Language Understanding service.\n     * @member LanguageUnderstandingModel.fromAppId\n     * @function\n     * @public\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\n     */\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\n        langModelImp.appId = appId;\n        return langModelImp;\n    }\n\n    /**\n     * Creates a language understanding model using hostname, subscription key and application\n     * id of Language Understanding service.\n     * @member LanguageUnderstandingModel.fromSubscription\n     * @function\n     * @public\n     * @param {string} subscriptionKey - A String that represents the subscription key of\n     *        Language Understanding service.\n     * @param {string} appId - A String that represents the application id of Language\n     *        Understanding service.\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\n     *        of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\n     */\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\n        langModelImp.appId = appId;\n        langModelImp.region = region;\n        langModelImp.subscriptionKey = subscriptionKey;\n        return langModelImp;\n    }\n}\n\n/**\n * @private\n * @class LanguageUnderstandingModelImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\n    public appId: string;\n    public region: string;\n    public subscriptionKey: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/LanguageUnderstandingModel.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionEventArgs, SpeechRecognitionResult } from \"./Exports\";\n\n/**\n * Defines contents of speech recognizing/recognized event.\n * @class SpeechRecognitionEventArgs\n */\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\n    private privResult: SpeechRecognitionResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\n     * @param {number} offset - The offset.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\n        super(offset, sessionId);\n\n        this.privResult = result;\n    }\n\n    /**\n     * Specifies the recognition result.\n     * @member SpeechRecognitionEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {SpeechRecognitionResult} the recognition result.\n     */\n    public get result(): SpeechRecognitionResult {\n        return this.privResult;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/SpeechRecognitionEventArgs.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationErrorCode, CancellationReason, RecognitionEventArgs } from \"./Exports\";\n\n/**\n * Defines content of a RecognitionErrorEvent.\n * @class SpeechRecognitionCanceledEventArgs\n */\nexport class SpeechRecognitionCanceledEventArgs extends RecognitionEventArgs {\n    private privReason: CancellationReason;\n    private privErrorDetails: string;\n    private privErrorCode: CancellationErrorCode;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {CancellationReason} reason - The cancellation reason.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {number} offset - The offset.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(reason: CancellationReason, errorDetails: string,\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\n        super(offset, sessionId);\n\n        this.privReason = reason;\n        this.privErrorDetails = errorDetails;\n        this.privErrorCode = errorCode;\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member SpeechRecognitionCanceledEventArgs.prototype.reason\n     * @function\n     * @public\n     * @returns {CancellationReason} Specifies the reason canceled.\n     */\n    public get reason(): CancellationReason {\n        return this.privReason;\n    }\n\n    /**\n     * The error code in case of an unsuccessful recognition.\n     * Added in version 1.1.0.\n     * @return An error code that represents the error reason.\n     */\n    public get errorCode(): CancellationErrorCode {\n        return this.privErrorCode;\n    }\n\n    /**\n     * In case of an unsuccessful recognition, provides details of the occurred error.\n     * @member SpeechRecognitionCanceledEventArgs.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} A String that represents the error details.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/SpeechRecognitionCanceledEventArgs.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports\";\n\n/**\n * Translation text result event arguments.\n * @class TranslationRecognitionEventArgs\n */\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\n    private privResult: TranslationRecognitionResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\n     * @param {number} offset - The offset.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\n        super(offset, sessionId);\n\n        this.privResult = result;\n    }\n\n    /**\n     * Specifies the recognition result.\n     * @member TranslationRecognitionEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {TranslationRecognitionResult} the recognition result.\n     */\n    public get result(): TranslationRecognitionResult {\n        return this.privResult;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/TranslationRecognitionEventArgs.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports\";\n\n/**\n * Translation Synthesis event arguments\n * @class TranslationSynthesisEventArgs\n */\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\n    private privResult: TranslationSynthesisResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\n        super(sessionId);\n\n        this.privResult = result;\n    }\n\n    /**\n     * Specifies the translation synthesis result.\n     * @member TranslationSynthesisEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\n     */\n    public get result(): TranslationSynthesisResult {\n        return this.privResult;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/TranslationSynthesisEventArgs.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports\";\n\n/**\n * Translation text result.\n * @class TranslationRecognitionResult\n */\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\n    private privTranslations: Translations;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {Translations} translations - The translations.\n     * @param {string} resultId - The result id.\n     * @param {ResultReason} reason - The reason.\n     * @param {string} text - The recognized text.\n     * @param {number} duration - The duration.\n     * @param {number} offset - The offset into the stream.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {string} json - Additional Json, if provided.\n     * @param {PropertyCollection} properties - Additional properties, if provided.\n     */\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\n                       text?: string, duration?: number, offset?: number, errorDetails?: string,\n                       json?: string, properties?: PropertyCollection) {\n        super(resultId, reason, text, duration, offset, errorDetails, json, properties);\n\n        this.privTranslations = translations;\n    }\n\n    /**\n     * Presents the translation results. Each item in the dictionary represents\n     * a translation result in one of target languages, where the key is the name\n     * of the target language, in BCP-47 format, and the value is the translation\n     * text in the specified language.\n     * @member TranslationRecognitionResult.prototype.translations\n     * @function\n     * @public\n     * @returns {Translations} the current translation map that holds all translations requested.\n     */\n    public get translations(): Translations {\n        return this.privTranslations;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/TranslationRecognitionResult.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ResultReason } from \"./ResultReason\";\n\n/**\n * Defines translation synthesis result, i.e. the voice output of the translated\n * text in the target language.\n * @class TranslationSynthesisResult\n */\nexport class TranslationSynthesisResult {\n    private privReason: ResultReason;\n    private privAudio: ArrayBuffer;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {ResultReason} reason - The synthesis reason.\n     * @param {ArrayBuffer} audio - The audio data.\n     */\n    constructor(reason: ResultReason, audio: ArrayBuffer) {\n        this.privReason = reason;\n        this.privAudio = audio;\n    }\n\n    /**\n     * Translated text in the target language.\n     * @member TranslationSynthesisResult.prototype.audio\n     * @function\n     * @public\n     * @returns {ArrayBuffer} Translated audio in the target language.\n     */\n    public get audio(): ArrayBuffer {\n        return this.privAudio;\n    }\n\n    /**\n     * The synthesis status.\n     * @member TranslationSynthesisResult.prototype.reason\n     * @function\n     * @public\n     * @returns {ResultReason} The synthesis status.\n     */\n    public get reason(): ResultReason {\n        return this.privReason;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/TranslationSynthesisResult.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the possible reasons a recognition result might be generated.\n * @class ResultReason\n */\nexport enum ResultReason {\n    /**\n     * Indicates speech could not be recognized. More details\n     * can be found in the NoMatchDetails object.\n     * @member ResultReason.NoMatch\n     */\n    NoMatch,\n\n    /**\n     * Indicates that the recognition was canceled. More details\n     * can be found using the CancellationDetails object.\n     * @member ResultReason.Canceled\n     */\n    Canceled,\n\n    /**\n     * Indicates the speech result contains hypothesis text.\n     * @member ResultReason.RecognizedSpeech\n     */\n    RecognizingSpeech,\n\n    /**\n     * Indicates the speech result contains final text that has been recognized.\n     * Speech Recognition is now complete for this phrase.\n     * @member ResultReason.RecognizedSpeech\n     */\n    RecognizedSpeech,\n\n    /**\n     * Indicates the intent result contains hypothesis text and intent.\n     * @member ResultReason.RecognizingIntent\n     */\n    RecognizingIntent,\n\n    /**\n     * Indicates the intent result contains final text and intent.\n     * Speech Recognition and Intent determination are now complete for this phrase.\n     * @member ResultReason.RecognizedIntent\n     */\n    RecognizedIntent,\n\n    /**\n     * Indicates the translation result contains hypothesis text and its translation(s).\n     * @member ResultReason.TranslatingSpeech\n     */\n    TranslatingSpeech,\n\n    /**\n     * Indicates the translation result contains final text and corresponding translation(s).\n     * Speech Recognition and Translation are now complete for this phrase.\n     * @member ResultReason.TranslatedSpeech\n     */\n    TranslatedSpeech,\n\n    /**\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\n     * @member ResultReason.SynthesizingAudio\n     */\n    SynthesizingAudio,\n\n    /**\n     * Indicates the synthesized audio is now complete for this phrase.\n     * @member ResultReason.SynthesizingAudioCompleted\n     */\n    SynthesizingAudioCompleted,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/ResultReason.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { OutputFormat, PropertyCollection, PropertyId } from \"./Exports\";\n\n/**\n * Speech configuration.\n * @class SpeechConfig\n */\nexport abstract class SpeechConfig {\n    /**\n     * Creates and initializes an instance.\n     * @constructor\n     */\n    protected constructor() { }\n\n    /**\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\n     * @member SpeechConfig.fromSubscription\n     * @function\n     * @public\n     * @param {string} subscriptionKey - The subscription key.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechConfig} The speech factory\n     */\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n\n        return speechImpl;\n    }\n\n    /**\n     * Creates an instance of the speech factory with specified endpoint and subscription key.\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\n     * the language setting in uri takes precedence, and the effective language is \"de-DE\".\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\n     * @member SpeechConfig.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} endpoint - The service endpoint to connect to.\n     * @param {string} subscriptionKey - The subscription key.\n     * @returns {SpeechConfig} A speech factory instance.\n     */\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechConfig {\n        Contracts.throwIfNull(endpoint, \"endpoint\");\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        return speechImpl;\n    }\n\n    /**\n     * Creates an instance of the speech factory with specified initial authorization token and region.\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\n     * @member SpeechConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param {string} authorizationToken - The initial authorization token.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechConfig} A speech factory instance.\n     */\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\n        speechImpl.authorizationToken = authorizationToken;\n        return speechImpl;\n    }\n\n    /**\n     * Returns the current authorization token.\n     * @member SpeechConfig.prototype.authorizationToken\n     * @function\n     * @public\n     */\n    public abstract get authorizationToken(): string;\n\n    /**\n     * Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechConfig.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set authorizationToken(value: string);\n\n    /**\n     * Returns the configured language.\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     */\n    public abstract get speechRecognitionLanguage(): string;\n\n    /**\n     * Sets the input language.\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set speechRecognitionLanguage(value: string);\n\n    /**\n     * Sets an arbitrary property.\n     * @member SpeechConfig.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to set.\n     * @param {string} value - The new value of the property.\n     */\n    public abstract setProperty(name: string, value: string): void;\n\n    /**\n     * Returns the current value of an arbitrary property.\n     * @member SpeechConfig.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to query.\n     * @param {string} def - The value to return in case the property is not known.\n     * @returns {string} The current value, or provided default, of the given property.\n     */\n    public abstract getProperty(name: string, def?: string): string;\n\n    /**\n     * Sets output format.\n     * @member SpeechConfig.prototype.outputFormat\n     * @function\n     * @public\n     */\n    public abstract set outputFormat(format: OutputFormat);\n\n    /**\n     * Gets output format.\n     * @member SpeechConfig.prototype.outputFormat\n     * @function\n     * @public\n     * @returns {OutputFormat} Returns the output format.\n     */\n    public abstract get outputFormat(): OutputFormat;\n\n    /**\n     * Sets the endpoint ID of a customized speech model that is used for speech recognition.\n     * @member SpeechConfig.prototype.endpointId\n     * @function\n     * @public\n     * @param {string} value - The endpoint ID\n     */\n    public abstract set endpointId(value: string);\n\n    /**\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\n     * @member SpeechConfig.prototype.endpointId\n     * @function\n     * @public\n     * @return {string} The endpoint ID\n     */\n    public abstract get endpointId(): string;\n\n    /**\n     * Closes the configuration.\n     * @member SpeechConfig.prototype.close\n     * @function\n     * @public\n     */\n    /* tslint:disable:no-empty */\n    public close(): void { }\n}\n\n/**\n * @private\n * @class SpeechConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechConfigImpl extends SpeechConfig {\n\n    private privProperties: PropertyCollection;\n\n    public constructor() {\n        super();\n        this.privProperties = new PropertyCollection();\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\n        this.outputFormat = OutputFormat.Simple;\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public get endPoint(): URL {\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\n    }\n\n    public get subscriptionKey(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\n    }\n\n    public get region(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\n    }\n\n    public get authorizationToken(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    public set authorizationToken(value: string) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    public get speechRecognitionLanguage(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    public set speechRecognitionLanguage(value: string) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\n    }\n\n    public get outputFormat(): OutputFormat {\n        return (OutputFormat as any)[this.privProperties.getProperty(OutputFormatPropertyName, undefined)];\n    }\n\n    public set outputFormat(value: OutputFormat) {\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\n    }\n\n    public set endpointId(value: string) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\n    }\n\n    public get endpointId(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\n    }\n\n    public setProperty(name: string | PropertyId, value: string): void {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        this.privProperties.setProperty(name, value);\n    }\n\n    public getProperty(name: string | PropertyId, def?: string): string {\n\n        return this.privProperties.getProperty(name, def);\n    }\n\n    public clone(): SpeechConfigImpl {\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\n        ret.privProperties = this.privProperties.clone();\n        return ret;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/SpeechConfig.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError, Promise, PromiseHelper } from \"../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\n\n/**\n * @class\n */\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\n    private privAuthInfo: AuthInfo;\n\n    /**\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\n     * @constructor\n     * @param {string} subscriptionKey - The subscription key\n     */\n    constructor(subscriptionKey: string) {\n        if (!subscriptionKey) {\n            throw new ArgumentNullError(\"subscriptionKey\");\n        }\n\n        this.privAuthInfo = new AuthInfo(AuthHeader, subscriptionKey);\n    }\n\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return PromiseHelper.fromResult(this.privAuthInfo);\n    }\n\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return PromiseHelper.fromResult(this.privAuthInfo);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError, Promise } from \"../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Authorization\";\n\nexport class CognitiveTokenAuthentication implements IAuthentication {\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\n\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\n        if (!fetchCallback) {\n            throw new ArgumentNullError(\"fetchCallback\");\n        }\n\n        if (!fetchOnExpiryCallback) {\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\n        }\n\n        this.privFetchCallback = fetchCallback;\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\n    }\n\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.privFetchCallback(authFetchEventId).onSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.privFetchOnExpiryCallback(authFetchEventId).onSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/CognitiveTokenAuthentication.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { WebsocketConnection } from \"../common.browser/Exports\";\nimport { IConnection, IStringDictionary, Storage } from \"../common/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { AuthInfo, IConnectionFactory, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\n\nconst TestHooksParamName: string = \"testhooks\";\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\n\nexport class IntentConnectionFactory implements IConnectionFactory {\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\n\n            endpoint = this.host() + Storage.local.getOrAdd(\"TranslationRelativeUri\", \"/speech/\" + this.getSpeechRegionFromIntentRegion(region) + \"/recognition/interactive/cognitiveservices/v1\");\n        }\n\n        const queryParams: IStringDictionary<string> = {\n            format: \"simple\",\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n        };\n\n        if (this.isDebugModeEnabled) {\n            queryParams[TestHooksParamName] = \"1\";\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[authInfo.headerName] = authInfo.token;\n        headers[ConnectionIdHeader] = connectionId;\n\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\n    }\n\n    private host(): string {\n        return Storage.local.getOrAdd(\"Host\", \"wss://speech.platform.bing.com\");\n    }\n\n    private get isDebugModeEnabled(): boolean {\n        const value = Storage.local.getOrAdd(\"IsDebugModeEnabled\", \"false\");\n        return value.toLowerCase() === \"true\";\n    }\n\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\n        switch (intentRegion) {\n            case \"West US\":\n            case \"US West\":\n            case \"westus\":\n                return \"uswest\";\n            case \"West US 2\":\n            case \"US West 2\":\n            case \"westus2\":\n                return \"uswest2\";\n            case \"South Central US\":\n            case \"US South Central\":\n            case \"southcentralus\":\n                return \"ussouthcentral\";\n            case \"West Central US\":\n            case \"US West Central\":\n            case \"westcentralus\":\n                return \"uswestcentral\";\n            case \"East US\":\n            case \"US East\":\n            case \"eastus\":\n                return \"useast\";\n            case \"East US 2\":\n            case \"US East 2\":\n            case \"eastus2\":\n                return \"useast2\";\n            case \"West Europe\":\n            case \"Europe West\":\n            case \"westeurope\":\n                return \"europewest\";\n            case \"North Europe\":\n            case \"Europe North\":\n            case \"northeurope\":\n                return \"europenorth\";\n            case \"Brazil South\":\n            case \"South Brazil\":\n            case \"southbrazil\":\n                return \"brazilsouth\";\n            case \"Australia East\":\n            case \"East Australia\":\n            case \"eastaustralia\":\n                return \"australiaeast\";\n            case \"Southeast Asia\":\n            case \"Asia Southeast\":\n            case \"southeastasia\":\n                return \"asiasoutheast\";\n            case \"East Asia\":\n            case \"Asia East\":\n            case \"eastasia\":\n                return \"asiaeast\";\n            default:\n                return intentRegion;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/IntentConnectionFactory.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport {\n    ArgumentNullError,\n    ConnectionClosedEvent,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionOpenResponse,\n    ConnectionState,\n    createNoDashGuid,\n    Deferred,\n    IAudioSource,\n    IAudioStreamNode,\n    IConnection,\n    IDisposable,\n    IStreamChunk,\n    MessageType,\n    Promise,\n    PromiseHelper,\n    PromiseResult,\n} from \"../common/Exports\";\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyId,\n    RecognitionEventArgs,\n    Recognizer,\n    SessionEventArgs,\n    SpeechRecognitionResult,\n} from \"../sdk/Exports\";\nimport {\n    RequestSession,\n    SpeechDetected,\n} from \"./Exports\";\nimport {\n    AuthInfo,\n    IAuthentication,\n} from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\nexport abstract class ServiceRecognizerBase implements IDisposable {\n    private privAuthentication: IAuthentication;\n    private privConnectionFactory: IConnectionFactory;\n    private privAudioSource: IAudioSource;\n    private privSpeechConfigConnectionId: string;\n    private privConnectionConfigurationPromise: Promise<IConnection>;\n    private privConnectionId: string;\n    private privAuthFetchEventId: string;\n    private privIsDisposed: boolean;\n    private privRecognizer: Recognizer;\n    private privMustReportEndOfStream: boolean;\n    protected privRecognizerConfig: RecognizerConfig;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        recognizer: Recognizer) {\n\n        if (!authentication) {\n            throw new ArgumentNullError(\"authentication\");\n        }\n\n        if (!connectionFactory) {\n            throw new ArgumentNullError(\"connectionFactory\");\n        }\n\n        if (!audioSource) {\n            throw new ArgumentNullError(\"audioSource\");\n        }\n\n        if (!recognizerConfig) {\n            throw new ArgumentNullError(\"recognizerConfig\");\n        }\n\n        this.privMustReportEndOfStream = false;\n        this.privAuthentication = authentication;\n        this.privConnectionFactory = connectionFactory;\n        this.privAudioSource = audioSource;\n        this.privRecognizerConfig = recognizerConfig;\n        this.privIsDisposed = false;\n        this.privRecognizer = recognizer;\n    }\n\n    public get audioSource(): IAudioSource {\n        return this.privAudioSource;\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n    public dispose(reason?: string): void {\n        this.privIsDisposed = true;\n        if (this.privConnectionConfigurationPromise) {\n            this.privConnectionConfigurationPromise.onSuccessContinueWith((connection: IConnection) => {\n                connection.dispose(reason);\n            });\n        }\n    }\n\n    public recognize(\n        speechContextJson: string,\n        successCallback: (e: SpeechRecognitionResult) => void,\n        errorCallBack: (e: string) => void,\n    ): Promise<boolean> {\n        const requestSession = new RequestSession(this.privAudioSource.id(), speechContextJson);\n\n        requestSession.listenForServiceTelemetry(this.privAudioSource.events);\n\n        return this.audioSource\n            .attach(requestSession.audioNodeId)\n            .continueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\n                let audioNode: ReplayableAudioNode;\n\n                if (result.isError) {\n                    this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error, successCallback);\n                    return PromiseHelper.fromError<boolean>(result.error);\n                } else {\n                    audioNode = new ReplayableAudioNode(result.result, this.audioSource.format as AudioStreamFormatImpl);\n                    requestSession.onAudioSourceAttachCompleted(audioNode, false);\n                }\n\n                return this.configureConnection(requestSession)\n                    .on((_: IConnection) => {\n\n                        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(requestSession.sessionId);\n\n                        if (!!this.privRecognizer.sessionStarted) {\n                            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n                        }\n\n                        const messageRetrievalPromise = this.receiveMessage(requestSession, successCallback, errorCallBack);\n                        const audioSendPromise = this.sendAudio(audioNode, requestSession);\n\n                        /* tslint:disable:no-empty */\n                        audioSendPromise.on((_: boolean) => { }, (error: string) => {\n                            this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.RuntimeError, error, successCallback);\n                        });\n\n                        const completionPromise = PromiseHelper.whenAll([messageRetrievalPromise, audioSendPromise]);\n\n                        return completionPromise.on((r: boolean) => {\n                            requestSession.dispose();\n                            this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n                        }, (error: string) => {\n                            requestSession.dispose(error);\n                            this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n                            this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.RuntimeError, error, successCallback);\n                        });\n\n                    }, (error: string) => {\n                        this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error, successCallback);\n                    }).on(() => {\n                        return requestSession.completionPromise;\n                    }, (error: string) => {\n                        this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.RuntimeError, error, successCallback);\n                    }).onSuccessContinueWithPromise((_: IConnection): Promise<boolean> => {\n                        return PromiseHelper.fromResult(true);\n                    });\n            });\n    }\n\n    // Called when telemetry data is sent to the service.\n    // Used for testing Telemetry capture.\n    public static telemetryData: (json: string) => void;\n    public static telemetryDataEnabled: boolean = true;\n\n    protected abstract processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        requestSession: RequestSession,\n        connection: IConnection,\n        successCallback?: (e: SpeechRecognitionResult) => void,\n        errorCallBack?: (e: string) => void): void;\n\n    protected sendTelemetryData = (requestSession: RequestSession, telemetryData: string) => {\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\n            this.privIsDisposed) {\n            return PromiseHelper.fromResult(true);\n        }\n\n        if (!!ServiceRecognizerBase.telemetryData) {\n            try {\n                ServiceRecognizerBase.telemetryData(telemetryData);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n\n        return this.fetchConnection(requestSession).onSuccessContinueWithPromise((connection: IConnection): Promise<boolean> => {\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"telemetry\",\n                requestSession.requestId,\n                \"application/json\",\n                telemetryData));\n        });\n    }\n\n    // Cancels recognition.\n    protected abstract cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string,\n        cancelRecoCallback: (r: SpeechRecognitionResult) => void): void;\n\n    // Cancels recognition.\n    protected cancelRecognitionLocal(\n        requestSession: RequestSession,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string,\n        cancelRecoCallback: (r: SpeechRecognitionResult) => void): void {\n\n        if (!requestSession.isCanceled) {\n            requestSession.onCancelled();\n\n            this.cancelRecognition(\n                requestSession.sessionId,\n                requestSession.requestId,\n                cancellationReason,\n                errorCode,\n                error,\n                cancelRecoCallback);\n        }\n    }\n\n    private fetchConnection = (requestSession: RequestSession): Promise<IConnection> => {\n        return this.configureConnection(requestSession);\n    }\n\n    private configureConnection = (requestSession: RequestSession, isUnAuthorized: boolean = false): Promise<IConnection> => {\n        if (this.privConnectionConfigurationPromise) {\n            if (this.privConnectionConfigurationPromise.result().isCompleted &&\n                (this.privConnectionConfigurationPromise.result().isError\n                    || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\n\n                this.privConnectionId = null;\n                this.privConnectionConfigurationPromise = null;\n                return this.configureConnection(requestSession);\n            } else {\n                // requestSession.onConnectionEstablishCompleted(200);\n                return this.privConnectionConfigurationPromise;\n            }\n        }\n\n        this.privAuthFetchEventId = createNoDashGuid();\n        this.privConnectionId = createNoDashGuid();\n\n        requestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n\n        this.privConnectionConfigurationPromise = authPromise\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\n                if (result.isError) {\n                    requestSession.onAuthCompleted(true, result.error);\n                    throw new Error(result.error);\n                } else {\n                    requestSession.onAuthCompleted(false);\n                }\n\n                const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);\n                requestSession.listenForServiceTelemetry(connection.events);\n\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\n                    if (response.statusCode === 200) {\n                        requestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n                        requestSession.onConnectionEstablishCompleted(response.statusCode);\n                        //  requestSession.listenForServiceTelemetry(this.privConnectionFetchPromise.result().result.events);\n                        return this.sendSpeechConfig(connection, requestSession, this.privRecognizerConfig.platformConfig.serialize())\n                            .onSuccessContinueWithPromise((_: boolean) => {\n                                return this.sendSpeechContext(connection, requestSession, requestSession.contextJson).onSuccessContinueWith((_: boolean) => {\n                                    return connection;\n                                });\n                            });\n\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\n                        return this.configureConnection(requestSession, true);\n                    } else {\n                        requestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\n                    }\n                });\n            });\n\n        return this.privConnectionConfigurationPromise;\n    }\n\n    private receiveMessage = (\n        requestSession: RequestSession,\n        successCallback: (e: SpeechRecognitionResult) => void,\n        errorCallBack: (e: string) => void,\n    ): Promise<boolean> => {\n        return this.fetchConnection(requestSession).onSuccessContinueWithPromise((connection: IConnection): Promise<boolean> => {\n            return connection.read()\n                .onSuccessContinueWithPromise((message: ConnectionMessage) => {\n                    if (this.privIsDisposed) {\n                        // We're done.\n                        return PromiseHelper.fromResult(true);\n                    }\n\n                    // indicates we are draining the queue and it came with no message;\n                    if (!message) {\n                        if (requestSession.isCompleted) {\n                            return PromiseHelper.fromResult(true);\n                        } else {\n                            return this.receiveMessage(requestSession, successCallback, errorCallBack);\n                        }\n                    }\n\n                    const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n                    if (connectionMessage.requestId.toLowerCase() === requestSession.requestId.toLowerCase()) {\n                        switch (connectionMessage.path.toLowerCase()) {\n                            case \"turn.start\":\n                                this.privMustReportEndOfStream = true;\n                                break;\n                            case \"speech.startdetected\":\n                                const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n\n                                const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, requestSession.sessionId);\n\n                                if (!!this.privRecognizer.speechStartDetected) {\n                                    this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n                                }\n\n                                break;\n                            case \"speech.enddetected\":\n\n                                let json: string;\n\n                                if (connectionMessage.textBody.length > 0) {\n                                    json = connectionMessage.textBody;\n                                } else {\n                                    // If the request was empty, the JSON returned is empty.\n                                    json = \"{ Offset: 0 }\";\n                                }\n\n                                const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\n\n                                requestSession.onServiceRecognized(speechStopDetected.Offset + requestSession.currentTurnAudioOffset);\n\n                                const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + requestSession.currentTurnAudioOffset, requestSession.sessionId);\n\n                                if (!!this.privRecognizer.speechEndDetected) {\n                                    this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n                                }\n                                break;\n                            case \"turn.end\":\n                                if (requestSession.isSpeechEnded && this.privMustReportEndOfStream) {\n                                    this.privMustReportEndOfStream = false;\n                                    this.cancelRecognitionLocal(requestSession, CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined, successCallback);\n                                }\n\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(requestSession.sessionId);\n                                requestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\n                                if (!this.privRecognizerConfig.isContinuousRecognition || requestSession.isSpeechEnded) {\n                                    if (!!this.privRecognizer.sessionStopped) {\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                                    }\n\n                                    return PromiseHelper.fromResult(true);\n                                } else {\n                                    this.fetchConnection(requestSession).onSuccessContinueWith((connection: IConnection) => {\n                                        this.sendSpeechContext(connection, requestSession, requestSession.contextJson);\n                                    });\n                                }\n                            default:\n                                this.processTypeSpecificMessages(\n                                    connectionMessage,\n                                    requestSession,\n                                    connection,\n                                    successCallback,\n                                    errorCallBack);\n                        }\n                    }\n\n                    return this.receiveMessage(requestSession, successCallback, errorCallBack);\n                });\n        });\n    }\n\n    private sendSpeechConfig = (connection: IConnection, requestSession: RequestSession, speechConfigJson: string): Promise<boolean> => {\n        // filter out anything that is not required for the service to work.\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\n            const withTelemetry = JSON.parse(speechConfigJson);\n\n            const replacement: any = {\n                context: {\n                    system: withTelemetry.context.system,\n                },\n            };\n\n            speechConfigJson = JSON.stringify(replacement);\n        }\n\n        if (speechConfigJson && this.privConnectionId !== this.privSpeechConfigConnectionId) {\n            this.privSpeechConfigConnectionId = this.privConnectionId;\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"speech.config\",\n                requestSession.requestId,\n                \"application/json\",\n                speechConfigJson));\n        }\n\n        return PromiseHelper.fromResult(true);\n    }\n\n    private sendSpeechContext = (connection: IConnection, requestSession: RequestSession, speechContextJson: string): Promise<boolean> => {\n        if (speechContextJson) {\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"speech.context\",\n                requestSession.requestId,\n                \"application/json\",\n                speechContextJson));\n        }\n        return PromiseHelper.fromResult(true);\n    }\n\n    private sendAudio = (\n        audioStreamNode: IAudioStreamNode,\n        requestSession: RequestSession): Promise<boolean> => {\n        // NOTE: Home-baked promises crash ios safari during the invocation\n        // of the error callback chain (looks like the recursion is way too deep, and\n        // it blows up the stack). The following construct is a stop-gap that does not\n        // bubble the error up the callback chain and hence circumvents this problem.\n        // TODO: rewrite with ES6 promises.\n        const deferred = new Deferred<boolean>();\n\n        // The time we last sent data to the service.\n        let lastSendTime: number = Date.now();\n\n        const audioFormat: AudioStreamFormatImpl = this.privAudioSource.format as AudioStreamFormatImpl;\n\n        const readAndUploadCycle = (_: boolean) => {\n\n            // If speech is done, stop sending audio.\n            if (!this.privIsDisposed && !requestSession.isSpeechEnded && !requestSession.isCompleted) {\n                this.fetchConnection(requestSession).onSuccessContinueWith((connection: IConnection) => {\n                    audioStreamNode.read().on(\n                        (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\n\n                            // we have a new audio chunk to upload.\n                            if (requestSession.isSpeechEnded) {\n                                // If service already recognized audio end then dont send any more audio\n                                deferred.resolve(true);\n                                return;\n                            }\n\n                            const payload = (audioStreamChunk.isEnd) ? null : audioStreamChunk.buffer;\n                            const uploaded: Promise<boolean> = connection.send(\n                                new SpeechConnectionMessage(\n                                    MessageType.Binary, \"audio\", requestSession.requestId, null, payload));\n\n                            if (!audioStreamChunk.isEnd) {\n\n                                // Caculate any delay to the audio stream needed. /2 to allow 2x real time transmit rate max.\n                                const minSendTime = ((payload.byteLength / audioFormat.avgBytesPerSec) / 2) * 1000;\n\n                                const delay: number = Math.max(0, (lastSendTime - Date.now() + minSendTime));\n\n                                uploaded.onSuccessContinueWith((result: boolean) => {\n                                    setTimeout(() => {\n                                        lastSendTime = Date.now();\n                                        readAndUploadCycle(result);\n                                    }, delay);\n                                });\n                            } else {\n                                // the audio stream has been closed, no need to schedule next\n                                // read-upload cycle.\n                                requestSession.onSpeechEnded();\n                                deferred.resolve(true);\n                            }\n                        },\n                        (error: string) => {\n                            if (requestSession.isSpeechEnded) {\n                                // For whatever reason, Reject is used to remove queue subscribers inside\n                                // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which\n                                // means that sometimes things can be rejected in normal circumstances, without\n                                // any errors.\n                                deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.\n                            } else {\n                                // Only reject, if there was a proper error.\n                                deferred.reject(error);\n                            }\n                        });\n                });\n            }\n        };\n\n        readAndUploadCycle(true);\n\n        return deferred.promise();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceRecognizerBase.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\n\nconst PathHeaderName: string = \"path\";\nconst ContentTypeHeaderName: string = \"content-type\";\nconst RequestIdHeaderName: string = \"x-requestid\";\nconst RequestTimestampHeaderName: string = \"x-timestamp\";\n\nexport class SpeechConnectionMessage extends ConnectionMessage {\n\n    private privPath: string;\n    private privRequestId: string;\n    private privContentType: string;\n    private privAdditionalHeaders: IStringDictionary<string>;\n\n    public constructor(\n        messageType: MessageType,\n        path: string,\n        requestId: string,\n        contentType: string,\n        body: any,\n        additionalHeaders?: IStringDictionary<string>,\n        id?: string) {\n\n        if (!path) {\n            throw new ArgumentNullError(\"path\");\n        }\n\n        if (!requestId) {\n            throw new ArgumentNullError(\"requestId\");\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[PathHeaderName] = path;\n        headers[RequestIdHeaderName] = requestId;\n        headers[RequestTimestampHeaderName] = new Date().toISOString();\n        if (contentType) {\n            headers[ContentTypeHeaderName] = contentType;\n        }\n\n        if (additionalHeaders) {\n            for (const headerName in additionalHeaders) {\n                if (headerName) {\n                    headers[headerName] = additionalHeaders[headerName];\n                }\n\n            }\n        }\n\n        if (id) {\n            super(messageType, body, headers, id);\n        } else {\n            super(messageType, body, headers);\n        }\n\n        this.privPath = path;\n        this.privRequestId = requestId;\n        this.privContentType = contentType;\n        this.privAdditionalHeaders = additionalHeaders;\n    }\n\n    public get path(): string {\n        return this.privPath;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get contentType(): string {\n        return this.privContentType;\n    }\n\n    public get additionalHeaders(): IStringDictionary<string> {\n        return this.privAdditionalHeaders;\n    }\n\n    public static fromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\n        let path = null;\n        let requestId = null;\n        let contentType = null;\n        let requestTimestamp = null;\n        const additionalHeaders: IStringDictionary<string> = {};\n\n        if (message.headers) {\n            for (const headerName in message.headers) {\n                if (headerName) {\n                    if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\n                        path = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\n                        requestId = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\n                        requestTimestamp = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\n                        contentType = message.headers[headerName];\n                    } else {\n                        additionalHeaders[headerName] = message.headers[headerName];\n                    }\n                }\n            }\n        }\n\n        return new SpeechConnectionMessage(\n            message.messageType,\n            path,\n            requestId,\n            contentType,\n            message.body,\n            additionalHeaders,\n            message.id);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/SpeechConnectionMessage.Internal.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection } from \"../sdk/Exports\";\n\nexport enum RecognitionMode {\n    Interactive,\n    Conversation,\n    Dictation,\n}\n\nexport enum SpeechResultFormat {\n    Simple,\n    Detailed,\n}\n\nexport class RecognizerConfig {\n    private privRecognitionMode: RecognitionMode = RecognitionMode.Interactive;\n    private privPlatformConfig: PlatformConfig;\n    private privRecognitionActivityTimeout: number;\n    private privSpeechConfig: PropertyCollection;\n\n    constructor(\n        platformConfig: PlatformConfig,\n        recognitionMode: RecognitionMode = RecognitionMode.Interactive,\n        speechConfig: PropertyCollection) {\n        this.privPlatformConfig = platformConfig ? platformConfig : new PlatformConfig(new Context(null));\n        this.privRecognitionMode = recognitionMode;\n        this.privRecognitionActivityTimeout = recognitionMode === RecognitionMode.Interactive ? 8000 : 25000;\n        this.privSpeechConfig = speechConfig;\n    }\n\n    public get parameters(): PropertyCollection {\n        return this.privSpeechConfig;\n    }\n\n    public get recognitionMode(): RecognitionMode {\n        return this.privRecognitionMode;\n    }\n\n    public get platformConfig(): PlatformConfig {\n        return this.privPlatformConfig;\n    }\n\n    public get recognitionActivityTimeout(): number {\n        return this.privRecognitionActivityTimeout;\n    }\n\n    public get isContinuousRecognition(): boolean {\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class PlatformConfig {\n    private context: Context;\n\n    constructor(context: Context) {\n        this.context = context;\n    }\n\n    public serialize = (): string => {\n        return JSON.stringify(this, (key: any, value: any): any => {\n            if (value && typeof value === \"object\") {\n                const replacement: any = {};\n                for (const k in value) {\n                    if (Object.hasOwnProperty.call(value, k)) {\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n                    }\n                }\n                return replacement;\n            }\n            return value;\n        });\n    }\n\n    public get Context(): Context {\n        return this.context;\n    }\n\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Context {\n    public system: System;\n    public os: OS;\n\n    constructor(os: OS) {\n        this.system = new System();\n        this.os = os;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class System {\n    public name: string;\n    public version: string;\n    public build: string;\n    public lang: string;\n\n    constructor() {\n        // Note: below will be patched for official builds.\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.1.0-alpha.0.1\";\n\n        this.name = \"SpeechSDK\";\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\n        this.build = \"JavaScript\";\n        this.lang = \"JavaScript\";\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class OS {\n    public platform: string;\n    public name: string;\n    public version: string;\n\n    constructor(platform: string, name: string, version: string) {\n        this.platform = platform;\n        this.name = name;\n        this.version = version;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Device {\n    public manufacturer: string;\n    public model: string;\n    public version: string;\n\n    constructor(manufacturer: string, model: string, version: string) {\n        this.manufacturer = manufacturer;\n        this.model = model;\n        this.version = version;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/RecognizerConfig.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionMessage,\n    Deferred,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n    MessageType,\n    Promise,\n    RawWebsocketMessage,\n} from \"../common/Exports\";\n\nconst CRLF: string = \"\\r\\n\";\n\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\n\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\n        const deferral = new Deferred<ConnectionMessage>();\n\n        try {\n            if (message.messageType === MessageType.Text) {\n                const textMessage: string = message.textContent;\n                let headers: IStringDictionary<string> = {};\n                let body: string = null;\n\n                if (textMessage) {\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\n                    if (headerBodySplit && headerBodySplit.length > 0) {\n                        headers = this.parseHeaders(headerBodySplit[0]);\n                        if (headerBodySplit.length > 1) {\n                            body = headerBodySplit[1];\n                        }\n                    }\n                }\n\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\n            } else if (message.messageType === MessageType.Binary) {\n                const binaryMessage: ArrayBuffer = message.binaryContent;\n                let headers: IStringDictionary<string> = {};\n                let body: ArrayBuffer = null;\n\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\n                }\n\n                const dataView = new DataView(binaryMessage);\n                const headerLength = dataView.getInt16(0);\n\n                if (binaryMessage.byteLength < headerLength + 2) {\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\n                }\n\n                let headersString = \"\";\n                for (let i = 0; i < headerLength; i++) {\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\n                }\n\n                headers = this.parseHeaders(headersString);\n\n                if (binaryMessage.byteLength > headerLength + 2) {\n                    body = binaryMessage.slice(2 + headerLength);\n                }\n\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\n            }\n        } catch (e) {\n            deferral.reject(`Error formatting the message. Error: ${e}`);\n        }\n\n        return deferral.promise();\n    }\n\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\n        const deferral = new Deferred<RawWebsocketMessage>();\n\n        try {\n            if (message.messageType === MessageType.Text) {\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\n\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\n\n            } else if (message.messageType === MessageType.Binary) {\n                const headersString = this.makeHeaders(message);\n                const content = message.binaryBody;\n\n                const headerInt8Array = new Int8Array(this.stringToArrayBuffer(headersString));\n\n                const payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));\n                const dataView = new DataView(payload);\n\n                dataView.setInt16(0, headerInt8Array.length);\n\n                for (let i = 0; i < headerInt8Array.byteLength; i++) {\n                    dataView.setInt8(2 + i, headerInt8Array[i]);\n                }\n\n                if (content) {\n                    const bodyInt8Array = new Int8Array(content);\n                    for (let i = 0; i < bodyInt8Array.byteLength; i++) {\n                        dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);\n                    }\n                }\n\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\n            }\n        } catch (e) {\n            deferral.reject(`Error formatting the message. ${e}`);\n        }\n\n        return deferral.promise();\n    }\n\n    private makeHeaders = (message: ConnectionMessage): string => {\n        let headersString: string = \"\";\n\n        if (message.headers) {\n            for (const header in message.headers) {\n                if (header) {\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\n                }\n            }\n        }\n\n        return headersString;\n    }\n\n    private parseHeaders = (headersString: string): IStringDictionary<string> => {\n        const headers: IStringDictionary<string> = {};\n\n        if (headersString) {\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\n            if (headers) {\n                for (const header of headerMatches) {\n                    if (header) {\n                        const separatorIndex = header.indexOf(\":\");\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\n                        const headerValue =\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\n                                header.substr(separatorIndex + 1).trim() :\n                                \"\";\n\n                        headers[headerName] = headerValue;\n                    }\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    private stringToArrayBuffer = (str: string): ArrayBuffer => {\n        const buffer = new ArrayBuffer(str.length);\n        const view = new DataView(buffer);\n        for (let i = 0; i < str.length; i++) {\n            view.setUint8(i, str.charCodeAt(i));\n        }\n        return buffer;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/WebsocketMessageFormatter.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport class QueryParameterNames {\n    public static get TestHooksParamName(): string {\n        return \"testhooks\";\n    }\n    public static get ConnectionIdHeader(): string {\n        return \"X-ConnectionId\";\n    }\n    public static get DeploymentIdParamName(): string {\n        return \"cid\";\n    }\n    public static get FormatParamName(): string {\n        return \"format\";\n    }\n    public static get LanguageParamName(): string {\n        return \"language\";\n    }\n    public static get TranslationFromParamName(): string {\n        return \"from\";\n    }\n    public static get TranslationToParamName(): string {\n        return \"to\";\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/QueryParameterNames.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { WebsocketConnection } from \"../common.browser/Exports\";\nimport { IConnection, IStringDictionary, Storage } from \"../common/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { AuthInfo, IConnectionFactory, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\n\nconst TestHooksParamName: string = \"testhooks\";\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\n\nexport class TranslationConnectionFactory implements IConnectionFactory {\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n\n            endpoint = this.host(region) + Storage.local.getOrAdd(\"TranslationRelativeUri\", \"/speech/translation/cognitiveservices/v1\");\n        }\n\n        const queryParams: IStringDictionary<string> = {\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\n        };\n\n        if (this.isDebugModeEnabled) {\n            queryParams[TestHooksParamName] = \"1\";\n        }\n\n        const voiceName: string = \"voice\";\n        const featureName: string = \"features\";\n\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\n            queryParams[featureName] = \"texttospeech\";\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[authInfo.headerName] = authInfo.token;\n        headers[ConnectionIdHeader] = connectionId;\n\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\n    }\n\n    private host(region: string): string {\n        return Storage.local.getOrAdd(\"Host\", \"wss://\" + region + \".s2s.speech.microsoft.com\");\n    }\n\n    private get isDebugModeEnabled(): boolean {\n        const value = Storage.local.getOrAdd(\"IsDebugModeEnabled\", \"false\");\n        return value.toLowerCase() === \"true\";\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/TranslationConnectionFactory.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationReason, ResultReason } from \"../sdk/Exports\";\nimport { RecognitionStatus } from \"./Exports\";\n\nexport class EnumTranslation {\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\n        let reason = ResultReason.Canceled;\n        switch (recognitionStatus) {\n            case RecognitionStatus.Success:\n                reason = ResultReason.RecognizedSpeech;\n                break;\n            case RecognitionStatus.NoMatch:\n            case RecognitionStatus.InitialSilenceTimeout:\n            case RecognitionStatus.BabbleTimeout:\n            case RecognitionStatus.EndOfDictation:\n                reason = ResultReason.NoMatch;\n                break;\n            case RecognitionStatus.Error:\n            default:\n                reason = ResultReason.Canceled;\n                break;\n        }\n\n        return reason;\n    }\n\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\n        let reason = CancellationReason.EndOfStream;\n        switch (recognitionStatus) {\n            case RecognitionStatus.Success:\n            case RecognitionStatus.EndOfDictation:\n            case RecognitionStatus.NoMatch:\n                reason = CancellationReason.EndOfStream;\n                break;\n            case RecognitionStatus.InitialSilenceTimeout:\n            case RecognitionStatus.BabbleTimeout:\n            case RecognitionStatus.Error:\n            default:\n                reason = CancellationReason.Error;\n                break;\n        }\n        return reason;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/EnumTranslation.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * @class SynthesisStatus\n * @private\n */\nexport enum SynthesisStatus {\n    /**\n     * The response contains valid audio data.\n     * @member SynthesisStatus.Success\n     */\n    Success,\n\n    /**\n     * Indicates the end of audio data. No valid audio data is included in the message.\n     * @member SynthesisStatus.SynthesisEnd\n     */\n    SynthesisEnd,\n\n    /**\n     * Indicates an error occurred during synthesis data processing.\n     * @member SynthesisStatus.Error\n     */\n    Error,\n}\n\nexport enum RecognitionStatus {\n    Success,\n    NoMatch,\n    InitialSilenceTimeout,\n    BabbleTimeout,\n    Error,\n    EndOfDictation,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceMessages/Enums.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { SynthesisStatus } from \"../Exports\";\n\n// translation.synthesis.end\nexport interface ITranslationSynthesisEnd {\n    SynthesisStatus: SynthesisStatus;\n    FailureReason: string;\n}\n\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\n    private privSynthesisEnd: ITranslationSynthesisEnd;\n\n    private constructor(json: string) {\n        this.privSynthesisEnd = JSON.parse(json);\n        this.privSynthesisEnd.SynthesisStatus = (SynthesisStatus as any)[this.privSynthesisEnd.SynthesisStatus];\n    }\n\n    public static fromJSON(json: string): TranslationSynthesisEnd {\n        return new TranslationSynthesisEnd(json);\n    }\n\n    public get SynthesisStatus(): SynthesisStatus {\n        return this.privSynthesisEnd.SynthesisStatus;\n    }\n\n    public get FailureReason(): string {\n        return this.privSynthesisEnd.FailureReason;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ITranslations } from \"../Exports\";\nimport { TranslationStatus } from \"../TranslationStatus\";\n\n// translation.hypothesis\nexport interface ITranslationHypothesis {\n    Duration: number;\n    Offset: number;\n    Text: string;\n    Translation: ITranslations;\n}\n\nexport class TranslationHypothesis implements ITranslationHypothesis {\n    private privTranslationHypothesis: ITranslationHypothesis;\n\n    private constructor(json: string) {\n        this.privTranslationHypothesis = JSON.parse(json);\n        this.privTranslationHypothesis.Translation.TranslationStatus = (TranslationStatus as any)[this.privTranslationHypothesis.Translation.TranslationStatus];\n    }\n\n    public static fromJSON(json: string): TranslationHypothesis {\n        return new TranslationHypothesis(json);\n    }\n\n    public get Duration(): number {\n        return this.privTranslationHypothesis.Duration;\n    }\n\n    public get Offset(): number {\n        return this.privTranslationHypothesis.Offset;\n    }\n\n    public get Text(): string {\n        return this.privTranslationHypothesis.Text;\n    }\n\n    public get Translation(): ITranslations {\n        return this.privTranslationHypothesis.Translation;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceMessages/TranslationHypothesis.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ITranslations, RecognitionStatus } from \"../Exports\";\nimport { TranslationStatus } from \"../TranslationStatus\";\n\n// translation.phrase\nexport interface ITranslationPhrase {\n    RecognitionStatus: RecognitionStatus;\n    Offset: number;\n    Duration: number;\n    Text: string;\n    Translation: ITranslations;\n}\n\nexport class TranslationPhrase implements ITranslationPhrase {\n    private privTranslationPhrase: ITranslationPhrase;\n\n    private constructor(json: string) {\n        this.privTranslationPhrase = JSON.parse(json);\n        this.privTranslationPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privTranslationPhrase.RecognitionStatus];\n        if (this.privTranslationPhrase.Translation !== undefined) {\n            this.privTranslationPhrase.Translation.TranslationStatus = (TranslationStatus as any)[this.privTranslationPhrase.Translation.TranslationStatus];\n        }\n    }\n\n    public static fromJSON(json: string): TranslationPhrase {\n        return new TranslationPhrase(json);\n    }\n\n    public get RecognitionStatus(): RecognitionStatus {\n        return this.privTranslationPhrase.RecognitionStatus;\n    }\n\n    public get Offset(): number {\n        return this.privTranslationPhrase.Offset;\n    }\n\n    public get Duration(): number {\n        return this.privTranslationPhrase.Duration;\n    }\n\n    public get Text(): string {\n        return this.privTranslationPhrase.Text;\n    }\n\n    public get Translation(): ITranslations {\n        return this.privTranslationPhrase.Translation;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceMessages/TranslationPhrase.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IAudioSource, IConnection, TranslationStatus } from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyCollection,\n    ResultReason,\n    SpeechRecognitionResult,\n    TranslationRecognitionCanceledEventArgs,\n    TranslationRecognitionEventArgs,\n    TranslationRecognitionResult,\n    TranslationRecognizer,\n    Translations,\n    TranslationSynthesisEventArgs,\n    TranslationSynthesisResult,\n} from \"../sdk/Exports\";\nimport {\n    CancellationErrorCodePropertyName,\n    EnumTranslation,\n    RecognitionStatus,\n    RequestSession,\n    ServiceRecognizerBase,\n    SynthesisStatus,\n    TranslationHypothesis,\n    TranslationPhrase,\n    TranslationSynthesisEnd,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\n    private privTranslationRecognizer: TranslationRecognizer;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        translationRecognizer: TranslationRecognizer) {\n\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\n        this.privTranslationRecognizer = translationRecognizer;\n\n    }\n\n    protected processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        requestSession: RequestSession,\n        connection: IConnection,\n        successCallback?: (e: TranslationRecognitionResult) => void,\n        errorCallBack?: (e: string) => void): void {\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"translation.hypothesis\":\n\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), requestSession);\n\n                if (!!this.privTranslationRecognizer.recognizing) {\n                    try {\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n\n                break;\n            case \"translation.phrase\":\n                if (this.privRecognizerConfig.isContinuousRecognition) {\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\n                    this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n                }\n\n                const translatedPhrase: TranslationPhrase = TranslationPhrase.fromJSON(connectionMessage.textBody);\n\n                if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\n                    // OK, the recognition was successful. How'd the translation do?\n                    const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, requestSession);\n                    if (!!this.privTranslationRecognizer.recognized) {\n                        try {\n                            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\n                            /* tslint:disable:no-empty */\n                        } catch (error) {\n                            // Not going to let errors in the event handler\n                            // trip things up.\n                        }\n                    }\n\n                    // report result to promise.\n                    if (!!successCallback) {\n                        try {\n                            successCallback(result.result);\n                        } catch (e) {\n                            if (!!errorCallBack) {\n                                errorCallBack(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        successCallback = undefined;\n                        errorCallBack = undefined;\n                    }\n\n                    break;\n                } else {\n                    const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\n\n                    const result = new TranslationRecognitionResult(\n                        undefined,\n                        requestSession.requestId,\n                        reason,\n                        translatedPhrase.Text,\n                        translatedPhrase.Duration,\n                        translatedPhrase.Offset,\n                        undefined,\n                        connectionMessage.textBody,\n                        undefined);\n\n                    if (reason === ResultReason.Canceled) {\n                        const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\n\n                        const ev = new TranslationRecognitionCanceledEventArgs(\n                            requestSession.sessionId,\n                            cancelReason,\n                            null,\n                            cancelReason === CancellationReason.Error ? CancellationErrorCode.ServiceError : CancellationErrorCode.NoError,\n                            result);\n\n                        if (!!this.privTranslationRecognizer.canceled) {\n                            try {\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, ev);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                    } else {\n                        if (!(requestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                            const ev = new TranslationRecognitionEventArgs(result, 0/*offset*/, requestSession.sessionId);\n\n                            if (!!this.privTranslationRecognizer.recognized) {\n                                try {\n                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n                                    /* tslint:disable:no-empty */\n                                } catch (error) {\n                                    // Not going to let errors in the event handler\n                                    // trip things up.\n                                }\n                            }\n                        }\n                    }\n\n                    // report result to promise.\n                    if (!!successCallback) {\n                        try {\n                            successCallback(result);\n                        } catch (e) {\n                            if (!!errorCallBack) {\n                                errorCallBack(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        successCallback = undefined;\n                        errorCallBack = undefined;\n                    }\n                }\n                break;\n\n            case \"translation.synthesis\":\n                this.sendSynthesisAudio(connectionMessage.binaryBody, requestSession.sessionId);\n                break;\n\n            case \"translation.synthesis.end\":\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\n\n                switch (synthEnd.SynthesisStatus) {\n                    case SynthesisStatus.Error:\n                        if (!!this.privTranslationRecognizer.synthesizing) {\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, requestSession.sessionId);\n\n                            try {\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n\n                        if (!!this.privTranslationRecognizer.canceled) {\n                            // And raise a canceled event to send the rich(er) error message back.\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\n                                requestSession.sessionId,\n                                CancellationReason.Error,\n                                synthEnd.FailureReason,\n                                CancellationErrorCode.ServiceError,\n                                null);\n\n                            try {\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                        break;\n                    case SynthesisStatus.Success:\n                        this.sendSynthesisAudio(undefined, requestSession.sessionId);\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string,\n        cancelRecoCallback: (e: SpeechRecognitionResult) => void): void {\n        if (!!this.privTranslationRecognizer.canceled) {\n            const properties: PropertyCollection = new PropertyCollection();\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\n                sessionId,\n                cancellationReason,\n                error,\n                errorCode,\n                undefined);\n\n            try {\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n\n            if (!!cancelRecoCallback) {\n                const result: TranslationRecognitionResult = new TranslationRecognitionResult(\n                    undefined, // Translations\n                    requestId,\n                    ResultReason.Canceled,\n                    undefined, // Text\n                    undefined, // Druation\n                    undefined, // Offset\n                    error,\n                    undefined, // Json\n                    properties);\n                try {\n                    cancelRecoCallback(result);\n                    /* tslint:disable:no-empty */\n                } catch { }\n            }\n        }\n    }\n\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, requestSession: RequestSession): TranslationRecognitionEventArgs {\n        let translations: Translations;\n\n        if (undefined !== serviceResult.Translation.Translations) {\n            translations = new Translations();\n            for (const translation of serviceResult.Translation.Translations) {\n                translations.set(translation.Language, translation.Text);\n            }\n        }\n\n        let resultReason: ResultReason;\n        if (serviceResult instanceof TranslationPhrase) {\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\n                resultReason = ResultReason.TranslatedSpeech;\n            } else {\n                resultReason = ResultReason.RecognizedSpeech;\n            }\n        } else {\n            resultReason = ResultReason.TranslatingSpeech;\n        }\n\n        const result = new TranslationRecognitionResult(\n            translations,\n            requestSession.requestId,\n            resultReason,\n            serviceResult.Text,\n            serviceResult.Duration,\n            serviceResult.Offset,\n            serviceResult.Translation.FailureReason,\n            JSON.stringify(serviceResult),\n            undefined);\n\n        const ev = new TranslationRecognitionEventArgs(result, serviceResult.Offset, requestSession.sessionId);\n        return ev;\n    }\n\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\n        const result = new TranslationSynthesisResult(reason, audio);\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\n\n        if (!!this.privTranslationRecognizer.synthesizing) {\n            try {\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                /* tslint:disable:no-empty */\n            } catch (error) {\n                // Not going to let errors in the event handler\n                // trip things up.\n            }\n        }\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/TranslationServiceRecognizer.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// speech.endDetected\nexport interface ISpeechDetected {\n    Offset: number;\n}\n\nexport class SpeechDetected implements ISpeechDetected {\n    private privSpeechStartDetected: ISpeechDetected;\n\n    private constructor(json: string) {\n        this.privSpeechStartDetected = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): SpeechDetected {\n        return new SpeechDetected(json);\n    }\n\n    public get Offset(): number {\n        return this.privSpeechStartDetected.Offset;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceMessages/SpeechDetected.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// speech.hypothesis\nexport interface ISpeechHypothesis {\n    Text: string;\n    Offset: number;\n    Duration: number;\n}\n\nexport class SpeechHypothesis implements ISpeechHypothesis {\n    private privSpeechHypothesis: ISpeechHypothesis;\n\n    private constructor(json: string) {\n        this.privSpeechHypothesis = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): SpeechHypothesis {\n        return new SpeechHypothesis(json);\n    }\n\n    public get Text(): string {\n        return this.privSpeechHypothesis.Text;\n    }\n\n    public get Offset(): number {\n        return this.privSpeechHypothesis.Offset;\n    }\n\n    public get Duration(): number {\n        return this.privSpeechHypothesis.Duration;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceMessages/SpeechHypothesis.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IAudioSource, IConnection } from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    OutputFormat,\n    PropertyCollection,\n    ResultReason,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult,\n    SpeechRecognizer,\n} from \"../sdk/Exports\";\nimport {\n    CancellationErrorCodePropertyName,\n    DetailedSpeechPhrase,\n    EnumTranslation,\n    OutputFormatPropertyName,\n    RecognitionStatus,\n    RequestSession,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechHypothesis,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\n\n    private privSpeechRecognizer: SpeechRecognizer;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        speechRecognizer: SpeechRecognizer) {\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\n        this.privSpeechRecognizer = speechRecognizer;\n    }\n\n    protected processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        requestSession: RequestSession,\n        connection: IConnection,\n        successCallback?: (e: SpeechRecognitionResult) => void,\n        errorCallBack?: (e: string) => void): void {\n\n        let result: SpeechRecognitionResult;\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.hypothesis\":\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n\n                result = new SpeechRecognitionResult(\n                    requestSession.requestId,\n                    ResultReason.RecognizingSpeech,\n                    hypothesis.Text,\n                    hypothesis.Duration,\n                    hypothesis.Offset + requestSession.currentTurnAudioOffset,\n                    undefined,\n                    connectionMessage.textBody,\n                    undefined);\n\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, requestSession.sessionId);\n\n                if (!!this.privSpeechRecognizer.recognizing) {\n                    try {\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                break;\n            case \"speech.phrase\":\n                // Always send telemetry because we want it to to up for recognize once which will listening to the service\n                // after recognition happens.\n                this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n\n                requestSession.onServiceRecognized(requestSession.currentTurnAudioOffset + simple.Offset);\n\n                if (ResultReason.Canceled === resultReason) {\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n\n                    result = new SpeechRecognitionResult(\n                        requestSession.requestId,\n                        resultReason,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        connectionMessage.textBody,\n                        undefined);\n\n                    if (!!this.privSpeechRecognizer.canceled) {\n                        const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\n                            cancelReason,\n                            undefined,\n                            cancelReason === CancellationReason.Error ? CancellationErrorCode.ServiceError : CancellationErrorCode.NoError,\n                            undefined,\n                            requestSession.sessionId);\n                        try {\n                            this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n                            /* tslint:disable:no-empty */\n                        } catch { }\n                    }\n                } else {\n                    if (!(requestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                            result = new SpeechRecognitionResult(\n                                requestSession.requestId,\n                                resultReason,\n                                simple.DisplayText,\n                                simple.Duration,\n                                simple.Offset + requestSession.currentTurnAudioOffset,\n                                undefined,\n                                connectionMessage.textBody,\n                                undefined);\n                        } else {\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n\n                            result = new SpeechRecognitionResult(\n                                requestSession.requestId,\n                                resultReason,\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\n                                detailed.Duration,\n                                detailed.Offset + requestSession.currentTurnAudioOffset,\n                                undefined,\n                                connectionMessage.textBody,\n                                undefined);\n                        }\n\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, requestSession.sessionId);\n\n                        if (!!this.privSpeechRecognizer.recognized) {\n                            try {\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                    }\n                }\n\n                // report result to promise.\n                if (!!successCallback) {\n                    try {\n                        successCallback(result);\n                    } catch (e) {\n                        if (!!errorCallBack) {\n                            errorCallBack(e);\n                        }\n                    }\n                    // Only invoke the call back once.\n                    // and if it's successful don't invoke the\n                    // error after that.\n                    successCallback = undefined;\n                    errorCallBack = undefined;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string,\n        cancelRecoCallback: (e: SpeechRecognitionResult) => void): void {\n\n        const properties: PropertyCollection = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n        if (!!this.privSpeechRecognizer.canceled) {\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\n                cancellationReason,\n                error,\n                errorCode,\n                undefined,\n                sessionId);\n            try {\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n\n        if (!!cancelRecoCallback) {\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\n                requestId,\n                ResultReason.Canceled,\n                undefined, // Text\n                undefined, // Druation\n                undefined, // Offset\n                error,\n                undefined, // Json\n                properties);\n            try {\n                cancelRecoCallback(result);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/SpeechServiceRecognizer.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionStatus } from \"../Exports\";\n\n// speech.phrase for detailed\nexport interface IDetailedSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    NBest: IPhrase[];\n    Duration?: number;\n    Offset?: number;\n}\n\nexport interface IPhrase {\n    Confidence?: number;\n    Lexical: string;\n    ITN: string;\n    MaskedITN: string;\n    Display: string;\n}\n\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\n\n    private constructor(json: string) {\n        this.privDetailedSpeechPhrase = JSON.parse(json);\n        this.privDetailedSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privDetailedSpeechPhrase.RecognitionStatus];\n    }\n\n    public static fromJSON(json: string): DetailedSpeechPhrase {\n        return new DetailedSpeechPhrase(json);\n    }\n\n    public get RecognitionStatus(): RecognitionStatus {\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\n    }\n    public get NBest(): IPhrase[] {\n        return this.privDetailedSpeechPhrase.NBest;\n    }\n    public get Duration(): number {\n        return this.privDetailedSpeechPhrase.Duration;\n    }\n    public get Offset(): number {\n        return this.privDetailedSpeechPhrase.Offset;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionStatus } from \"../Exports\";\n\n// speech.phrase\nexport interface ISimpleSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    DisplayText: string;\n    Offset?: number;\n    Duration?: number;\n}\n\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\n\n    private constructor(json: string) {\n        this.privSimpleSpeechPhrase = JSON.parse(json);\n        this.privSimpleSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privSimpleSpeechPhrase.RecognitionStatus];\n    }\n\n    public static fromJSON(json: string): SimpleSpeechPhrase {\n        return new SimpleSpeechPhrase(json);\n    }\n\n    public get RecognitionStatus(): RecognitionStatus {\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\n    }\n\n    public get DisplayText(): string {\n        return this.privSimpleSpeechPhrase.DisplayText;\n    }\n\n    public get Offset(): number {\n        return this.privSimpleSpeechPhrase.Offset;\n    }\n\n    public get Duration(): number {\n        return this.privSimpleSpeechPhrase.Duration;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel\";\n\n/**\n * @class AddedLmIntent\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class AddedLmIntent {\n    public modelImpl: LanguageUnderstandingModelImpl;\n    public intentName: string;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param modelImpl - The model.\n     * @param intentName - The intent name.\n     */\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\n        this.modelImpl = modelImpl;\n        this.intentName = intentName;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/AddedLmIntent.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IAudioSource, IConnection } from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    IntentRecognitionCanceledEventArgs,\n    IntentRecognitionEventArgs,\n    IntentRecognitionResult,\n    IntentRecognizer,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SpeechRecognitionResult,\n} from \"../sdk/Exports\";\nimport {\n    AddedLmIntent,\n    CancellationErrorCodePropertyName,\n    EnumTranslation,\n    IntentResponse,\n    RequestSession,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechHypothesis,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\n    private privIntentRecognizer: IntentRecognizer;\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\n    private privIntentDataSent: boolean;\n    private privUmbrellaIntent: AddedLmIntent;\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        recognizer: IntentRecognizer,\n        intentDataSent: boolean) {\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\n        this.privIntentRecognizer = recognizer;\n        this.privIntentDataSent = intentDataSent;\n    }\n\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent; }, umbrellaIntent: AddedLmIntent): void {\n        this.privAddedLmIntents = addedIntents;\n        this.privUmbrellaIntent = umbrellaIntent;\n    }\n\n    protected processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        requestSession: RequestSession,\n        connection: IConnection,\n        successCallback?: (e: IntentRecognitionResult) => void,\n        errorCallBack?: (e: string) => void): void {\n\n        let result: IntentRecognitionResult;\n        let ev: IntentRecognitionEventArgs;\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.hypothesis\":\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n\n                result = new IntentRecognitionResult(\n                    undefined,\n                    requestSession.requestId,\n                    ResultReason.RecognizingIntent,\n                    speechHypothesis.Text,\n                    speechHypothesis.Duration,\n                    speechHypothesis.Offset + requestSession.currentTurnAudioOffset,\n                    undefined,\n                    connectionMessage.textBody,\n                    undefined);\n\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + requestSession.currentTurnAudioOffset, requestSession.sessionId);\n\n                if (!!this.privIntentRecognizer.recognizing) {\n                    try {\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n\n                break;\n            case \"speech.phrase\":\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n\n                result = new IntentRecognitionResult(\n                    undefined,\n                    requestSession.requestId,\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\n                    simple.DisplayText,\n                    simple.Duration,\n                    simple.Offset + requestSession.currentTurnAudioOffset,\n                    undefined,\n                    connectionMessage.textBody,\n                    undefined);\n\n                ev = new IntentRecognitionEventArgs(result, result.offset + requestSession.currentTurnAudioOffset, requestSession.sessionId);\n\n                const sendEvent: () => void = () => {\n                    if (this.privRecognizerConfig.isContinuousRecognition) {\n                        // For continuous recognition telemetry has to be sent for every phrase as per spec.\n                        this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n                    }\n\n                    if (!!this.privIntentRecognizer.recognized) {\n                        try {\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n                            /* tslint:disable:no-empty */\n                        } catch (error) {\n                            // Not going to let errors in the event handler\n                            // trip things up.\n                        }\n                    }\n\n                    // report result to promise.\n                    if (!!successCallback) {\n                        try {\n                            successCallback(result);\n                        } catch (e) {\n                            if (!!errorCallBack) {\n                                errorCallBack(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        successCallback = undefined;\n                        errorCallBack = undefined;\n                    }\n                };\n\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\n                // If no intent data was sent, the terminal event is speech recognition being successful.\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\n                    sendEvent();\n                } else {\n                    // Squirrel away the args, when the response event arrives it will build upon them\n                    // and then return\n                    this.privPendingIntentArgs = ev;\n                }\n\n                break;\n            case \"response\":\n                // Response from LUIS\n                if (this.privRecognizerConfig.isContinuousRecognition) {\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\n                    this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n                }\n\n                ev = this.privPendingIntentArgs;\n                this.privPendingIntentArgs = undefined;\n\n                if (undefined === ev) {\n                    if (\"\" === connectionMessage.textBody) {\n                        // This condition happens if there is nothing but silence in the\n                        // audio sent to the service.\n                        return;\n                    }\n\n                    // Odd... Not sure this can happen\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0 /*TODO*/, requestSession.sessionId);\n                }\n\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\n\n                // If LUIS didn't return anything, send the existing event, else\n                // modify it to show the match.\n                // See if the intent found is in the list of intents asked for.\n                let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\n\n                if (this.privUmbrellaIntent !== undefined) {\n                    addedIntent = this.privUmbrellaIntent;\n                }\n\n                if (null !== intentResponse && addedIntent !== undefined) {\n                    const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\n                    let reason = ev.result.reason;\n\n                    if (undefined !== intentId) {\n                        reason = ResultReason.RecognizedIntent;\n                    }\n\n                    // make sure, properties is set.\n                    const properties = (undefined !== ev.result.properties) ?\n                        ev.result.properties : new PropertyCollection();\n\n                    properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\n\n                    ev = new IntentRecognitionEventArgs(\n                        new IntentRecognitionResult(\n                            intentId,\n                            ev.result.resultId,\n                            reason,\n                            ev.result.text,\n                            ev.result.duration,\n                            ev.result.offset + requestSession.currentTurnAudioOffset,\n                            ev.result.errorDetails,\n                            ev.result.json,\n                            properties),\n                        ev.offset + requestSession.currentTurnAudioOffset,\n                        ev.sessionId);\n                }\n\n                if (!!this.privIntentRecognizer.recognized) {\n                    try {\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n\n                // report result to promise.\n                if (!!successCallback) {\n                    try {\n                        successCallback(ev.result);\n                    } catch (e) {\n                        if (!!errorCallBack) {\n                            errorCallBack(e);\n                        }\n                    }\n                    // Only invoke the call back once.\n                    // and if it's successful don't invoke the\n                    // error after that.\n                    successCallback = undefined;\n                    errorCallBack = undefined;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string,\n        cancelRecoCallback: (e: SpeechRecognitionResult) => void): void {\n\n        if (!!this.privIntentRecognizer.canceled) {\n            const properties: PropertyCollection = new PropertyCollection();\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\n                cancellationReason,\n                error,\n                errorCode,\n                undefined,\n                undefined,\n                sessionId);\n            try {\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n\n            if (!!cancelRecoCallback) {\n                const result: IntentRecognitionResult = new IntentRecognitionResult(\n                    undefined, // Intent Id\n                    requestId,\n                    ResultReason.Canceled,\n                    undefined, // Text\n                    undefined, // Druation\n                    undefined, // Offset\n                    error,\n                    undefined, // Json\n                    properties);\n                try {\n                    cancelRecoCallback(result);\n                    /* tslint:disable:no-empty */\n                } catch { }\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/IntentServiceRecognizer.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// response\n\nexport interface IIntentResponse {\n    query: string;\n    topScoringIntent: ISingleIntent;\n    entities: IIntentEntity[];\n}\n\nexport interface IIntentEntity {\n    entity: string;\n    type: string;\n    startIndex: number;\n    endIndex: number;\n    score: number;\n}\n\nexport interface ISingleIntent {\n    intent: string;\n    score: number;\n}\n\nexport class IntentResponse implements IIntentResponse {\n    private privIntentResponse: IIntentResponse;\n\n    private constructor(json: string) {\n        this.privIntentResponse = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): IntentResponse {\n        return new IntentResponse(json);\n    }\n\n    public get query(): string {\n        return this.privIntentResponse.query;\n    }\n\n    public get topScoringIntent(): ISingleIntent {\n        return this.privIntentResponse.topScoringIntent;\n    }\n\n    public get entities(): IIntentEntity[] {\n        return this.privIntentResponse.entities;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceMessages/IntentResponse.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport {\n    createNoDashGuid,\n    Deferred,\n    Events,\n    IAudioStreamNode,\n    IDetachable,\n    IEventSource,\n    PlatformEvent,\n    Promise,\n} from \"../common/Exports\";\nimport {\n    ConnectingToServiceEvent,\n    ListeningStartedEvent,\n    RecognitionStartedEvent,\n    RecognitionTriggeredEvent,\n    SpeechRecognitionEvent,\n} from \"./RecognitionEvents\";\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\n\nexport class RequestSession {\n    private privIsDisposed: boolean = false;\n    private privServiceTelemetryListener: ServiceTelemetryListener;\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\n    private privRequestId: string;\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n    private privAudioNode: ReplayableAudioNode;\n    private privAuthFetchEventId: string;\n    private privIsAudioNodeDetached: boolean = false;\n    private privIsCompleted: boolean = false;\n    private privRequestCompletionDeferral: Deferred<boolean>;\n    private privIsSpeechEnded: boolean = false;\n    private privIsCanceled: boolean = false;\n    private privContextJson: string;\n    private privTurnStartAudioOffset: number = 0;\n    private privLastRecoOffset: number = 0;\n\n    protected privSessionId: string;\n\n    constructor(audioSourceId: string, contextJson: string) {\n        this.privAudioSourceId = audioSourceId;\n        this.privRequestId = createNoDashGuid();\n        this.privAudioNodeId = createNoDashGuid();\n        this.privRequestCompletionDeferral = new Deferred<boolean>();\n        this.privContextJson = contextJson;\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\n\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n    }\n\n    public get contextJson(): string {\n        return this.privContextJson;\n    }\n\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n\n    public get completionPromise(): Promise<boolean> {\n        return this.privRequestCompletionDeferral.promise();\n    }\n\n    public get isSpeechEnded(): boolean {\n        return this.privIsSpeechEnded;\n    }\n\n    public get isCompleted(): boolean {\n        return this.privIsCompleted;\n    }\n\n    public get isCanceled(): boolean {\n        return this.privIsCanceled;\n    }\n\n    public get currentTurnAudioOffset(): number {\n        return this.privTurnStartAudioOffset;\n    }\n\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\n        this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\n    }\n\n    public onAudioSourceAttachCompleted = (audioNode: ReplayableAudioNode, isError: boolean, error?: string): void => {\n        this.privAudioNode = audioNode;\n\n        if (isError) {\n            this.onComplete();\n        } else {\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n        }\n    }\n\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\n        this.privAuthFetchEventId = authFetchEventId;\n        this.privSessionId = connectionId;\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\n    }\n\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\n        if (isError) {\n            this.onComplete();\n        }\n    }\n\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\n        if (statusCode === 200) {\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\n            this.privAudioNode.replay();\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\n            return;\n        } else if (statusCode === 403) {\n            this.onComplete();\n        } else {\n            this.onComplete();\n        }\n    }\n\n    public onServiceTurnEndResponse = (continuousRecognition: boolean): void => {\n        if (!continuousRecognition || this.isSpeechEnded) {\n            this.onComplete();\n        } else {\n            // Start a new request set.\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\n            this.privRequestId = createNoDashGuid();\n            this.privAudioNode.replay();\n        }\n    }\n\n    public onServiceRecognized(offset: number): void {\n        this.privLastRecoOffset = offset;\n        this.privAudioNode.shrinkBuffers(offset);\n    }\n\n    public dispose = (error?: string): void => {\n        if (!this.privIsDisposed) {\n            // we should have completed by now. If we did not its an unknown error.\n            this.privIsDisposed = true;\n            for (const detachable of this.privDetachables) {\n                detachable.detach();\n            }\n\n            this.privServiceTelemetryListener.dispose();\n        }\n    }\n\n    public getTelemetry = (): string => {\n        return this.privServiceTelemetryListener.getTelemetry();\n    }\n\n    public onCancelled(): void {\n        this.privIsCanceled = true;\n    }\n\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\n    public onSpeechEnded(): void {\n        this.privIsSpeechEnded = true;\n    }\n\n    protected onEvent = (event: SpeechRecognitionEvent): void => {\n        this.privServiceTelemetryListener.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private onComplete = (): void => {\n        if (!this.privIsCompleted) {\n            this.privIsCompleted = true;\n            this.detachAudioNode();\n        }\n    }\n\n    private detachAudioNode = (): void => {\n        if (!this.privIsAudioNodeDetached) {\n            this.privIsAudioNodeDetached = true;\n            if (this.privAudioNode) {\n                this.privAudioNode.detach();\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/RequestSession.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    AudioSourceErrorEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEstablishErrorEvent,\n    ConnectionMessageReceivedEvent,\n    ConnectionStartEvent,\n    IEventListener,\n    IStringDictionary,\n    PlatformEvent,\n} from \"../common/Exports\";\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\n\ninterface ITelemetry {\n    Metrics: IMetric[];\n    ReceivedMessages: IStringDictionary<string[]>;\n}\n\n// tslint:disable-next-line:max-classes-per-file\ninterface IMetric {\n    End: string;\n    Error?: string;\n    Id?: string;\n    Name: string;\n    Start: string;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\n    private privIsDisposed: boolean = false;\n\n    private privRequestId: string;\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n\n    private privListeningTriggerMetric: IMetric = null;\n    private privMicMetric: IMetric = null;\n    private privConnectionEstablishMetric: IMetric = null;\n\n    private privMicStartTime: string;\n\n    private privConnectionId: string;\n    private privConnectionStartTime: string;\n\n    private privReceivedMessages: IStringDictionary<string[]>;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        this.privRequestId = requestId;\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n\n        this.privReceivedMessages = {};\n    }\n\n    public onEvent = (e: PlatformEvent): void => {\n        if (this.privIsDisposed) {\n            return;\n        }\n\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\n            this.privListeningTriggerMetric = {\n                End: e.eventTime,\n                Name: \"ListeningTrigger\",\n                Start: e.eventTime,\n            };\n        }\n\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            this.privMicStartTime = e.eventTime;\n        }\n\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            this.privMicStartTime = e.eventTime;\n        }\n\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\n            if (!this.privMicMetric) {\n                this.privMicMetric = {\n                    End: e.eventTime,\n                    Error: e.error,\n                    Name: \"Microphone\",\n                    Start: this.privMicStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            if (!this.privMicMetric) {\n                this.privMicMetric = {\n                    End: e.eventTime,\n                    Error: e.error,\n                    Name: \"Microphone\",\n                    Start: this.privMicStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            if (!this.privMicMetric) {\n                this.privMicMetric = {\n                    End: e.eventTime,\n                    Name: \"Microphone\",\n                    Start: this.privMicStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\n            this.privConnectionId = e.sessionId;\n        }\n\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\n            this.privConnectionStartTime = e.eventTime;\n        }\n\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\n            if (!this.privConnectionEstablishMetric) {\n                this.privConnectionEstablishMetric = {\n                    End: e.eventTime,\n                    Id: this.privConnectionId,\n                    Name: \"Connection\",\n                    Start: this.privConnectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\n            if (!this.privConnectionEstablishMetric) {\n                this.privConnectionEstablishMetric = {\n                    End: e.eventTime,\n                    Error: this.getConnectionError(e.statusCode),\n                    Id: this.privConnectionId,\n                    Name: \"Connection\",\n                    Start: this.privConnectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\n            if (e.message && e.message.headers && e.message.headers.path) {\n                if (!this.privReceivedMessages[e.message.headers.path]) {\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\n                }\n\n                this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\n            }\n        }\n    }\n\n    public getTelemetry = (): string => {\n        const metrics = new Array<IMetric>();\n\n        if (this.privListeningTriggerMetric) {\n            metrics.push(this.privListeningTriggerMetric);\n        }\n\n        if (this.privMicMetric) {\n            metrics.push(this.privMicMetric);\n        }\n\n        if (this.privConnectionEstablishMetric) {\n            metrics.push(this.privConnectionEstablishMetric);\n        }\n\n        const telemetry: ITelemetry = {\n            Metrics: metrics,\n            ReceivedMessages: this.privReceivedMessages,\n        };\n\n        const json = JSON.stringify(telemetry);\n\n        // We dont want to send the same telemetry again. So clean those out.\n        this.privReceivedMessages = {};\n        this.privListeningTriggerMetric = null;\n        this.privMicMetric = null;\n        this.privConnectionEstablishMetric = null;\n\n        return json;\n    }\n\n    public dispose = (): void => {\n        this.privIsDisposed = true;\n    }\n\n    private getConnectionError = (statusCode: number): string => {\n        /*\n        -- Websocket status codes --\n        NormalClosure = 1000,\n        EndpointUnavailable = 1001,\n        ProtocolError = 1002,\n        InvalidMessageType = 1003,\n        Empty = 1005,\n        InvalidPayloadData = 1007,\n        PolicyViolation = 1008,\n        MessageTooBig = 1009,\n        MandatoryExtension = 1010,\n        InternalServerError = 1011\n        */\n\n        switch (statusCode) {\n            case 400:\n            case 1002:\n            case 1003:\n            case 1005:\n            case 1007:\n            case 1008:\n            case 1009: return \"BadRequest\";\n            case 401: return \"Unauthorized\";\n            case 403: return \"Forbidden\";\n            case 503:\n            case 1001: return \"ServerUnavailable\";\n            case 500:\n            case 1011: return \"ServerError\";\n            case 408:\n            case 504: return \"Timeout\";\n            default: return \"statuscode:\" + statusCode.toString();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/common.speech/ServiceTelemetryListener.Internal.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { OutputFormat, PropertyCollection, PropertyId, SpeechConfig } from \"./Exports\";\n\n/**\n * Speech translation configuration.\n * @class SpeechTranslationConfig\n */\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\n\n    /**\n     * Creates an instance of recognizer config.\n     */\n    protected constructor() {\n        super();\n    }\n\n    /**\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\n     * @member SpeechTranslationConfig.fromSubscription\n     * @function\n     * @public\n     * @param {string} subscriptionKey - The subscription key.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechTranslationConfig} The speech translation config.\n     */\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return ret;\n    }\n\n    /**\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\n     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\n     *      will encounter errors during recognition.\n     * @member SpeechTranslationConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param {string} authorizationToken - The authorization token.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechTranslationConfig} The speech translation config.\n     */\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return ret;\n    }\n\n    /**\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\n     *       set by any other APIs. For example, if language is defined in the uri as query parameter\n     *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\n     *       setting in uri takes precedence, and the effective language is \"de-DE\".\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\n     * @member SpeechTranslationConfig.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} endpoint - The service endpoint to connect to.\n     * @param {string} subscriptionKey - The subscription key.\n     * @returns {SpeechTranslationConfig} A speech config instance.\n     */\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\n        Contracts.throwIfNull(endpoint, \"endpoint\");\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        return ret;\n    }\n\n    /**\n     * Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfig.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set authorizationToken(value: string);\n\n    /**\n     * Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set speechRecognitionLanguage(value: string);\n\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public abstract addTargetLanguage(value: string): void;\n\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfig.prototype.targetLanguages\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public abstract get targetLanguages(): string[];\n\n    /**\n     * Returns the selected voice name.\n     * @member SpeechTranslationConfig.prototype.voiceName\n     * @function\n     * @public\n     * @returns {string} The voice name.\n     */\n    public abstract get voiceName(): string;\n\n    /**\n     * Sets voice of the translated language, enable voice synthesis output.\n     * @member SpeechTranslationConfig.prototype.voiceName\n     * @function\n     * @public\n     * @param {string} value - The name of the voice.\n     */\n    public abstract set voiceName(value: string);\n\n    /**\n     * Sets a named property as value\n     * @member SpeechTranslationConfig.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} value - The value.\n     */\n    public abstract setProperty(name: string, value: string): void;\n\n    /**\n     * Dispose of associated resources.\n     * @member SpeechTranslationConfig.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * @private\n * @class SpeechTranslationConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\n    private privSpeechProperties: PropertyCollection;\n\n    public constructor() {\n        super();\n        this.privSpeechProperties = new PropertyCollection();\n        this.outputFormat = OutputFormat.Simple;\n    }\n    /**\n     * Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public set authorizationToken(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    /**\n     * Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public set speechRecognitionLanguage(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\n     * @function\n     * @public\n     */\n    public get subscriptionKey(): string {\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n    public get outputFormat(): OutputFormat {\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n    public set outputFormat(value: OutputFormat) {\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n    public set endpointId(value: string) {\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, value);\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n    public get endpointId(): string {\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\n    }\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public addTargetLanguage(value: string): void {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        const languages: string[] = this.targetLanguages;\n        languages.push(value);\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n    }\n\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public get targetLanguages(): string[] {\n\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n        } else {\n            return [];\n        }\n\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     */\n    public get voiceName(): string {\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n\n    /**\n     * Sets voice of the translated language, enable voice synthesis output.\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     * @param {string} value - The name of the voice.\n     */\n    public set voiceName(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\n    }\n\n    /**\n     * Provides the region.\n     * @member SpeechTranslationConfigImpl.prototype.region\n     * @function\n     * @public\n     * @returns {string} The region.\n     */\n    public get region(): string {\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\n    }\n\n    /**\n     * Allows for setting arbitrary properties.\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} value - The value of the property.\n     */\n    public setProperty(name: string, value: string): void {\n        this.privSpeechProperties.setProperty(name, value);\n    }\n\n    /**\n     * Allows for retrieving arbitrary property values.\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} def - The default value of the property in case it is not set.\n     * @returns {string} The value of the property.\n     */\n    public getProperty(name: string, def?: string): string {\n        return this.privSpeechProperties.getProperty(name, def);\n    }\n\n    /**\n     * Provides access to custom properties.\n     * @member SpeechTranslationConfigImpl.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The properties.\n     */\n    public get properties(): PropertyCollection {\n        return this.privSpeechProperties;\n    }\n\n    /**\n     * Dispose of associated resources.\n     * @member SpeechTranslationConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        return;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/SpeechTranslationConfig.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyId } from \"./Exports\";\n\n/**\n * Represents collection of properties and their values.\n * @class PropertyCollection\n */\nexport class PropertyCollection {\n    private privKeys: string[] = [] as string[];\n    private privValues: string[] = [] as string[];\n\n    /**\n     * Returns the property value in type String. The parameter must have the same type as String.\n     * Currently only String, int and bool are allowed.\n     * If the name is not available, the specified defaultValue is returned.\n     * @member PropertyCollection.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} def - The default value which is returned if the parameter\n     *        is not available in the collection.\n     * @returns {string} value of the parameter.\n     */\n    public getProperty(key: PropertyId | string, def?: string): string {\n        let keyToUse: string;\n\n        if (typeof key === \"string\") {\n            keyToUse = key;\n        } else {\n            keyToUse = PropertyId[key];\n        }\n\n        for (let n = 0; n < this.privKeys.length; n++) {\n            if (this.privKeys[n] === keyToUse) {\n                return this.privValues[n];\n            }\n        }\n\n        return def;\n    }\n\n    /**\n     * Sets the String value of the parameter specified by name.\n     * @member PropertyCollection.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} value - The value of the parameter.\n     */\n    public setProperty(key: string | PropertyId, value: string): void {\n        let keyToUse: string;\n\n        if (typeof key === \"string\") {\n            keyToUse = key;\n        } else {\n            keyToUse = PropertyId[key];\n        }\n\n        for (let n = 0; n < this.privKeys.length; n++) {\n            if (this.privKeys[n] === keyToUse) {\n                this.privValues[n] = value;\n                return;\n            }\n        }\n\n        this.privKeys.push(keyToUse);\n        this.privValues.push(value);\n    }\n\n    /**\n     * Clones the collection.\n     * @member PropertyCollection.prototype.clone\n     * @function\n     * @public\n     * @returns {PropertyCollection} A copy of the collection.\n     */\n    public clone(): PropertyCollection {\n        const clonedMap = new PropertyCollection();\n\n        for (let n = 0; n < this.privKeys.length; n++) {\n            clonedMap.privKeys.push(this.privKeys[n]);\n            clonedMap.privValues.push(this.privValues[n]);\n        }\n\n        return clonedMap;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/PropertyCollection.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines speech property ids.\n * @class PropertyId\n */\nexport enum PropertyId {\n\n    /**\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to specify\n     * to specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\n     * have to use this property directly.\n     * Instead, use @see SpeechConfig.fromSubscription.\n     * @member PropertyId.SpeechServiceConnection_Key\n     */\n    SpeechServiceConnection_Key = 0,\n\n    /**\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\n     * have to use this property directly.\n     * Instead, use @see SpeechConfig.fromEndpoint.\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\n     * @member PropertyId.SpeechServiceConnection_Endpoint\n     */\n    SpeechServiceConnection_Endpoint,\n\n    /**\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\n     * use this property directly.\n     * Instead, use @see SpeechConfig.fromSubscription, @see SpeechConfig.fromEndpoint, @see SpeechConfig.fromAuthorizationToken.\n     * @member PropertyId.SpeechServiceConnection_Region\n     */\n    SpeechServiceConnection_Region,\n\n    /**\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\n     * you shouldn't have to use this property directly.\n     * Instead, use @see SpeechConfig.fromAuthorizationToken,\n     * @see SpeechRecognizer.setAuthorizationToken, @see IntentRecognizer.setAuthorizationToken, @see TranslationRecognizer.setAuthorizationToken.\n     * @member PropertyId.SpeechServiceAuthorization_Token\n     */\n    SpeechServiceAuthorization_Token,\n\n    /**\n     * The Cognitive Services Speech Service authorization type. Currently unused.\n     * @member PropertyId.SpeechServiceAuthorization_Type\n     */\n    SpeechServiceAuthorization_Type,\n\n    /**\n     * The Cognitive Services Custom Speech Service endpoint id. Under normal circumstances, you shouldn't\n     * have to use this property directly.\n     * Instead, use @see SpeechConfig.setEndpointId.\n     * NOTE: The endpoint id is available in the Custom Speech Portal, listed under Endpoint Details.\n     * @member PropertyId.SpeechServiceConnection_EndpointId\n     */\n    SpeechServiceConnection_EndpointId,\n\n    /**\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\n     * you shouldn't have to use this property directly.\n     * Instead use @see SpeechTranslationConfig.addTargetLanguage,\n     * @see SpeechTranslationConfig.getTargetLanguages, @see TranslationRecognizer.getTargetLanguages.\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\n     */\n    SpeechServiceConnection_TranslationToLanguages,\n\n    /**\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\n     * property directly.\n     * Instead, use @see SpeechTranslationConfig.setVoiceName.\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\n     */\n    SpeechServiceConnection_TranslationVoice,\n\n    /**\n     * Translation features.\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\n     */\n    SpeechServiceConnection_TranslationFeatures,\n\n    /**\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\n     * Instead, use @see LanguageUnderstandingModel.\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\n     */\n    SpeechServiceConnection_IntentRegion,\n\n    /**\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\n     * This property is intended to be read-only. The SDK is using it internally.\n     * @member PropertyId.SpeechServiceConnection_RecoMode\n     */\n    SpeechServiceConnection_RecoMode,\n\n    /**\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\n     * directly.\n     * Instead, use @see SpeechConfig.setSpeechRecognitionLanguage.\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\n     */\n    SpeechServiceConnection_RecoLanguage,\n\n    /**\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\n     * property directly.\n     * Instead use @see SessionEventArgs.sessionId.\n     * @member PropertyId.Speech_SessionId\n     */\n    Speech_SessionId,\n\n    /**\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\n     * to use this property directly.\n     * Instead use @see SpeechConfig.setOutputFormat.\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\n     */\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\n\n    /**\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\n     */\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\n\n    /**\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\n     * @member PropertyId.SpeechServiceResponse_JsonResult\n     */\n    SpeechServiceResponse_JsonResult,\n\n    /**\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\n     * use this property directly. Instead use @see CancellationDetails.getErrorDetails.\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\n     */\n    SpeechServiceResponse_JsonErrorDetails,\n\n    /**\n     * The cancellation reason. Currently unused.\n     * @member PropertyId.CancellationDetails_Reason\n     */\n    CancellationDetails_Reason,\n\n    /**\n     * The cancellation text. Currently unused.\n     * @member PropertyId.CancellationDetails_ReasonText\n     */\n    CancellationDetails_ReasonText,\n\n    /**\n     * The Cancellation detailed text. Currently unused.\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\n     */\n    CancellationDetails_ReasonDetailedText,\n\n    /**\n     * The Language Understanding Service response output (in JSON format). Available via @see IntentRecognitionResult.Properties.\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\n     */\n    LanguageUnderstandingServiceResponse_JsonResult,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/PropertyId.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    CognitiveSubscriptionKeyAuthentication,\n    CognitiveTokenAuthentication,\n    Context,\n    IAuthentication,\n    IConnectionFactory,\n    OS,\n    PlatformConfig,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n} from \"../common.speech/Exports\";\nimport { Promise, PromiseHelper } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    PropertyCollection,\n    PropertyId,\n    RecognitionEventArgs,\n    SessionEventArgs,\n    SpeechRecognitionResult,\n} from \"./Exports\";\n\n/**\n * Defines the base class Recognizer which mainly contains common event handlers.\n * @class Recognizer\n */\nexport abstract class Recognizer {\n    private privDisposed: boolean;\n    protected audioConfig: AudioConfig;\n\n    /**\n     * Creates and initializes an instance of a Recognizer\n     * @constructor\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\n     */\n    protected constructor(audioConfig: AudioConfig) {\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\n\n        this.privDisposed = false;\n    }\n\n    /**\n     * Defines event handler for session started events.\n     * @member Recognizer.prototype.sessionStarted\n     * @function\n     * @public\n     */\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for session stopped events.\n     * @member Recognizer.prototype.sessionStopped\n     * @function\n     * @public\n     */\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for speech started events.\n     * @member Recognizer.prototype.speechStartDetected\n     * @function\n     * @public\n     */\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\n\n    /**\n     * Defines event handler for speech stopped events.\n     * @member Recognizer.prototype.speechEndDetected\n     * @function\n     * @public\n     */\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\n\n    /**\n     * Dispose of associated resources.\n     * @member Recognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        Contracts.throwIfDisposed(this.privDisposed);\n\n        this.dispose(true);\n    }\n\n    /**\n     * This method performs cleanup of resources.\n     * The Boolean parameter disposing indicates whether the method is called\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n     * Derived classes should override this method to dispose resource if needed.\n     * @member Recognizer.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - Flag to request disposal.\n     */\n    protected dispose(disposing: boolean): void {\n        if (this.privDisposed) {\n            return;\n        }\n\n        if (disposing) {\n            // disconnect\n        }\n\n        this.privDisposed = true;\n    }\n\n    /**\n     * This method returns the current state of the telemetry setting.\n     * @member Recognizer.prototype.telemetryEnabled\n     * @function\n     * @public\n     * @returns true if the telemetry is enabled, false otherwise.\n     */\n    public static get telemetryEnabled(): boolean {\n        return ServiceRecognizerBase.telemetryDataEnabled;\n    }\n\n    /**\n     * This method globally enables or disables telemetry.\n     * @member Recognizer.prototype.enableTelemetry\n     * @function\n     * @public\n     * @param enabled - Global setting for telemetry collection.\n     * If set to true, telemetry information like microphone errors,\n     * recognition errors are collected and sent to Microsoft.\n     * If set to false, no telemetry is sent to Microsoft.\n     */\n    /* tslint:disable:member-ordering */\n    public static enableTelemetry(enabled: boolean): void {\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\n    }\n\n    //\n    // ################################################################################################################\n    // IMPLEMENTATION.\n    // Move to independent class\n    // ################################################################################################################\n    //\n\n    protected abstract createRecognizerConfig(speecgConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig;\n\n    protected abstract createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory,\n                                               audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\n\n    // Setup the recognizer\n    protected implRecognizerSetup(recognitionMode: RecognitionMode, speechProperties: PropertyCollection,\n                                  audioConfig: AudioConfig, speechConnectionFactory: IConnectionFactory): ServiceRecognizerBase {\n\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\n        let osName = \"unknown\";\n        let osVersion = \"unknown\";\n\n        if (typeof navigator !== \"undefined\") {\n            osPlatform = osPlatform  + \"/\" + navigator.platform;\n            osName = navigator.userAgent;\n            osVersion = navigator.appVersion;\n        }\n\n        const recognizerConfig = this.createRecognizerConfig(\n            new PlatformConfig(\n                new Context(new OS(osPlatform, osName, osVersion))),\n            recognitionMode); // SDK.SpeechResultFormat.Simple (Options - Simple/Detailed)\n\n        const subscriptionKey = speechProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n        const authentication = subscriptionKey ?\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\n            new CognitiveTokenAuthentication(\n                (authFetchEventId: string): Promise<string> => {\n                    const authorizationToken = speechProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n                    return PromiseHelper.fromResult(authorizationToken);\n                },\n                (authFetchEventId: string): Promise<string> => {\n                    const authorizationToken = speechProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n                    return PromiseHelper.fromResult(authorizationToken);\n                });\n\n        return this.createServiceRecognizer(\n            authentication,\n            speechConnectionFactory,\n            audioConfig,\n            recognizerConfig);\n    }\n\n    // Start the recognition\n    protected implRecognizerStart(\n        recognizer: ServiceRecognizerBase,\n        successCallback: (e: SpeechRecognitionResult) => void,\n        errorCallback: (e: string) => void,\n        speechContext?: string,\n    ): void {\n        recognizer.recognize(speechContext, successCallback, errorCallback).on(\n            /* tslint:disable:no-empty */\n            (result: boolean): void => { },\n            (error: string): void => {\n                if (!!errorCallback) {\n                    // Internal error with service communication.\n                    errorCallback(\"Runtime error: \" + error);\n                }\n            });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/Recognizer.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    OutputFormatPropertyName,\n    PlatformConfig,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceRecognizer,\n} from \"../common.speech/Exports\";\nimport { SpeechConnectionFactory } from \"../common.speech/SpeechConnectionFactory\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    KeywordRecognitionModel,\n    OutputFormat,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult,\n} from \"./Exports\";\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\n * @class SpeechRecognizer\n */\nexport class SpeechRecognizer extends Recognizer {\n    private privDisposedSpeechRecognizer: boolean = false;\n    private privProperties: PropertyCollection;\n\n    /**\n     * SpeechRecognizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n     */\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\n        super(audioConfig);\n\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n        this.privProperties = speechConfigImpl.properties.clone();\n\n        Contracts.throwIfNullOrWhitespace(\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member SpeechRecognizer.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member SpeechRecognizer.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member SpeechRecognizer.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\n\n    /**\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\n     * @member SpeechRecognizer.prototype.endpointId\n     * @function\n     * @public\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\n     */\n    public get endpointId(): string {\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n    }\n\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets the spoken language of recognition.\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} The spoken language of recognition.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * Gets the output format of recognition.\n     * @member SpeechRecognizer.prototype.outputFormat\n     * @function\n     * @public\n     * @returns {OutputFormat} The output format of recognition.\n     */\n    public get outputFormat(): OutputFormat {\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\n            return OutputFormat.Simple;\n        } else {\n            return OutputFormat.Detailed;\n        }\n    }\n\n    /**\n     * The collection of properties and their values defined for this SpeechRecognizer.\n     * @member SpeechRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Starts speech recognition, and stops after the first utterance is recognized.\n     * The task returns the recognition text as result.\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n     *       so it is suitable only for single shot recognition\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the SpeechRecognitionResult.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Interactive,\n                this.properties,\n                this.audioConfig,\n                new SpeechConnectionFactory());\n\n            this.implRecognizerStart(this.privReco, (e: SpeechRecognitionResult) => {\n                this.implCloseExistingRecognizer();\n                if (!!cb) {\n                    cb(e);\n                }\n            }, (e: string) => {\n                this.implCloseExistingRecognizer();\n                if (!!err) {\n                    err(e);\n                }\n            });\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Conversation,\n                this.properties,\n                this.audioConfig,\n                new SpeechConnectionFactory());\n\n            this.implRecognizerStart(this.privReco, undefined, undefined);\n\n            // report result to promise.\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n                cb = undefined;\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Stops continuous speech recognition.\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts speech recognition with keyword spotting, until\n     * stopKeywordRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * Note: Key word spotting functionality is only available on the\n     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\n     *        specifies the keyword to be recognized.\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\n        Contracts.throwIfNull(model, \"model\");\n\n        if (!!err) {\n            err(\"Not yet implemented.\");\n        }\n    }\n\n    /**\n     * Stops continuous speech recognition.\n     * Note: Key word spotting functionality is only available on the\n     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        if (!!cb) {\n            cb();\n        }\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member SpeechRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n        this.dispose(true);\n    }\n\n    /**\n     * Disposes any resources held by the object.\n     * @member SpeechRecognizer.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - true if disposing the object.\n     */\n    protected dispose(disposing: boolean): void {\n        if (this.privDisposedSpeechRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.implCloseExistingRecognizer();\n            this.privDisposedSpeechRecognizer = true;\n        }\n\n        super.dispose(disposing);\n    }\n\n    protected createRecognizerConfig(speechConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\n        return new RecognizerConfig(\n            speechConfig,\n            recognitionMode,\n            this.properties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n\n    // tslint:disable-next-line:member-ordering\n    private privReco: ServiceRecognizerBase;\n\n    private implCloseExistingRecognizer(): void {\n        if (this.privReco) {\n            this.privReco.audioSource.turnOff();\n            this.privReco.dispose();\n            this.privReco = undefined;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/SpeechRecognizer.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    AddedLmIntent,\n    IAuthentication,\n    IConnectionFactory,\n    IntentConnectionFactory,\n    IntentServiceRecognizer,\n    PlatformConfig,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n} from \"../common.speech/Exports\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    IntentRecognitionCanceledEventArgs,\n    IntentRecognitionEventArgs,\n    IntentRecognitionResult,\n    KeywordRecognitionModel,\n    LanguageUnderstandingModel,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    SpeechConfig,\n} from \"./Exports\";\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Intent recognizer.\n * @class\n */\nexport class IntentRecognizer extends Recognizer {\n    private privDisposedIntentRecognizer: boolean;\n    private privProperties: PropertyCollection;\n    private privReco: ServiceRecognizerBase;\n\n    private privAddedIntents: string[][];\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\n    private privIntentDataSent: boolean;\n    private privUmbrellaIntent: AddedLmIntent;\n\n    /**\n     * Initializes an instance of the IntentRecognizer.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n     */\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n\n        super(audioConfig);\n        this.privIntentDataSent = false;\n        this.privAddedIntents = [];\n        this.privAddedLmIntents = {};\n\n        this.privDisposedIntentRecognizer = false;\n        this.privProperties = configImpl.properties;\n\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member IntentRecognizer.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member IntentRecognizer.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member IntentRecognizer.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\n\n    /**\n     * Gets the spoken language of recognition.\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} the spoken language of recognition.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member IntentRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\n     * @member IntentRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    public set authorizationToken(value: string) {\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    /**\n     * The collection of properties and their values defined for this IntentRecognizer.\n     * @member IntentRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their\n     *          values defined for this IntentRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Starts intent recognition, and stops after the first utterance is recognized.\n     * The task returns the recognition text and intent as result.\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n     *       so it is suitable only for single shot recognition like command or query.\n     *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            let contextJson: string;\n\n            if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n                contextJson = this.buildSpeechContext();\n                this.privIntentDataSent = true;\n            }\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Interactive,\n                this.properties,\n                this.audioConfig,\n                new IntentConnectionFactory());\n\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n\n            this.implRecognizerStart(this.privReco, (e: IntentRecognitionResult) => {\n                this.implCloseExistingRecognizer();\n                if (!!cb) {\n                    cb(e);\n                }\n            }, (e: string) => {\n                this.implCloseExistingRecognizer();\n                if (!!err) {\n                    err(e);\n                }\n            }, contextJson);\n\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            let contextJson: string;\n\n            if (Object.keys(this.privAddedLmIntents).length !== 0) {\n                contextJson = this.buildSpeechContext();\n                this.privIntentDataSent = true;\n            }\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Conversation,\n                this.properties,\n                this.audioConfig,\n                new IntentConnectionFactory());\n\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n\n            this.implRecognizerStart(this.privReco, undefined, undefined, contextJson);\n\n            // report result to promise.\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n                cb = undefined;\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Stops continuous intent recognition.\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n     *       This functionality is currently not included in the SDK itself.\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\n        Contracts.throwIfNull(model, \"model\");\n\n        if (!!err) {\n            err(\"Not yet implemented.\");\n        }\n    }\n\n    /**\n     * Stops continuous speech recognition.\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n     *       This functionality is currently not included in the SDK itself.\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        if (!!cb) {\n            cb();\n        }\n    }\n\n    /**\n     * Adds a phrase that should be recognized as intent.\n     * @member IntentRecognizer.prototype.addIntent\n     * @function\n     * @public\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\n     */\n    public addIntent(simplePhrase: string, intentId?: string): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\n\n        this.privAddedIntents.push([intentId, simplePhrase]);\n    }\n\n    /**\n     * Adds an intent from Language Understanding service for recognition.\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\n     * @function\n     * @public\n     * @param {string} intentId - A String that represents the identifier of the intent\n     *        to be recognized. Ignored if intentName is empty.\n     * @param {string} model - The intent model from Language Understanding service.\n     * @param {string} intentName - The intent name defined in the intent model. If it\n     *        is empty, all intent names defined in the model will be added.\n     */\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n        Contracts.throwIfNull(model, \"model\");\n\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\n    }\n\n    /**\n     * @summary Adds all intents from the specified Language Understanding Model.\n     * @member IntentRecognizer.prototype.addAllIntents\n     * @function\n     * @public\n     * @function\n     * @public\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\n     */\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\n        Contracts.throwIfNull(model, \"model\");\n\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member IntentRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n        this.dispose(true);\n    }\n\n    protected createRecognizerConfig(speecgConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\n        return new RecognizerConfig(speecgConfig, recognitionMode, this.properties);\n    }\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this, this.privIntentDataSent);\n    }\n\n    protected dispose(disposing: boolean): void {\n        if (this.privDisposedIntentRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.privDisposedIntentRecognizer = true;\n            super.dispose(disposing);\n        }\n    }\n\n    private implCloseExistingRecognizer(): void {\n        if (this.privReco) {\n            this.privReco.audioSource.turnOff();\n            this.privReco.dispose();\n            this.privReco = undefined;\n        }\n    }\n\n    private buildSpeechContext(): string {\n        let appId: string;\n        let region: string;\n        let subscriptionKey: string;\n        const refGrammers: string[] = [];\n\n        if (undefined !== this.privUmbrellaIntent) {\n            appId = this.privUmbrellaIntent.modelImpl.appId;\n            region = this.privUmbrellaIntent.modelImpl.region;\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\n        }\n\n        // Build the reference grammer array.\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\n\n            // validate all the same model, region, and key...\n            if (appId === undefined) {\n                appId = addedLmIntent.modelImpl.appId;\n            } else {\n                if (appId !== addedLmIntent.modelImpl.appId) {\n                    throw new Error(\"Intents must all be from the same LUIS model\");\n                }\n            }\n\n            if (region === undefined) {\n                region = addedLmIntent.modelImpl.region;\n            } else {\n                if (region !== addedLmIntent.modelImpl.region) {\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\n                }\n            }\n\n            if (subscriptionKey === undefined) {\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\n            } else {\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\n                    throw new Error(\"Intents must all use the same subscription key\");\n                }\n            }\n\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\n            refGrammers.push(grammer);\n        }\n\n        return JSON.stringify({\n            dgi: {\n                ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\n            },\n            intent: {\n                id: appId,\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\n                provider: \"LUIS\",\n            },\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/IntentRecognizer.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    PlatformConfig,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    TranslationConnectionFactory,\n    TranslationServiceRecognizer,\n} from \"../common.speech/Exports\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    TranslationRecognitionCanceledEventArgs,\n    TranslationRecognitionEventArgs,\n    TranslationRecognitionResult,\n    TranslationSynthesisEventArgs,\n} from \"./Exports\";\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\n\n/**\n * Translation recognizer\n * @class TranslationRecognizer\n */\nexport class TranslationRecognizer extends Recognizer {\n    private privDisposedTranslationRecognizer: boolean;\n    private privProperties: PropertyCollection;\n\n    /**\n     * Initializes an instance of the TranslationRecognizer.\n     * @constructor\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n     */\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\n\n        super(audioConfig);\n\n        this.privDisposedTranslationRecognizer = false;\n        this.privProperties = configImpl.properties.clone();\n\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n            Contracts.throwIfNullOrWhitespace(\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n        }\n\n        Contracts.throwIfNullOrWhitespace(\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\n            PropertyId.SpeechServiceConnection_RecoLanguage),\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member TranslationRecognizer.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member TranslationRecognizer.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member TranslationRecognizer.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\n\n    /**\n     * The event synthesizing signals that a translation synthesis result is received.\n     * @member TranslationRecognizer.prototype.synthesizing\n     * @function\n     * @public\n     */\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\n\n    /**\n     * Gets the language name that was set when the recognizer was created.\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} Gets the language name that was set when the recognizer was created.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * Gets target languages for translation that were set when the recognizer was created.\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\n     * @member TranslationRecognizer.prototype.targetLanguages\n     * @function\n     * @public\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\n     */\n    public get targetLanguages(): string[] {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n    }\n\n    /**\n     * Gets the name of output voice.\n     * @member TranslationRecognizer.prototype.voiceName\n     * @function\n     * @public\n     * @returns {string} the name of output voice.\n     */\n    public get voiceName(): string {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    public set authorizationToken(value: string) {\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    /**\n     * The collection of properties and their values defined for this TranslationRecognizer.\n     * @member TranslationRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Starts recognition and translation, and stops after the first utterance is recognized.\n     * The task returns the translation text as result.\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\n     *       for single shot recognition like command or query. For long-running recognition,\n     *       use startContinuousRecognitionAsync() instead.\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the result when the translation has completed.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Conversation,\n                this.properties,\n                this.audioConfig,\n                new TranslationConnectionFactory());\n\n            this.implRecognizerStart(\n                this.privReco,\n                (e: TranslationRecognitionResult) => {\n                    this.implCloseExistingRecognizer();\n                    if (!!cb) {\n                        cb(e);\n                    }\n                }, (e: string) => {\n                    this.implCloseExistingRecognizer();\n                    if (!!err) {\n                        err(e);\n                    }\n                });\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive translation results.\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the translation has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Conversation,\n                this.properties,\n                this.audioConfig,\n                new TranslationConnectionFactory());\n\n            this.implRecognizerStart(this.privReco, undefined, undefined);\n\n            // report result to promise.\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n                cb = undefined;\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Stops continuous recognition and translation.\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the translation has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member TranslationRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        this.dispose(true);\n    }\n\n    protected dispose(disposing: boolean): boolean {\n        if (this.privDisposedTranslationRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.implCloseExistingRecognizer();\n            this.privDisposedTranslationRecognizer = true;\n            super.dispose(disposing);\n        }\n    }\n\n    protected createRecognizerConfig(speechConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\n        return new RecognizerConfig(speechConfig, RecognitionMode.Conversation, this.properties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n\n    // tslint:disable-next-line:member-ordering\n    private privReco: ServiceRecognizerBase;\n\n    private implCloseExistingRecognizer(): void {\n        if (this.privReco) {\n            this.privReco.audioSource.turnOff();\n            this.privReco.dispose();\n            this.privReco = undefined;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/TranslationRecognizer.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection } from \"./Exports\";\n\n/**\n * Represents collection of parameters and their values.\n * @class Translation\n */\nexport class Translations {\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\n    private privMap: PropertyCollection = new PropertyCollection();\n\n    /**\n     * Returns the parameter value in type String. The parameter must have the same type as String.\n     * Currently only String, int and bool are allowed.\n     * If the name is not available, the specified defaultValue is returned.\n     * @member Translation.prototype.get\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\n     * @returns {string} value of the parameter.\n     */\n    public get(key: string, def?: string): string {\n        return this.privMap.getProperty(key, def);\n    }\n\n    /**\n     * Sets the String value of the parameter specified by name.\n     * @member Translation.prototype.set\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} value - The value of the parameter.\n     */\n    public set(key: string, value: string): void {\n        this.privMap.setProperty(key, value);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/Translations.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the possible reasons a recognition result might not be recognized.\n * @class NoMatchReason\n */\nexport enum NoMatchReason {\n\n    /**\n     * Indicates that speech was detected, but not recognized.\n     * @member NoMatchReason.NotRecognized\n     */\n    NotRecognized,\n\n    /**\n     * Indicates that the start of the audio stream contained only silence,\n     * and the service timed out waiting for speech.\n     * @member NoMatchReason.InitialSilenceTimeout\n     */\n    InitialSilenceTimeout,\n\n    /**\n     * Indicates that the start of the audio stream contained only noise,\n     * and the service timed out waiting for speech.\n     * @member NoMatchReason.InitialBabbleTimeout\n     */\n    InitialBabbleTimeout,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/NoMatchReason.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports\";\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports\";\n\n/**\n * Contains detailed information for NoMatch recognition results.\n * @class NoMatchDetails\n */\nexport class NoMatchDetails {\n    private privReason: NoMatchReason;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {NoMatchReason} reason - The no-match reason.\n     */\n    private constructor(reason: NoMatchReason) {\n        this.privReason = reason;\n    }\n\n    /**\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\n     * @member NoMatchDetails.fromResult\n     * @function\n     * @public\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\n     *        result - The recognition result that was not recognized.\n     * @returns {NoMatchDetails} The no match details object being created.\n     */\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\n\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\n\n        switch (simpleSpeech.RecognitionStatus) {\n            case RecognitionStatus.BabbleTimeout:\n                reason = NoMatchReason.InitialBabbleTimeout;\n                break;\n            case RecognitionStatus.InitialSilenceTimeout:\n                reason = NoMatchReason.InitialSilenceTimeout;\n                break;\n            default:\n                reason = NoMatchReason.NotRecognized;\n                break;\n        }\n\n        return new NoMatchDetails(reason);\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member NoMatchDetails.prototype.reason\n     * @function\n     * @public\n     * @returns {NoMatchReason} Specifies the reason canceled.\n     */\n    public get reason(): NoMatchReason {\n        return this.privReason;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/NoMatchDetails.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports\";\n\n/**\n * Define payload of speech recognition canceled result events.\n * @class TranslationRecognitionCanceledEventArgs\n */\nexport class TranslationRecognitionCanceledEventArgs {\n    private privResult: TranslationRecognitionResult;\n    private privSessionId: string;\n    private privCancelReason: CancellationReason;\n    private privErrorDetails: string;\n    private privErrorCode: CancellationErrorCode;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} sessionid - The session id.\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {TranslationRecognitionResult} result - The result.\n     */\n    public constructor(\n        sessionid: string,\n        cancellationReason: CancellationReason,\n        errorDetails: string,\n        errorCode: CancellationErrorCode,\n        result: TranslationRecognitionResult) {\n        this.privCancelReason = cancellationReason;\n        this.privErrorDetails = errorDetails;\n        this.privResult = result;\n        this.privSessionId = sessionid;\n        this.privErrorCode = errorCode;\n    }\n\n    /**\n     * Specifies the recognition result.\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {TranslationRecognitionResult} the recognition result.\n     */\n    public get result(): TranslationRecognitionResult {\n        return this.privResult;\n    }\n\n    /**\n     * Specifies the session identifier.\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\n     * @function\n     * @public\n     * @returns {string} the session identifier.\n     */\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\n     * @function\n     * @public\n     * @returns {CancellationReason} Specifies the reason canceled.\n     */\n    public get reason(): CancellationReason {\n        return this.privCancelReason;\n    }\n\n    /**\n     * The error code in case of an unsuccessful recognition.\n     * Added in version 1.1.0.\n     * @return An error code that represents the error reason.\n     */\n    public get errorCode(): CancellationErrorCode {\n        return this.privErrorCode;\n    }\n\n    /**\n     * In case of an unsuccessful recognition, provides details of the occurred error.\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} A String that represents the error details.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/TranslationRecognitionCanceledEventArgs.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports\";\n\n/**\n * Define payload of intent recognition canceled result events.\n * @class IntentRecognitionCanceledEventArgs\n */\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs {\n    private privReason: CancellationReason;\n    private privErrorDetails: string;\n    private privErrorCode: CancellationErrorCode;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {CancellationReason} result - The result of the intent recognition.\n     * @param {string} offset - The offset.\n     * @param {IntentRecognitionResult} sessionId - The session id.\n     */\n    public constructor(\n        reason: CancellationReason,\n        errorDetails: string,\n        errorCode: CancellationErrorCode,\n        result?: IntentRecognitionResult,\n        offset?: number,\n        sessionId?: string) {\n        super(result, offset, sessionId);\n\n        this.privReason = reason;\n        this.privErrorDetails = errorDetails;\n        this.privErrorCode = errorCode;\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\n     * @function\n     * @public\n     * @returns {CancellationReason} Specifies the reason canceled.\n     */\n    public get reason(): CancellationReason {\n        return this.privReason;\n    }\n\n    /**\n     * The error code in case of an unsuccessful recognition.\n     * Added in version 1.1.0.\n     * @return An error code that represents the error reason.\n     */\n    public get errorCode(): CancellationErrorCode {\n        return this.privErrorCode;\n    }\n\n    /**\n     * In case of an unsuccessful recognition, provides details of the occurred error.\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} A String that represents the error details.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/IntentRecognitionCanceledEventArgs.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports\";\nimport { CancellationErrorCode, CancellationReason, RecognitionResult } from \"./Exports\";\n\n/**\n * Contains detailed information about why a result was canceled.\n * @class CancellationDetails\n */\nexport class CancellationDetails {\n    private privReason: CancellationReason;\n    private privErrorDetails: string;\n    private privErrorCode: CancellationErrorCode;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {CancellationReason} reason - The cancellation reason.\n     * @param {string} errorDetails - The error details, if provided.\n     */\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\n        this.privReason = reason;\n        this.privErrorDetails = errorDetails;\n        this.privErrorCode = errorCode;\n    }\n\n    /**\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\n     * @member CancellationDetails.fromResult\n     * @function\n     * @public\n     * @param {RecognitionResult} result - The result that was canceled.\n     * @returns {CancellationDetails} The cancellation details object being created.\n     */\n    public static fromResult(result: RecognitionResult): CancellationDetails {\n        let reason = CancellationReason.Error;\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\n\n        if (!!result.json) {\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\n        }\n\n        if (!!result.properties) {\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\n        }\n\n        return new CancellationDetails(reason, result.errorDetails, errorCode);\n\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member CancellationDetails.prototype.reason\n     * @function\n     * @public\n     * @returns {CancellationReason} Specifies the reason canceled.\n     */\n    public get reason(): CancellationReason {\n        return this.privReason;\n    }\n\n    /**\n     * In case of an unsuccessful recognition, provides details of the occurred error.\n     * @member CancellationDetails.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} A String that represents the error details.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n\n    /**\n     * The error code in case of an unsuccessful recognition.\n     * Added in version 1.1.0.\n     * @return An error code that represents the error reason.\n     */\n    public get ErrorCode(): CancellationErrorCode {\n        return this.privErrorCode;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/CancellationDetails.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n *  Defines error code in case that CancellationReason is Error.\n *  Added in version 1.1.0.\n */\nexport enum CancellationErrorCode {\n    /**\n     * Indicates that no error occurred during speech recognition.\n     */\n    NoError,\n\n    /**\n     * Indicates an authentication error.\n     */\n    AuthenticationFailure,\n\n    /**\n     * Indicates that one or more recognition parameters are invalid.\n     */\n    BadRequestParameters,\n\n    /**\n     * Indicates that the number of parallel requests exceeded the number of allowed\n     * concurrent transcriptions for the subscription.\n     */\n    TooManyRequests,\n\n    /**\n     * Indicates a connection error.\n     */\n    ConnectionFailure,\n\n    /**\n     * Indicates a time-out error when waiting for response from service.\n     */\n    ServiceTimeout,\n\n    /**\n     * Indicates that an error is returned by the service.\n     */\n    ServiceError,\n\n    /**\n     * Indicates an unexpected runtime error.\n     */\n    RuntimeError,\n}\n\n\n\n// WEBPACK FOOTER //\n// ../../src/sdk/CancellationErrorCodes.ts"],"sourceRoot":""}