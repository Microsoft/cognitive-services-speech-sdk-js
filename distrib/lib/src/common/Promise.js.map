{"version":3,"sources":["../../src/common/Promise.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,iCAA6C;AAE7C,IAAY,YAIX;AAJD,WAAY,YAAY;IACpB,+CAAI,CAAA;IACJ,uDAAQ,CAAA;IACR,uDAAQ,CAAA;AACZ,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB;AAgCD;IAMI,uBAAmB,wBAAqD;QAAxE,iBAcC;QAkBM,iBAAY,GAAG;YAClB,IAAI,KAAI,CAAC,OAAO,EAAE;gBACd,MAAM,KAAI,CAAC,KAAK,CAAC;aACpB;QACL,CAAC,CAAA;QAnCG,wBAAwB,CAAC,EAAE,CAAC,UAAC,MAAS;YAClC,IAAI,CAAC,KAAI,CAAC,eAAe,EAAE;gBACvB,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBACzB,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC;aAC5B;QACL,CAAC,EAAE,UAAC,KAAa;YACb,IAAI,CAAC,KAAI,CAAC,eAAe,EAAE;gBACvB,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aAC1B;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sBAAW,sCAAW;aAAtB;YACI,OAAO,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;;;OAAA;IAED,sBAAW,kCAAO;aAAlB;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAW,gCAAK;aAAhB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAED,sBAAW,iCAAM;aAAjB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;;;OAAA;IAOL,oBAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CY,sCAAa;AA6C1B,gDAAgD;AAChD;IAAA;QAAA,iBAiBC;QAZU,cAAS,GAAG,UAAC,MAAS;YACzB,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC,CAAA;QAEM,aAAQ,GAAG,UAAC,KAAa;YAC5B,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAA;QAEM,OAAE,GAAG,UAAC,WAAgC,EAAE,UAAmC;YAC9E,KAAI,CAAC,eAAe,GAAG,WAAW,CAAC;YACnC,KAAI,CAAC,cAAc,GAAG,UAAU,CAAC;QACrC,CAAC,CAAA;IACL,CAAC;IAAD,+BAAC;AAAD,CAjBA,AAiBC,IAAA;AAjBY,4DAAwB;AAmBrC,gDAAgD;AAChD;IAAA;IA4CA,CAAC;IA3CiB,qBAAO,GAAG,UAAC,QAA6B;QAClD,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACpC,MAAM,IAAI,yBAAiB,CAAC,UAAU,CAAC,CAAC;SAC3C;QAED,IAAM,QAAQ,GAAG,IAAI,QAAQ,EAAW,CAAC;QACzC,IAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,IAAI,iBAAiB,GAAW,CAAC,CAAC;QAElC,IAAM,kBAAkB,GAAG;YACvB,iBAAiB,EAAE,CAAC;YACpB,IAAI,iBAAiB,KAAK,QAAQ,CAAC,MAAM,EAAE;gBACvC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;oBACrB,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAC1B;qBAAM;oBACH,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;iBACtC;aACJ;QACL,CAAC,CAAC;QAEF,KAAsB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;YAA3B,IAAM,OAAO,iBAAA;YACd,OAAO,CAAC,EAAE,CAAC,UAAC,CAAM;gBACd,kBAAkB,EAAE,CAAC;YACzB,CAAC,EAAE,UAAC,CAAS;gBACT,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACf,kBAAkB,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;SACN;QAED,OAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC,CAAA;IAEa,wBAAU,GAAG,UAAU,MAAe;QAChD,IAAM,QAAQ,GAAG,IAAI,QAAQ,EAAW,CAAC;QACzC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzB,OAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC,CAAA;IAEa,uBAAS,GAAG,UAAU,KAAa;QAC7C,IAAM,QAAQ,GAAG,IAAI,QAAQ,EAAW,CAAC;QACzC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvB,OAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC,CAAA;IACL,oBAAC;CA5CD,AA4CC,IAAA;AA5CY,sCAAa;AA8C1B,kCAAkC;AAClC,gDAAgD;AAChD;IAGI,iBAAmB,IAAa;QAAhC,iBAEC;QAEM,WAAM,GAAG;YACZ,OAAO,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAChC,CAAC,CAAA;QAEM,iBAAY,GAAG,UAClB,oBAA8E;YAE9E,IAAI,CAAC,oBAAoB,EAAE;gBACvB,MAAM,IAAI,yBAAiB,CAAC,sBAAsB,CAAC,CAAC;aACvD;YAED,IAAM,oBAAoB,GAAG,IAAI,QAAQ,EAAuB,CAAC;YAEjE,KAAI,CAAC,QAAQ,CAAC,EAAE,CACZ,UAAC,CAAI;gBACD,IAAI;oBACA,IAAM,kBAAkB,GAAwB,oBAAoB,CAAC,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAC3F,oBAAoB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;iBACpD;gBAAC,OAAO,CAAC,EAAE;oBACR,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAClC;YACL,CAAC,EACD,UAAC,KAAa;gBACV,IAAI;oBACA,IAAM,kBAAkB,GAAwB,oBAAoB,CAAC,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAC3F,oBAAoB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;iBACpD;gBAAC,OAAO,CAAC,EAAE;oBACR,oBAAoB,CAAC,MAAM,CAAC,8BAA4B,KAAK,qBAAgB,CAAC,MAAG,CAAC,CAAC;iBACtF;YACL,CAAC,CACJ,CAAC;YAEF,OAAO,oBAAoB,CAAC,OAAO,EAAE,CAAC;QAC1C,CAAC,CAAA;QAEM,0BAAqB,GAAG,UAC3B,oBAAwD;YAExD,IAAI,CAAC,oBAAoB,EAAE;gBACvB,MAAM,IAAI,yBAAiB,CAAC,sBAAsB,CAAC,CAAC;aACvD;YAED,IAAM,oBAAoB,GAAG,IAAI,QAAQ,EAAuB,CAAC;YAEjE,KAAI,CAAC,QAAQ,CAAC,EAAE,CACZ,UAAC,CAAI;gBACD,IAAI;oBACA,IAAM,kBAAkB,GAAwB,oBAAoB,CAAC,CAAC,CAAC,CAAC;oBACxE,oBAAoB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;iBACpD;gBAAC,OAAO,CAAC,EAAE;oBACR,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAClC;YACL,CAAC,EACD,UAAC,KAAa;gBACV,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CACJ,CAAC;YAEF,OAAO,oBAAoB,CAAC,OAAO,EAAE,CAAC;QAC1C,CAAC,CAAA;QAEM,wBAAmB,GAAG,UACzB,oBAAuF;YAEvF,IAAI,CAAC,oBAAoB,EAAE;gBACvB,MAAM,IAAI,yBAAiB,CAAC,sBAAsB,CAAC,CAAC;aACvD;YAED,IAAM,oBAAoB,GAAG,IAAI,QAAQ,EAAuB,CAAC;YAEjE,KAAI,CAAC,QAAQ,CAAC,EAAE,CACZ,UAAC,CAAI;gBACD,IAAI;oBACA,IAAM,mBAAmB,GAAiC,oBAAoB,CAAC,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACrG,IAAI,CAAC,mBAAmB,EAAE;wBACtB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;qBACrE;oBACD,mBAAmB,CAAC,EAAE,CAAC,UAAC,kBAAuC;wBAC3D,oBAAoB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;oBACrD,CAAC,EAAE,UAAC,CAAS;wBACT,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACnC,CAAC,CAAC,CAAC;iBACN;gBAAC,OAAO,CAAC,EAAE;oBACR,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAClC;YACL,CAAC,EACD,UAAC,KAAa;gBACV,IAAI;oBACA,IAAM,mBAAmB,GAAiC,oBAAoB,CAAC,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACrG,IAAI,CAAC,mBAAmB,EAAE;wBACtB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;qBACnE;oBACD,mBAAmB,CAAC,EAAE,CAAC,UAAC,kBAAuC;wBAC3D,oBAAoB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;oBACrD,CAAC,EAAE,UAAC,CAAS;wBACT,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACnC,CAAC,CAAC,CAAC;iBACN;gBAAC,OAAO,CAAC,EAAE;oBACR,oBAAoB,CAAC,MAAM,CAAC,8BAA4B,KAAK,qBAAgB,CAAC,MAAG,CAAC,CAAC;iBACtF;YACL,CAAC,CACJ,CAAC;YAEF,OAAO,oBAAoB,CAAC,OAAO,EAAE,CAAC;QAC1C,CAAC,CAAA;QAEM,iCAA4B,GAAG,UAClC,oBAAiE;YAEjE,IAAI,CAAC,oBAAoB,EAAE;gBACvB,MAAM,IAAI,yBAAiB,CAAC,sBAAsB,CAAC,CAAC;aACvD;YAED,IAAM,oBAAoB,GAAG,IAAI,QAAQ,EAAuB,CAAC;YAEjE,KAAI,CAAC,QAAQ,CAAC,EAAE,CACZ,UAAC,CAAI;gBACD,IAAI;oBACA,IAAM,mBAAmB,GAAiC,oBAAoB,CAAC,CAAC,CAAC,CAAC;oBAClF,IAAI,CAAC,mBAAmB,EAAE;wBACtB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;qBACnE;oBACD,mBAAmB,CAAC,EAAE,CAAC,UAAC,kBAAuC;wBAC3D,oBAAoB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;oBACrD,CAAC,EAAE,UAAC,CAAS;wBACT,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACnC,CAAC,CAAC,CAAC;iBACN;gBAAC,OAAO,CAAC,EAAE;oBACR,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAClC;YACL,CAAC,EACD,UAAC,KAAa;gBACV,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CACJ,CAAC;YAEF,OAAO,oBAAoB,CAAC,OAAO,EAAE,CAAC;QAC1C,CAAC,CAAA;QAEM,OAAE,GAAG,UACR,eAAoC,EACpC,aAAsC;YACtC,IAAI,CAAC,eAAe,EAAE;gBAClB,MAAM,IAAI,yBAAiB,CAAC,iBAAiB,CAAC,CAAC;aAClD;YAED,IAAI,CAAC,aAAa,EAAE;gBAChB,MAAM,IAAI,yBAAiB,CAAC,eAAe,CAAC,CAAC;aAChD;YAED,KAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;YACjD,OAAO,KAAI,CAAC;QAChB,CAAC,CAAA;QAEM,YAAO,GAAG,UAAC,QAAoB;YAClC,IAAI,CAAC,QAAQ,EAAE;gBACX,MAAM,IAAI,yBAAiB,CAAC,UAAU,CAAC,CAAC;aAC3C;YAED,IAAM,eAAe,GAAG,UAAC,CAAM;gBAC3B,QAAQ,EAAE,CAAC;YACf,CAAC,CAAC;YAEF,OAAO,KAAI,CAAC,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;QACrD,CAAC,CAAA;QAvKG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAuKL,cAAC;AAAD,CA5KA,AA4KC,IAAA;AA5KY,0BAAO;AA8KpB,gDAAgD;AAChD;IAII;QAAA,iBAGC;QAEM,UAAK,GAAG;YACX,OAAO,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC/B,CAAC,CAAA;QAEM,YAAO,GAAG;YACb,OAAO,KAAI,CAAC,WAAW,CAAC;QAC5B,CAAC,CAAA;QAEM,YAAO,GAAG,UAAC,MAAS;YACvB,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC9B,OAAO,KAAI,CAAC;QAChB,CAAC,CAAA;QAEM,WAAM,GAAG,UAAC,KAAa;YAC1B,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5B,OAAO,KAAI,CAAC;QAChB,CAAC,CAAA;QApBG,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAK,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,IAAI,OAAO,CAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;IAmBL,eAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,4BAAQ;AA4BrB,gDAAgD;AAChD;IAQI;QAAA,iBAGC;QAVO,cAAS,GAAiB,YAAY,CAAC,IAAI,CAAC;QAC5C,sBAAiB,GAAqB,IAAI,CAAC;QAC3C,4BAAuB,GAAgC,IAAI,CAAC;QAE5D,wBAAmB,GAAiC,EAAE,CAAC;QACvD,sBAAiB,GAA+B,EAAE,CAAC;QAepD,YAAO,GAAG,UAAC,MAAS;YACvB,IAAI,KAAI,CAAC,SAAS,KAAK,YAAY,CAAC,IAAI,EAAE;gBACtC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;aAC3D;YAED,KAAI,CAAC,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC;YACvC,KAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAE/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtD,KAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,KAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;aAC/F;YAED,KAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC,CAAA;QAEM,WAAM,GAAG,UAAC,KAAa;YAC1B,IAAI,KAAI,CAAC,SAAS,KAAK,YAAY,CAAC,IAAI,EAAE;gBACtC,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;aAC1D;YAED,KAAI,CAAC,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC;YACvC,KAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAE7C,KAA2B,UAAsB,EAAtB,KAAA,KAAI,CAAC,iBAAiB,EAAtB,cAAsB,EAAtB,IAAsB,EAAE;gBAA9C,IAAM,YAAY,SAAA;gBACnB,KAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;aAClD;YAED,KAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC,CAAA;QAEM,OAAE,GAAG,UACR,eAAoC,EACpC,aAAsC;YAEtC,IAAI,eAAe,IAAI,IAAI,EAAE;gBACzB,eAAe,GAAG,UAAC,CAAI,IAAO,OAAO,CAAC,CAAC,CAAC;aAC3C;YAED,IAAI,KAAI,CAAC,SAAS,KAAK,YAAY,CAAC,IAAI,EAAE;gBACtC,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC/C,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC9C;iBAAM;gBACH,IAAI,KAAI,CAAC,SAAS,KAAK,YAAY,CAAC,QAAQ,EAAE;oBAC1C,KAAI,CAAC,sBAAsB,CAAC,KAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;iBAC9F;qBAAM,IAAI,KAAI,CAAC,SAAS,KAAK,YAAY,CAAC,QAAQ,EAAE;oBACjD,KAAI,CAAC,oBAAoB,CAAC,KAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;iBAC1E;gBAED,KAAI,CAAC,cAAc,EAAE,CAAC;aACzB;QACL,CAAC,CAAA;QAEO,2BAAsB,GAAG,UAAC,MAAS,EAAE,eAAoC,EAAE,aAAsC;YACrH,IAAI;gBACA,eAAe,CAAC,MAAM,CAAC,CAAC;aAC3B;YAAC,OAAO,CAAC,EAAE;gBACR,KAAI,CAAC,oBAAoB,CAAC,gCAA8B,CAAC,MAAG,EAAE,aAAa,CAAC,CAAC;aAChF;QACL,CAAC,CAAA;QAEO,yBAAoB,GAAG,UAAC,KAAa,EAAE,aAAsC;YACjF,IAAI,aAAa,EAAE;gBACf,IAAI;oBACA,aAAa,CAAC,KAAK,CAAC,CAAC;iBACxB;gBAAC,OAAO,CAAC,EAAE;oBACR,MAAM,IAAI,KAAK,CAAC,gCAA8B,CAAC,sBAAiB,KAAK,MAAG,CAAC,CAAC;iBAC7E;aACJ;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,uBAAqB,KAAK,MAAG,CAAC,CAAC;aAClD;QACL,CAAC,CAAA;QAEO,mBAAc,GAAG;YACrB,KAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;YAC5B,KAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAClC,CAAC,CAAA;QAvFG,IAAI,CAAC,uBAAuB,GAAG,IAAI,wBAAwB,EAAE,CAAC;QAC9D,IAAI,CAAC,iBAAiB,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAC7E,CAAC;IAED,sBAAW,uBAAK;aAAhB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAED,sBAAW,wBAAM;aAAjB;YACI,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAClC,CAAC;;;OAAA;IA8EL,WAAC;AAAD,CAjGA,AAiGC,IAAA;AAjGY,oBAAI","file":"Promise.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError  } from \"./Error\";\n\nexport enum PromiseState {\n    None,\n    Resolved,\n    Rejected,\n}\n\nexport interface IPromise<T> {\n    result(): PromiseResult<T>;\n\n    continueWith<TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\n\n    continueWithPromise<TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\n\n    onSuccessContinueWith<TContinuationResult>(\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\n\n    onSuccessContinueWithPromise<TContinuationResult>(\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\n\n    on(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\n\n    finally(callback: () => void): IPromise<T>;\n}\n\nexport interface IDeferred<T> {\n    state(): PromiseState;\n\n    promise(): IPromise<T>;\n\n    resolve(result: T): IDeferred<T>;\n\n    reject(error: string): IDeferred<T>;\n}\n\nexport class PromiseResult<T> {\n    protected privIsCompleted: boolean;\n    protected privIsError: boolean;\n    protected privError: string;\n    protected privResult: T;\n\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\n        promiseResultEventSource.on((result: T) => {\n            if (!this.privIsCompleted) {\n                this.privIsCompleted = true;\n                this.privIsError = false;\n                this.privResult = result;\n            }\n        }, (error: string) => {\n            if (!this.privIsCompleted) {\n                this.privIsCompleted = true;\n                this.privIsError = true;\n                this.privError = error;\n            }\n        });\n    }\n\n    public get isCompleted(): boolean {\n        return this.privIsCompleted;\n    }\n\n    public get isError(): boolean {\n        return this.privIsError;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n\n    public get result(): T {\n        return this.privResult;\n    }\n\n    public throwIfError = (): void => {\n        if (this.isError) {\n            throw this.error;\n        }\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class PromiseResultEventSource<T>  {\n\n    private privOnSetResult: (result: T) => void;\n    private privOnSetError: (error: string) => void;\n\n    public setResult = (result: T): void => {\n        this.privOnSetResult(result);\n    }\n\n    public setError = (error: string): void => {\n        this.privOnSetError(error);\n    }\n\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\n        this.privOnSetResult = onSetResult;\n        this.privOnSetError = onSetError;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class PromiseHelper {\n    public static whenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\n        if (!promises || promises.length === 0) {\n            throw new ArgumentNullError(\"promises\");\n        }\n\n        const deferred = new Deferred<boolean>();\n        const errors: string[] = [];\n        let completedPromises: number = 0;\n\n        const checkForCompletion = () => {\n            completedPromises++;\n            if (completedPromises === promises.length) {\n                if (errors.length === 0) {\n                    deferred.resolve(true);\n                } else {\n                    deferred.reject(errors.join(\", \"));\n                }\n            }\n        };\n\n        for (const promise of promises) {\n            promise.on((r: any) => {\n                checkForCompletion();\n            }, (e: string) => {\n                errors.push(e);\n                checkForCompletion();\n            });\n        }\n\n        return deferred.promise();\n    }\n\n    public static fromResult = <TResult>(result: TResult): Promise<TResult> => {\n        const deferred = new Deferred<TResult>();\n        deferred.resolve(result);\n        return deferred.promise();\n    }\n\n    public static fromError = <TResult>(error: string): Promise<TResult> => {\n        const deferred = new Deferred<TResult>();\n        deferred.reject(error);\n        return deferred.promise();\n    }\n}\n\n// TODO: replace with ES6 promises\n// tslint:disable-next-line:max-classes-per-file\nexport class Promise<T> implements IPromise<T> {\n    private privSink: Sink<T>;\n\n    public constructor(sink: Sink<T>) {\n        this.privSink = sink;\n    }\n\n    public result = (): PromiseResult<T> => {\n        return this.privSink.result;\n    }\n\n    public continueWith = <TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.privSink.on(\n            (r: T) => {\n                try {\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\n                    continuationDeferral.resolve(continuationResult);\n                } catch (e) {\n                    continuationDeferral.reject(e);\n                }\n            },\n            (error: string) => {\n                try {\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\n                    continuationDeferral.resolve(continuationResult);\n                } catch (e) {\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\n                }\n            },\n        );\n\n        return continuationDeferral.promise();\n    }\n\n    public onSuccessContinueWith = <TContinuationResult>(\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.privSink.on(\n            (r: T) => {\n                try {\n                    const continuationResult: TContinuationResult = continuationCallback(r);\n                    continuationDeferral.resolve(continuationResult);\n                } catch (e) {\n                    continuationDeferral.reject(e);\n                }\n            },\n            (error: string) => {\n                continuationDeferral.reject(error);\n            },\n        );\n\n        return continuationDeferral.promise();\n    }\n\n    public continueWithPromise = <TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.privSink.on(\n            (r: T) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\n                    if (!continuationPromise) {\n                        throw new Error(\"'Continuation callback did not return promise'\");\n                    }\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\n                        continuationDeferral.resolve(continuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.reject(e);\n                }\n            },\n            (error: string) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\n                    if (!continuationPromise) {\n                        throw new Error(\"Continuation callback did not return promise\");\n                    }\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\n                        continuationDeferral.resolve(continuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\n                }\n            },\n        );\n\n        return continuationDeferral.promise();\n    }\n\n    public onSuccessContinueWithPromise = <TContinuationResult>(\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.privSink.on(\n            (r: T) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\n                    if (!continuationPromise) {\n                        throw new Error(\"Continuation callback did not return promise\");\n                    }\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\n                        continuationDeferral.resolve(continuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.reject(e);\n                }\n            },\n            (error: string) => {\n                continuationDeferral.reject(error);\n            },\n        );\n\n        return continuationDeferral.promise();\n    }\n\n    public on = (\n        successCallback: (result: T) => void,\n        errorCallback: (error: string) => void): Promise<T> => {\n        if (!successCallback) {\n            throw new ArgumentNullError(\"successCallback\");\n        }\n\n        if (!errorCallback) {\n            throw new ArgumentNullError(\"errorCallback\");\n        }\n\n        this.privSink.on(successCallback, errorCallback);\n        return this;\n    }\n\n    public finally = (callback: () => void): Promise<T> => {\n        if (!callback) {\n            throw new ArgumentNullError(\"callback\");\n        }\n\n        const callbackWrapper = (_: any) => {\n            callback();\n        };\n\n        return this.on(callbackWrapper, callbackWrapper);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Deferred<T> implements IDeferred<T> {\n    private privPromise: Promise<T>;\n    private privSink: Sink<T>;\n\n    public constructor() {\n        this.privSink = new Sink<T>();\n        this.privPromise = new Promise<T>(this.privSink);\n    }\n\n    public state = (): PromiseState => {\n        return this.privSink.state;\n    }\n\n    public promise = (): Promise<T> => {\n        return this.privPromise;\n    }\n\n    public resolve = (result: T): Deferred<T> => {\n        this.privSink.resolve(result);\n        return this;\n    }\n\n    public reject = (error: string): Deferred<T> => {\n        this.privSink.reject(error);\n        return this;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Sink<T> {\n    private privState: PromiseState = PromiseState.None;\n    private privPromiseResult: PromiseResult<T> = null;\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\n\n    private privSuccessHandlers: Array<((result: T) => void)> = [];\n    private privErrorHandlers: Array<(e: string) => void> = [];\n\n    public constructor() {\n        this.privPromiseResultEvents = new PromiseResultEventSource();\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\n    }\n\n    public get state(): PromiseState {\n        return this.privState;\n    }\n\n    public get result(): PromiseResult<T> {\n        return this.privPromiseResult;\n    }\n\n    public resolve = (result: T): void => {\n        if (this.privState !== PromiseState.None) {\n            throw new Error(\"'Cannot resolve a completed promise'\");\n        }\n\n        this.privState = PromiseState.Resolved;\n        this.privPromiseResultEvents.setResult(result);\n\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\n        }\n\n        this.detachHandlers();\n    }\n\n    public reject = (error: string): void => {\n        if (this.privState !== PromiseState.None) {\n            throw new Error(\"'Cannot reject a completed promise'\");\n        }\n\n        this.privState = PromiseState.Rejected;\n        this.privPromiseResultEvents.setError(error);\n\n        for (const errorHandler of this.privErrorHandlers) {\n            this.executeErrorCallback(error, errorHandler);\n        }\n\n        this.detachHandlers();\n    }\n\n    public on = (\n        successCallback: (result: T) => void,\n        errorCallback: (error: string) => void): void => {\n\n        if (successCallback == null) {\n            successCallback = (r: T) => { return; };\n        }\n\n        if (this.privState === PromiseState.None) {\n            this.privSuccessHandlers.push(successCallback);\n            this.privErrorHandlers.push(errorCallback);\n        } else {\n            if (this.privState === PromiseState.Resolved) {\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\n            } else if (this.privState === PromiseState.Rejected) {\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\n            }\n\n            this.detachHandlers();\n        }\n    }\n\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\n        try {\n            successCallback(result);\n        } catch (e) {\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\n        }\n    }\n\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\n        if (errorCallback) {\n            try {\n                errorCallback(error);\n            } catch (e) {\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n            }\n        } else {\n            throw new Error(`'Unhandled error: ${error}'`);\n        }\n    }\n\n    private detachHandlers = (): void => {\n        this.privErrorHandlers = [];\n        this.privSuccessHandlers = [];\n    }\n}\n"]}