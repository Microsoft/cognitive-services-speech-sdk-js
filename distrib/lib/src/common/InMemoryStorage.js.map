{"version":3,"sources":["../../src/common/InMemoryStorage.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,iCAA4C;AAI5C;IAAA;QAAA,iBAyCC;QAvCW,cAAS,GAA8B,EAAE,CAAC;QAE3C,QAAG,GAAG,UAAC,GAAW;YACrB,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,IAAI,yBAAiB,CAAC,KAAK,CAAC,CAAC;aACtC;YAED,OAAO,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC,CAAA;QAEM,aAAQ,GAAG,UAAC,GAAW,EAAE,UAAkB;YAC9C,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,IAAI,yBAAiB,CAAC,KAAK,CAAC,CAAC;aACtC;YAED,IAAI,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;gBACnC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;aACpC;YAED,OAAO,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC,CAAA;QAEM,QAAG,GAAG,UAAC,GAAW,EAAE,KAAa;YACpC,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,IAAI,yBAAiB,CAAC,KAAK,CAAC,CAAC;aACtC;YAED,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAChC,CAAC,CAAA;QAEM,WAAM,GAAG,UAAC,GAAW;YACxB,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,IAAI,yBAAiB,CAAC,KAAK,CAAC,CAAC;aACtC;YAED,IAAI,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;gBACnC,OAAO,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAC9B;QACL,CAAC,CAAA;IACL,CAAC;IAAD,sBAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCY,0CAAe","file":"InMemoryStorage.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError } from \"./Error\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\n\nexport class InMemoryStorage implements IKeyValueStorage {\n\n    private privStore: IStringDictionary<string> = {};\n\n    public get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return this.privStore[key];\n    }\n\n    public getOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.privStore[key] === undefined) {\n            this.privStore[key] = valueToAdd;\n        }\n\n        return this.privStore[key];\n    }\n\n    public set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        this.privStore[key] = value;\n    }\n\n    public remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.privStore[key] !== undefined) {\n            delete this.privStore[key];\n        }\n    }\n}\n"]}