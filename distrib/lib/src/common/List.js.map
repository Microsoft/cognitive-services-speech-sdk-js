{"version":3,"sources":["../../src/common/List.ts"],"names":[],"mappings":"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","file":"List.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IDisposable } from \"./IDisposable\";\n\nexport interface IList<TItem> extends IDisposable {\n    get(itemIndex: number): TItem;\n    first(): TItem;\n    last(): TItem;\n\n    add(item: TItem): void;\n    insertAt(index: number, item: TItem): void;\n\n    removeFirst(): TItem;\n    removeLast(): TItem;\n    removeAt(index: number): TItem;\n    remove(index: number, count: number): TItem[];\n    clear(): void;\n\n    length(): number;\n\n    onAdded(addedCallback: () => void): IDetachable;\n    onRemoved(removedCallback: () => void): IDetachable;\n    onDisposed(disposedCallback: () => void): IDetachable;\n\n    join(seperator?: string): string;\n\n    toArray(): TItem[];\n\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\n    all(callback: (item: TItem) => boolean): boolean;\n    forEach(callback: (item: TItem, index: number) => void): void;\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    clone(): List<TItem>;\n    concat(list: List<TItem>): List<TItem>;\n    concatArray(array: TItem[]): List<TItem>;\n}\n\nexport class List<TItem> implements IList<TItem>  {\n    private privList: TItem[];\n    private privSubscriptionIdCounter: number = 0;\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\n    private privDisposeReason: string = null;\n\n    public constructor(list?: TItem[]) {\n        this.privList = [];\n        // copy the list rather than taking as is.\n        if (list) {\n            for (const item of list) {\n                this.privList.push(item);\n            }\n        }\n    }\n\n    public get = (itemIndex: number): TItem => {\n        this.throwIfDisposed();\n        return this.privList[itemIndex];\n    }\n\n    public first = (): TItem => {\n        return this.get(0);\n    }\n\n    public last = (): TItem => {\n        return this.get(this.length() - 1);\n    }\n\n    public add = (item: TItem): void => {\n        this.throwIfDisposed();\n        this.insertAt(this.privList.length, item);\n    }\n\n    public insertAt = (index: number, item: TItem): void => {\n        this.throwIfDisposed();\n        if (index === 0) {\n            this.privList.unshift(item);\n        } else if (index === this.privList.length) {\n            this.privList.push(item);\n        } else {\n            this.privList.splice(index, 0, item);\n        }\n        this.triggerSubscriptions(this.privAddSubscriptions);\n    }\n\n    public removeFirst = (): TItem => {\n        this.throwIfDisposed();\n        return this.removeAt(0);\n    }\n\n    public removeLast = (): TItem => {\n        this.throwIfDisposed();\n        return this.removeAt(this.length() - 1);\n    }\n\n    public removeAt = (index: number): TItem => {\n        this.throwIfDisposed();\n        return this.remove(index, 1)[0];\n    }\n\n    public remove = (index: number, count: number): TItem[] => {\n        this.throwIfDisposed();\n        const removedElements = this.privList.splice(index, count);\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\n        return removedElements;\n    }\n\n    public clear = (): void => {\n        this.throwIfDisposed();\n        this.remove(0, this.length());\n    }\n\n    public length = (): number => {\n        this.throwIfDisposed();\n        return this.privList.length;\n    }\n\n    public onAdded = (addedCallback: () => void): IDetachable => {\n        this.throwIfDisposed();\n        const subscriptionId = this.privSubscriptionIdCounter++;\n\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\n\n        return {\n            detach: () => {\n                delete this.privAddSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public onRemoved = (removedCallback: () => void): IDetachable => {\n        this.throwIfDisposed();\n        const subscriptionId = this.privSubscriptionIdCounter++;\n\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\n\n        return {\n            detach: () => {\n                delete this.privRemoveSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public onDisposed = (disposedCallback: () => void): IDetachable => {\n        this.throwIfDisposed();\n        const subscriptionId = this.privSubscriptionIdCounter++;\n\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\n\n        return {\n            detach: () => {\n                delete this.privDisposedSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public join = (seperator?: string): string => {\n        this.throwIfDisposed();\n        return this.privList.join(seperator);\n    }\n\n    public toArray = (): TItem[] => {\n        const cloneCopy = Array<TItem>();\n        this.privList.forEach((val: TItem) => {\n            cloneCopy.push(val);\n        });\n        return cloneCopy;\n    }\n\n    public any = (callback?: (item: TItem, index: number) => boolean): boolean => {\n        this.throwIfDisposed();\n        if (callback) {\n            return this.where(callback).length() > 0;\n        } else {\n            return this.length() > 0;\n        }\n    }\n\n    public all = (callback: (item: TItem) => boolean): boolean => {\n        this.throwIfDisposed();\n        return this.where(callback).length() === this.length();\n    }\n\n    public forEach = (callback: (item: TItem, index: number) => void): void => {\n        this.throwIfDisposed();\n        for (let i = 0; i < this.length(); i++) {\n            callback(this.privList[i], i);\n        }\n    }\n\n    public select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\n        this.throwIfDisposed();\n        const selectList: T2[] = [];\n        for (let i = 0; i < this.privList.length; i++) {\n            selectList.push(callback(this.privList[i], i));\n        }\n\n        return new List<T2>(selectList);\n    }\n\n    public where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\n        this.throwIfDisposed();\n        const filteredList = new List<TItem>();\n        for (let i = 0; i < this.privList.length; i++) {\n            if (callback(this.privList[i], i)) {\n                filteredList.add(this.privList[i]);\n            }\n        }\n        return filteredList;\n    }\n\n    public orderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.throwIfDisposed();\n        const clonedArray = this.toArray();\n        const orderedArray = clonedArray.sort(compareFn);\n        return new List(orderedArray);\n    }\n\n    public orderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.throwIfDisposed();\n        return this.orderBy((a: TItem, b: TItem) => compareFn(b, a));\n    }\n\n    public clone = (): List<TItem> => {\n        this.throwIfDisposed();\n        return new List<TItem>(this.toArray());\n    }\n\n    public concat = (list: List<TItem>): List<TItem> => {\n        this.throwIfDisposed();\n        return new List<TItem>(this.privList.concat(list.toArray()));\n    }\n\n    public concatArray = (array: TItem[]): List<TItem> => {\n        this.throwIfDisposed();\n        return new List<TItem>(this.privList.concat(array));\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privList == null;\n    }\n\n    public dispose = (reason?: string): void => {\n        if (!this.isDisposed()) {\n            this.privDisposeReason = reason;\n            this.privList = null;\n            this.privAddSubscriptions = null;\n            this.privRemoveSubscriptions = null;\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\n        }\n    }\n\n    private throwIfDisposed = (): void => {\n        if (this.isDisposed()) {\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\n        }\n    }\n\n    private triggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\n        if (subscriptions) {\n            for (const subscriptionId in subscriptions) {\n                if (subscriptionId) {\n                    subscriptions[subscriptionId]();\n                }\n            }\n        }\n    }\n}\n"]}