{"version":3,"sources":["../../src/common/Queue.ts"],"names":[],"mappings":"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","file":"Queue.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IDisposable } from \"./IDisposable\";\nimport { List } from \"./List\";\nimport { Deferred, Promise, PromiseHelper } from \"./Promise\";\n\nexport interface IQueue<TItem> extends IDisposable {\n    enqueue(item: TItem): void;\n    enqueueFromPromise(promise: Promise<TItem>): void;\n    dequeue(): Promise<TItem>;\n    peek(): Promise<TItem>;\n    length(): number;\n}\n\nenum SubscriberType {\n    Dequeue,\n    Peek,\n}\n\nexport class Queue<TItem> implements IQueue<TItem> {\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\n    private privList: List<TItem>;\n    private privDetachables: IDetachable[];\n    private privSubscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\n    private privIsDrainInProgress: boolean = false;\n    private privIsDisposing: boolean = false;\n    private privDisposeReason: string = null;\n\n    public constructor(list?: List<TItem>) {\n        this.privList = list ? list : new List<TItem>();\n        this.privDetachables = [];\n        this.privSubscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\n        this.privDetachables.push(this.privList.onAdded(this.drain));\n    }\n\n    public enqueue = (item: TItem): void => {\n        this.throwIfDispose();\n        this.enqueueFromPromise(PromiseHelper.fromResult(item));\n    }\n\n    public enqueueFromPromise = (promise: Promise<TItem>): void => {\n        this.throwIfDispose();\n        this.privPromiseStore.add(promise);\n        promise.finally(() => {\n            while (this.privPromiseStore.length() > 0) {\n                if (!this.privPromiseStore.first().result().isCompleted) {\n                    break;\n                } else {\n                    const p = this.privPromiseStore.removeFirst();\n                    if (!p.result().isError) {\n                        this.privList.add(p.result().result);\n                    } else {\n                        // TODO: Log as warning.\n                    }\n                }\n            }\n        });\n    }\n\n    public dequeue = (): Promise<TItem> => {\n        this.throwIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n\n        if (this.privSubscribers) {\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\n            this.drain();\n        }\n\n        return deferredSubscriber.promise();\n    }\n\n    public peek = (): Promise<TItem> => {\n        this.throwIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n\n        const subs = this.privSubscribers;\n        if (subs) {\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\n            this.drain();\n        }\n\n        return deferredSubscriber.promise();\n    }\n\n    public length = (): number => {\n        this.throwIfDispose();\n        return this.privList.length();\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privSubscribers == null;\n    }\n\n    public drainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\n        if (!this.isDisposed() && !this.privIsDisposing) {\n            this.privDisposeReason = reason;\n            this.privIsDisposing = true;\n\n            const subs = this.privSubscribers;\n            if (subs) {\n                while (subs.length() > 0) {\n                    const subscriber = subs.removeFirst();\n                    // TODO: this needs work (Resolve(null) instead?).\n                    subscriber.deferral.resolve(undefined);\n                    // subscriber.deferral.reject(\"Disposed\");\n                }\n\n                // note: this block assumes cooperative multitasking, i.e.,\n                // between the if-statement and the assignment there are no\n                // thread switches.\n                // Reason is that between the initial const = this.; and this\n                // point there is the derral.resolve() operation that might have\n                // caused recursive calls to the Queue, especially, calling\n                // Dispose() on the queue alredy (which would reset the var\n                // here to null!).\n                // That should generally hold true for javascript...\n                if (this.privSubscribers === subs) {\n                    this.privSubscribers = subs;\n                }\n            }\n\n            for (const detachable of this.privDetachables) {\n                detachable.detach();\n            }\n\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\n                return PromiseHelper\n                    .whenAll(this.privPromiseStore.toArray())\n                    .continueWith(() => {\n                        this.privSubscribers = null;\n                        this.privList.forEach((item: TItem, index: number): void => {\n                            pendingItemProcessor(item);\n                        });\n                        this.privList = null;\n                        return true;\n                    });\n            } else {\n                this.privSubscribers = null;\n                this.privList = null;\n            }\n        }\n\n        return PromiseHelper.fromResult(true);\n    }\n\n    public dispose = (reason?: string): void => {\n        this.drainAndDispose(null, reason);\n    }\n\n    private drain = (): void => {\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\n            this.privIsDrainInProgress = true;\n\n            const subs = this.privSubscribers;\n            const lists = this.privList;\n            if (subs && lists) {\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\n                    const subscriber = subs.removeFirst();\n                    if (subscriber.type === SubscriberType.Peek) {\n                        subscriber.deferral.resolve(lists.first());\n                    } else {\n                        const dequeuedItem = lists.removeFirst();\n                        subscriber.deferral.resolve(dequeuedItem);\n                    }\n                }\n\n                // note: this block assumes cooperative multitasking, i.e.,\n                // between the if-statement and the assignment there are no\n                // thread switches.\n                // Reason is that between the initial const = this.; and this\n                // point there is the derral.resolve() operation that might have\n                // caused recursive calls to the Queue, especially, calling\n                // Dispose() on the queue alredy (which would reset the var\n                // here to null!).\n                // That should generally hold true for javascript...\n                if (this.privSubscribers === subs) {\n                    this.privSubscribers = subs;\n                }\n\n                // note: this block assumes cooperative multitasking, i.e.,\n                // between the if-statement and the assignment there are no\n                // thread switches.\n                // Reason is that between the initial const = this.; and this\n                // point there is the derral.resolve() operation that might have\n                // caused recursive calls to the Queue, especially, calling\n                // Dispose() on the queue alredy (which would reset the var\n                // here to null!).\n                // That should generally hold true for javascript...\n                if (this.privList === lists) {\n                    this.privList = lists;\n                }\n            }\n\n            this.privIsDrainInProgress = false;\n        }\n    }\n\n    private throwIfDispose = (): void => {\n        if (this.isDisposed()) {\n            if (this.privDisposeReason) {\n                throw new InvalidOperationError(this.privDisposeReason);\n            }\n\n            throw new ObjectDisposedError(\"Queue\");\n        } else if (this.privIsDisposing) {\n            throw new InvalidOperationError(\"Queue disposing\");\n        }\n    }\n}\n"]}