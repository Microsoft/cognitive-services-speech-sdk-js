{"version":3,"sources":["../../src/common.browser/PCMRecorder.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,6CAA2D;AAG3D;IAAA;QAAA,iBA8DC;QA3DU,WAAM,GAAG,UAAC,OAAqB,EAAE,WAAwB,EAAE,YAAiC;YAC/F,IAAM,iBAAiB,GAAG,KAAK,CAAC;YAEhC,IAAM,UAAU,GAAG,CAAC;gBAChB,IAAI,UAAU,GAAG,CAAC,CAAC;gBACnB,IAAI;oBACA,OAAO,OAAO,CAAC,qBAAqB,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC1D;gBAAC,OAAO,KAAK,EAAE;oBACZ,sDAAsD;oBACtD,UAAU,GAAG,IAAI,CAAC;oBAClB,IAAI,eAAe,GAAG,OAAO,CAAC,UAAU,CAAC;oBACzC,OAAO,UAAU,GAAG,KAAK,IAAI,eAAe,IAAI,CAAC,CAAC,GAAG,iBAAiB,CAAC,EAAE;wBACrE,UAAU,KAAK,CAAC,CAAE;wBAClB,eAAe,KAAK,CAAC,CAAC;qBACzB;oBACD,OAAO,OAAO,CAAC,qBAAqB,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC1D;YACL,CAAC,CAAC,EAAE,CAAC;YAEL,IAAM,iBAAiB,GAAG,IAAI,wBAAc,CAAC,OAAO,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;YACpF,IAAI,UAAU,GAAY,IAAI,CAAC;YAC/B,IAAM,IAAI,GAAG,KAAI,CAAC;YAClB,UAAU,CAAC,cAAc,GAAG,UAAC,KAA2B;gBACpD,IAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAEvD,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;oBACxC,IAAM,SAAS,GAAG,iBAAiB,CAAC,MAAM,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;oBACnE,IAAI,CAAC,CAAC,SAAS,EAAE;wBACb,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;wBAC9B,UAAU,GAAG,KAAK,CAAC;qBACtB;iBACJ;YACL,CAAC,CAAC;YAEF,IAAM,QAAQ,GAAG,OAAO,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YAE9D,KAAI,CAAC,kBAAkB,GAAG;gBACtB,mBAAmB,EAAE,UAAU;gBAC/B,MAAM,EAAE,QAAQ;gBAChB,MAAM,EAAE,WAAW;aACtB,CAAC;YAEF,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC7B,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC5C,CAAC,CAAA;QAEM,0BAAqB,GAAG,UAAC,OAAqB;YACjD,IAAI,KAAI,CAAC,kBAAkB,EAAE;gBACzB,IAAI,KAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE;oBAC7C,KAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;oBAC5E,KAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,IAAI,CAAC;iBACtD;gBACD,IAAI,KAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE;oBAChC,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;oBAC5C,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,UAAC,KAAU,IAAK,OAAA,KAAK,CAAC,IAAI,EAAE,EAAZ,CAAY,CAAC,CAAC;oBACjF,KAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,IAAI,CAAC;iBACzC;aACJ;QACL,CAAC,CAAA;IACL,CAAC;IAAD,kBAAC;AAAD,CA9DA,AA8DC,IAAA;AA9DY,kCAAW","file":"PCMRecorder.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\nexport class PcmRecorder implements IRecorder {\n    private privMediaResources: IMediaResources;\n\n    public record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\n        const desiredSampleRate = 16000;\n\n        const scriptNode = (() => {\n            let bufferSize = 0;\n            try {\n                return context.createScriptProcessor(bufferSize, 1, 1);\n            } catch (error) {\n                // Webkit (<= version 31) requires a valid bufferSize.\n                bufferSize = 2048;\n                let audioSampleRate = context.sampleRate;\n                while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\n                    bufferSize <<= 1 ;\n                    audioSampleRate >>= 1;\n                }\n                return context.createScriptProcessor(bufferSize, 1, 1);\n            }\n        })();\n\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\n        let needHeader: boolean = true;\n        const that = this;\n        scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\n            const inputFrame = event.inputBuffer.getChannelData(0);\n\n            if (outputStream && !outputStream.isClosed) {\n                const waveFrame = waveStreamEncoder.encode(needHeader, inputFrame);\n                if (!!waveFrame) {\n                    outputStream.write(waveFrame);\n                    needHeader = false;\n                }\n            }\n        };\n\n        const micInput = context.createMediaStreamSource(mediaStream);\n\n        this.privMediaResources = {\n            scriptProcessorNode: scriptNode,\n            source: micInput,\n            stream: mediaStream,\n        };\n\n        micInput.connect(scriptNode);\n        scriptNode.connect(context.destination);\n    }\n\n    public releaseMediaResources = (context: AudioContext): void => {\n        if (this.privMediaResources) {\n            if (this.privMediaResources.scriptProcessorNode) {\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\n                this.privMediaResources.scriptProcessorNode = null;\n            }\n            if (this.privMediaResources.source) {\n                this.privMediaResources.source.disconnect();\n                this.privMediaResources.stream.getTracks().forEach((track: any) => track.stop());\n                this.privMediaResources.source = null;\n            }\n        }\n    }\n}\n\ninterface IMediaResources {\n    source: MediaStreamAudioSourceNode;\n    scriptProcessorNode: ScriptProcessorNode;\n    stream: MediaStream;\n}\n"]}