{"version":3,"sources":["../../src/common.speech/TranslationConnectionFactory.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,qDAAgE;AAChE,6CAA4E;AAC5E,0CAA4C;AAC5C,qCAAsG;AAEtG,IAAM,kBAAkB,GAAW,WAAW,CAAC;AAC/C,IAAM,kBAAkB,GAAW,gBAAgB,CAAC;AAEpD;IAAA;QAAA,iBA8CC;QA5CU,WAAM,GAAG,UACZ,MAAwB,EACxB,QAAkB,EAClB,YAAqB;YAErB,IAAI,QAAQ,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,gCAAgC,EAAE,SAAS,CAAC,CAAC;YAC7G,IAAI,CAAC,QAAQ,EAAE;gBACX,IAAM,MAAM,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,8BAA8B,EAAE,SAAS,CAAC,CAAC;gBAE3G,QAAQ,GAAG,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,iBAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,wBAAwB,EAAE,0CAA0C,CAAC,CAAC;aAC/H;YAED,IAAM,WAAW,GAA8B;gBAC3C,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,oCAAoC,CAAC;gBACpF,EAAE,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,8CAA8C,CAAC;aAC/F,CAAC;YAEF,IAAI,KAAI,CAAC,kBAAkB,EAAE;gBACzB,WAAW,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC;aACzC;YAED,IAAM,SAAS,GAAW,OAAO,CAAC;YAClC,IAAM,WAAW,GAAW,UAAU,CAAC;YAEvC,IAAI,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,wCAAwC,EAAE,SAAS,CAAC,KAAK,SAAS,EAAE;gBAC7G,WAAW,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,wCAAwC,CAAC,CAAC;gBAC5G,WAAW,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC;aAC7C;YAED,IAAM,OAAO,GAA8B,EAAE,CAAC;YAC9C,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;YAC9C,OAAO,CAAC,kBAAkB,CAAC,GAAG,YAAY,CAAC;YAE3C,OAAO,IAAI,6BAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,mCAAyB,EAAE,EAAE,YAAY,CAAC,CAAC;QAClH,CAAC,CAAA;IAUL,CAAC;IARW,2CAAI,GAAZ,UAAa,MAAc;QACvB,OAAO,iBAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,GAAG,MAAM,GAAG,2BAA2B,CAAC,CAAC;IAC3F,CAAC;IAED,sBAAY,4DAAkB;aAA9B;YACI,IAAM,KAAK,GAAG,iBAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;YACpE,OAAO,KAAK,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;QAC1C,CAAC;;;OAAA;IACL,mCAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,oEAA4B","file":"TranslationConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { WebsocketConnection } from \"../common.browser/Exports\";\nimport { IConnection, IStringDictionary, Storage } from \"../common/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { AuthInfo, IConnectionFactory, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\n\nconst TestHooksParamName: string = \"testhooks\";\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\n\nexport class TranslationConnectionFactory implements IConnectionFactory {\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n\n            endpoint = this.host(region) + Storage.local.getOrAdd(\"TranslationRelativeUri\", \"/speech/translation/cognitiveservices/v1\");\n        }\n\n        const queryParams: IStringDictionary<string> = {\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\n        };\n\n        if (this.isDebugModeEnabled) {\n            queryParams[TestHooksParamName] = \"1\";\n        }\n\n        const voiceName: string = \"voice\";\n        const featureName: string = \"features\";\n\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\n            queryParams[featureName] = \"texttospeech\";\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[authInfo.headerName] = authInfo.token;\n        headers[ConnectionIdHeader] = connectionId;\n\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\n    }\n\n    private host(region: string): string {\n        return Storage.local.getOrAdd(\"Host\", \"wss://\" + region + \".s2s.speech.microsoft.com\");\n    }\n\n    private get isDebugModeEnabled(): boolean {\n        const value = Storage.local.getOrAdd(\"IsDebugModeEnabled\", \"false\");\n        return value.toLowerCase() === \"true\";\n    }\n}\n"]}