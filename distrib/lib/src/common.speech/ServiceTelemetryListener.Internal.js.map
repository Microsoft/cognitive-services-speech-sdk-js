{"version":3,"sources":["../../src/common.speech/ServiceTelemetryListener.Internal.ts"],"names":[],"mappings":"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","file":"ServiceTelemetryListener.Internal.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    AudioSourceErrorEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEstablishErrorEvent,\n    ConnectionMessageReceivedEvent,\n    ConnectionStartEvent,\n    IEventListener,\n    IStringDictionary,\n    PlatformEvent,\n} from \"../common/Exports\";\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\n\ninterface ITelemetry {\n    Metrics: IMetric[];\n    ReceivedMessages: IStringDictionary<string[]>;\n}\n\n// tslint:disable-next-line:max-classes-per-file\ninterface IMetric {\n    End: string;\n    Error?: string;\n    Id?: string;\n    Name: string;\n    Start: string;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\n    private privIsDisposed: boolean = false;\n\n    private privRequestId: string;\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n\n    private privListeningTriggerMetric: IMetric = null;\n    private privMicMetric: IMetric = null;\n    private privConnectionEstablishMetric: IMetric = null;\n\n    private privMicStartTime: string;\n\n    private privConnectionId: string;\n    private privConnectionStartTime: string;\n\n    private privReceivedMessages: IStringDictionary<string[]>;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        this.privRequestId = requestId;\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n\n        this.privReceivedMessages = {};\n    }\n\n    public onEvent = (e: PlatformEvent): void => {\n        if (this.privIsDisposed) {\n            return;\n        }\n\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\n            this.privListeningTriggerMetric = {\n                End: e.eventTime,\n                Name: \"ListeningTrigger\",\n                Start: e.eventTime,\n            };\n        }\n\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            this.privMicStartTime = e.eventTime;\n        }\n\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            this.privMicStartTime = e.eventTime;\n        }\n\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\n            if (!this.privMicMetric) {\n                this.privMicMetric = {\n                    End: e.eventTime,\n                    Error: e.error,\n                    Name: \"Microphone\",\n                    Start: this.privMicStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            if (!this.privMicMetric) {\n                this.privMicMetric = {\n                    End: e.eventTime,\n                    Error: e.error,\n                    Name: \"Microphone\",\n                    Start: this.privMicStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            if (!this.privMicMetric) {\n                this.privMicMetric = {\n                    End: e.eventTime,\n                    Name: \"Microphone\",\n                    Start: this.privMicStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\n            this.privConnectionId = e.sessionId;\n        }\n\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\n            this.privConnectionStartTime = e.eventTime;\n        }\n\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\n            if (!this.privConnectionEstablishMetric) {\n                this.privConnectionEstablishMetric = {\n                    End: e.eventTime,\n                    Id: this.privConnectionId,\n                    Name: \"Connection\",\n                    Start: this.privConnectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\n            if (!this.privConnectionEstablishMetric) {\n                this.privConnectionEstablishMetric = {\n                    End: e.eventTime,\n                    Error: this.getConnectionError(e.statusCode),\n                    Id: this.privConnectionId,\n                    Name: \"Connection\",\n                    Start: this.privConnectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\n            if (e.message && e.message.headers && e.message.headers.path) {\n                if (!this.privReceivedMessages[e.message.headers.path]) {\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\n                }\n\n                this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\n            }\n        }\n    }\n\n    public getTelemetry = (): string => {\n        const metrics = new Array<IMetric>();\n\n        if (this.privListeningTriggerMetric) {\n            metrics.push(this.privListeningTriggerMetric);\n        }\n\n        if (this.privMicMetric) {\n            metrics.push(this.privMicMetric);\n        }\n\n        if (this.privConnectionEstablishMetric) {\n            metrics.push(this.privConnectionEstablishMetric);\n        }\n\n        const telemetry: ITelemetry = {\n            Metrics: metrics,\n            ReceivedMessages: this.privReceivedMessages,\n        };\n\n        const json = JSON.stringify(telemetry);\n\n        // We dont want to send the same telemetry again. So clean those out.\n        this.privReceivedMessages = {};\n        this.privListeningTriggerMetric = null;\n        this.privMicMetric = null;\n        this.privConnectionEstablishMetric = null;\n\n        return json;\n    }\n\n    public dispose = (): void => {\n        this.privIsDisposed = true;\n    }\n\n    private getConnectionError = (statusCode: number): string => {\n        /*\n        -- Websocket status codes --\n        NormalClosure = 1000,\n        EndpointUnavailable = 1001,\n        ProtocolError = 1002,\n        InvalidMessageType = 1003,\n        Empty = 1005,\n        InvalidPayloadData = 1007,\n        PolicyViolation = 1008,\n        MessageTooBig = 1009,\n        MandatoryExtension = 1010,\n        InternalServerError = 1011\n        */\n\n        switch (statusCode) {\n            case 400:\n            case 1002:\n            case 1003:\n            case 1005:\n            case 1007:\n            case 1008:\n            case 1009: return \"BadRequest\";\n            case 401: return \"Unauthorized\";\n            case 403: return \"Forbidden\";\n            case 503:\n            case 1001: return \"ServerUnavailable\";\n            case 500:\n            case 1011: return \"ServerError\";\n            case 408:\n            case 504: return \"Timeout\";\n            default: return \"statuscode:\" + statusCode.toString();\n        }\n    }\n}\n"]}