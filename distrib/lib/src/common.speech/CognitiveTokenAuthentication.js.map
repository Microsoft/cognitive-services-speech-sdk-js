{"version":3,"sources":["../../src/common.speech/CognitiveTokenAuthentication.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,6CAA+D;AAC/D,qDAA8D;AAE9D,IAAM,UAAU,GAAW,eAAe,CAAC;AAE3C;IAII,sCAAY,aAA4D,EAAE,qBAAoE;QAA9I,iBAWC;QAEM,UAAK,GAAG,UAAC,gBAAwB;YACpC,OAAQ,KAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,UAAC,KAAa,IAAK,OAAA,IAAI,0BAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,EAA/B,CAA+B,CAAC,CAAC;QAC/H,CAAC,CAAA;QAEM,kBAAa,GAAG,UAAC,gBAAwB;YAC5C,OAAQ,KAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,UAAC,KAAa,IAAK,OAAA,IAAI,0BAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,EAA/B,CAA+B,CAAC,CAAC;QACvI,CAAC,CAAA;QAlBG,IAAI,CAAC,aAAa,EAAE;YAChB,MAAM,IAAI,2BAAiB,CAAC,eAAe,CAAC,CAAC;SAChD;QAED,IAAI,CAAC,qBAAqB,EAAE;YACxB,MAAM,IAAI,2BAAiB,CAAC,uBAAuB,CAAC,CAAC;SACxD;QAED,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;QACvC,IAAI,CAAC,yBAAyB,GAAG,qBAAqB,CAAC;IAC3D,CAAC;IASL,mCAAC;AAAD,CAxBA,AAwBC,IAAA;AAxBY,oEAA4B","file":"CognitiveTokenAuthentication.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError, Promise } from \"../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Authorization\";\n\nexport class CognitiveTokenAuthentication implements IAuthentication {\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\n\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\n        if (!fetchCallback) {\n            throw new ArgumentNullError(\"fetchCallback\");\n        }\n\n        if (!fetchOnExpiryCallback) {\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\n        }\n\n        this.privFetchCallback = fetchCallback;\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\n    }\n\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.privFetchCallback(authFetchEventId).onSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.privFetchOnExpiryCallback(authFetchEventId).onSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n}\n"]}