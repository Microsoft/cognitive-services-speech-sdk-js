{"version":3,"sources":["../../src/common.speech/SpeechConnectionFactory.ts"],"names":[],"mappings":"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","file":"SpeechConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { WebsocketConnection } from \"../common.browser/Exports\";\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { IConnection, IStringDictionary, Storage } from \"../common/Exports\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { AuthInfo, IConnectionFactory, RecognitionMode, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\n\nexport class SpeechConnectionFactory implements IConnectionFactory {\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n        const queryParams: IStringDictionary<string> = {};\n\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n        if (endpointId) {\n            if (!endpoint || endpoint.search(QueryParameterNames.DeploymentIdParamName) === -1) {\n                queryParams[QueryParameterNames.DeploymentIdParamName] = endpointId;\n            }\n        } else if (language) {\n            if (!endpoint || endpoint.search(QueryParameterNames.LanguageParamName) === -1) {\n                queryParams[QueryParameterNames.LanguageParamName] = language;\n            }\n        }\n\n        if (!endpoint || endpoint.search(QueryParameterNames.FormatParamName) === -1) {\n            queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n        }\n\n        if (this.isDebugModeEnabled) {\n            queryParams[QueryParameterNames.TestHooksParamName] = \"1\";\n        }\n\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n\n            switch (config.recognitionMode) {\n                case RecognitionMode.Conversation:\n                    endpoint = this.host(region) + this.conversationRelativeUri;\n                    break;\n                case RecognitionMode.Dictation:\n                    endpoint = this.host(region) + this.dictationRelativeUri;\n                    break;\n                default:\n                    endpoint = this.host(region) + this.interactiveRelativeUri; // default is interactive\n                    break;\n            }\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[authInfo.headerName] = authInfo.token;\n        headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\n\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\n    }\n\n    private host(region: string): string {\n        return Storage.local.getOrAdd(\"Host\", \"wss://\" + region + \".stt.speech.microsoft.com\");\n    }\n\n    private get interactiveRelativeUri(): string {\n        return Storage.local.getOrAdd(\"InteractiveRelativeUri\", \"/speech/recognition/interactive/cognitiveservices/v1\");\n    }\n\n    private get conversationRelativeUri(): string {\n        return Storage.local.getOrAdd(\"ConversationRelativeUri\", \"/speech/recognition/conversation/cognitiveservices/v1\");\n    }\n\n    private get dictationRelativeUri(): string {\n        return Storage.local.getOrAdd(\"DictationRelativeUri\", \"/speech/recognition/dictation/cognitiveservices/v1\");\n    }\n\n    private get isDebugModeEnabled(): boolean {\n        const value = Storage.local.getOrAdd(\"IsDebugModeEnabled\", \"false\");\n        return value.toLowerCase() === \"true\";\n    }\n}\n"]}