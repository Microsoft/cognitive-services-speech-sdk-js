{"version":3,"sources":["../../src/common.speech/IntentServiceRecognizer.ts"],"names":[],"mappings":"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","file":"IntentServiceRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IAudioSource, IConnection } from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    IntentRecognitionCanceledEventArgs,\n    IntentRecognitionEventArgs,\n    IntentRecognitionResult,\n    IntentRecognizer,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SpeechRecognitionResult,\n} from \"../sdk/Exports\";\nimport {\n    AddedLmIntent,\n    CancellationErrorCodePropertyName,\n    EnumTranslation,\n    IntentResponse,\n    RequestSession,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechHypothesis,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\n    private privIntentRecognizer: IntentRecognizer;\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\n    private privIntentDataSent: boolean;\n    private privUmbrellaIntent: AddedLmIntent;\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        recognizer: IntentRecognizer,\n        intentDataSent: boolean) {\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\n        this.privIntentRecognizer = recognizer;\n        this.privIntentDataSent = intentDataSent;\n    }\n\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent; }, umbrellaIntent: AddedLmIntent): void {\n        this.privAddedLmIntents = addedIntents;\n        this.privUmbrellaIntent = umbrellaIntent;\n    }\n\n    protected processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        requestSession: RequestSession,\n        connection: IConnection,\n        successCallback?: (e: IntentRecognitionResult) => void,\n        errorCallBack?: (e: string) => void): void {\n\n        let result: IntentRecognitionResult;\n        let ev: IntentRecognitionEventArgs;\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.hypothesis\":\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n\n                result = new IntentRecognitionResult(\n                    undefined,\n                    requestSession.requestId,\n                    ResultReason.RecognizingIntent,\n                    speechHypothesis.Text,\n                    speechHypothesis.Duration,\n                    speechHypothesis.Offset + requestSession.currentTurnAudioOffset,\n                    undefined,\n                    connectionMessage.textBody,\n                    undefined);\n\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + requestSession.currentTurnAudioOffset, requestSession.sessionId);\n\n                if (!!this.privIntentRecognizer.recognizing) {\n                    try {\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n\n                break;\n            case \"speech.phrase\":\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n\n                result = new IntentRecognitionResult(\n                    undefined,\n                    requestSession.requestId,\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\n                    simple.DisplayText,\n                    simple.Duration,\n                    simple.Offset + requestSession.currentTurnAudioOffset,\n                    undefined,\n                    connectionMessage.textBody,\n                    undefined);\n\n                ev = new IntentRecognitionEventArgs(result, result.offset + requestSession.currentTurnAudioOffset, requestSession.sessionId);\n\n                const sendEvent: () => void = () => {\n                    if (this.privRecognizerConfig.isContinuousRecognition) {\n                        // For continuous recognition telemetry has to be sent for every phrase as per spec.\n                        this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n                    }\n\n                    if (!!this.privIntentRecognizer.recognized) {\n                        try {\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n                            /* tslint:disable:no-empty */\n                        } catch (error) {\n                            // Not going to let errors in the event handler\n                            // trip things up.\n                        }\n                    }\n\n                    // report result to promise.\n                    if (!!successCallback) {\n                        try {\n                            successCallback(result);\n                        } catch (e) {\n                            if (!!errorCallBack) {\n                                errorCallBack(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        successCallback = undefined;\n                        errorCallBack = undefined;\n                    }\n                };\n\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\n                // If no intent data was sent, the terminal event is speech recognition being successful.\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\n                    sendEvent();\n                } else {\n                    // Squirrel away the args, when the response event arrives it will build upon them\n                    // and then return\n                    this.privPendingIntentArgs = ev;\n                }\n\n                break;\n            case \"response\":\n                // Response from LUIS\n                if (this.privRecognizerConfig.isContinuousRecognition) {\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\n                    this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n                }\n\n                ev = this.privPendingIntentArgs;\n                this.privPendingIntentArgs = undefined;\n\n                if (undefined === ev) {\n                    if (\"\" === connectionMessage.textBody) {\n                        // This condition happens if there is nothing but silence in the\n                        // audio sent to the service.\n                        return;\n                    }\n\n                    // Odd... Not sure this can happen\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0 /*TODO*/, requestSession.sessionId);\n                }\n\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\n\n                // If LUIS didn't return anything, send the existing event, else\n                // modify it to show the match.\n                // See if the intent found is in the list of intents asked for.\n                let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\n\n                if (this.privUmbrellaIntent !== undefined) {\n                    addedIntent = this.privUmbrellaIntent;\n                }\n\n                if (null !== intentResponse && addedIntent !== undefined) {\n                    const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\n                    let reason = ev.result.reason;\n\n                    if (undefined !== intentId) {\n                        reason = ResultReason.RecognizedIntent;\n                    }\n\n                    // make sure, properties is set.\n                    const properties = (undefined !== ev.result.properties) ?\n                        ev.result.properties : new PropertyCollection();\n\n                    properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\n\n                    ev = new IntentRecognitionEventArgs(\n                        new IntentRecognitionResult(\n                            intentId,\n                            ev.result.resultId,\n                            reason,\n                            ev.result.text,\n                            ev.result.duration,\n                            ev.result.offset + requestSession.currentTurnAudioOffset,\n                            ev.result.errorDetails,\n                            ev.result.json,\n                            properties),\n                        ev.offset + requestSession.currentTurnAudioOffset,\n                        ev.sessionId);\n                }\n\n                if (!!this.privIntentRecognizer.recognized) {\n                    try {\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n\n                // report result to promise.\n                if (!!successCallback) {\n                    try {\n                        successCallback(ev.result);\n                    } catch (e) {\n                        if (!!errorCallBack) {\n                            errorCallBack(e);\n                        }\n                    }\n                    // Only invoke the call back once.\n                    // and if it's successful don't invoke the\n                    // error after that.\n                    successCallback = undefined;\n                    errorCallBack = undefined;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string,\n        cancelRecoCallback: (e: SpeechRecognitionResult) => void): void {\n\n        if (!!this.privIntentRecognizer.canceled) {\n            const properties: PropertyCollection = new PropertyCollection();\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\n                cancellationReason,\n                error,\n                errorCode,\n                undefined,\n                undefined,\n                sessionId);\n            try {\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n\n            if (!!cancelRecoCallback) {\n                const result: IntentRecognitionResult = new IntentRecognitionResult(\n                    undefined, // Intent Id\n                    requestId,\n                    ResultReason.Canceled,\n                    undefined, // Text\n                    undefined, // Druation\n                    undefined, // Offset\n                    error,\n                    undefined, // Json\n                    properties);\n                try {\n                    cancelRecoCallback(result);\n                    /* tslint:disable:no-empty */\n                } catch { }\n            }\n        }\n    }\n}\n"]}