{"version":3,"sources":["../../src/common.speech/RequestSession.ts"],"names":[],"mappings":"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","file":"RequestSession.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport {\n    createNoDashGuid,\n    Deferred,\n    Events,\n    IAudioStreamNode,\n    IDetachable,\n    IEventSource,\n    PlatformEvent,\n    Promise,\n} from \"../common/Exports\";\nimport {\n    ConnectingToServiceEvent,\n    ListeningStartedEvent,\n    RecognitionStartedEvent,\n    RecognitionTriggeredEvent,\n    SpeechRecognitionEvent,\n} from \"./RecognitionEvents\";\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\n\nexport class RequestSession {\n    private privIsDisposed: boolean = false;\n    private privServiceTelemetryListener: ServiceTelemetryListener;\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\n    private privRequestId: string;\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n    private privAudioNode: ReplayableAudioNode;\n    private privAuthFetchEventId: string;\n    private privIsAudioNodeDetached: boolean = false;\n    private privIsCompleted: boolean = false;\n    private privRequestCompletionDeferral: Deferred<boolean>;\n    private privIsSpeechEnded: boolean = false;\n    private privIsCanceled: boolean = false;\n    private privContextJson: string;\n    private privTurnStartAudioOffset: number = 0;\n    private privLastRecoOffset: number = 0;\n\n    protected privSessionId: string;\n\n    constructor(audioSourceId: string, contextJson: string) {\n        this.privAudioSourceId = audioSourceId;\n        this.privRequestId = createNoDashGuid();\n        this.privAudioNodeId = createNoDashGuid();\n        this.privRequestCompletionDeferral = new Deferred<boolean>();\n        this.privContextJson = contextJson;\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\n\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n    }\n\n    public get contextJson(): string {\n        return this.privContextJson;\n    }\n\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n\n    public get completionPromise(): Promise<boolean> {\n        return this.privRequestCompletionDeferral.promise();\n    }\n\n    public get isSpeechEnded(): boolean {\n        return this.privIsSpeechEnded;\n    }\n\n    public get isCompleted(): boolean {\n        return this.privIsCompleted;\n    }\n\n    public get isCanceled(): boolean {\n        return this.privIsCanceled;\n    }\n\n    public get currentTurnAudioOffset(): number {\n        return this.privTurnStartAudioOffset;\n    }\n\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\n        this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\n    }\n\n    public onAudioSourceAttachCompleted = (audioNode: ReplayableAudioNode, isError: boolean, error?: string): void => {\n        this.privAudioNode = audioNode;\n\n        if (isError) {\n            this.onComplete();\n        } else {\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n        }\n    }\n\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\n        this.privAuthFetchEventId = authFetchEventId;\n        this.privSessionId = connectionId;\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\n    }\n\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\n        if (isError) {\n            this.onComplete();\n        }\n    }\n\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\n        if (statusCode === 200) {\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\n            this.privAudioNode.replay();\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\n            return;\n        } else if (statusCode === 403) {\n            this.onComplete();\n        } else {\n            this.onComplete();\n        }\n    }\n\n    public onServiceTurnEndResponse = (continuousRecognition: boolean): void => {\n        if (!continuousRecognition || this.isSpeechEnded) {\n            this.onComplete();\n        } else {\n            // Start a new request set.\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\n            this.privRequestId = createNoDashGuid();\n            this.privAudioNode.replay();\n        }\n    }\n\n    public onServiceRecognized(offset: number): void {\n        this.privLastRecoOffset = offset;\n        this.privAudioNode.shrinkBuffers(offset);\n    }\n\n    public dispose = (error?: string): void => {\n        if (!this.privIsDisposed) {\n            // we should have completed by now. If we did not its an unknown error.\n            this.privIsDisposed = true;\n            for (const detachable of this.privDetachables) {\n                detachable.detach();\n            }\n\n            this.privServiceTelemetryListener.dispose();\n        }\n    }\n\n    public getTelemetry = (): string => {\n        return this.privServiceTelemetryListener.getTelemetry();\n    }\n\n    public onCancelled(): void {\n        this.privIsCanceled = true;\n    }\n\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\n    public onSpeechEnded(): void {\n        this.privIsSpeechEnded = true;\n    }\n\n    protected onEvent = (event: SpeechRecognitionEvent): void => {\n        this.privServiceTelemetryListener.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private onComplete = (): void => {\n        if (!this.privIsCompleted) {\n            this.privIsCompleted = true;\n            this.detachAudioNode();\n        }\n    }\n\n    private detachAudioNode = (): void => {\n        if (!this.privIsAudioNodeDetached) {\n            this.privIsAudioNodeDetached = true;\n            if (this.privAudioNode) {\n                this.privAudioNode.detach();\n            }\n        }\n    }\n}\n"]}