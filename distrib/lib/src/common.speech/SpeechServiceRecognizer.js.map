{"version":3,"sources":["../../src/common.speech/SpeechServiceRecognizer.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;AAGlC,0CAUwB;AACxB,qCAUmB;AAMnB,gDAAgD;AAChD;IAA6C,2CAAqB;IAI9D,iCACI,cAA+B,EAC/B,iBAAqC,EACrC,WAAyB,EACzB,gBAAkC,EAClC,gBAAkC;QALtC,YAMI,kBAAM,cAAc,EAAE,iBAAiB,EAAE,WAAW,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,SAE5F;QADG,KAAI,CAAC,oBAAoB,GAAG,gBAAgB,CAAC;;IACjD,CAAC;IAES,6DAA2B,GAArC,UACI,iBAA0C,EAC1C,cAA8B,EAC9B,UAAuB,EACvB,eAAsD,EACtD,aAAmC;QAEnC,IAAI,MAA+B,CAAC;QAEpC,QAAQ,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;YAC1C,KAAK,mBAAmB;gBACpB,IAAM,UAAU,GAAqB,0BAAgB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBAE3F,MAAM,GAAG,IAAI,iCAAuB,CAChC,cAAc,CAAC,SAAS,EACxB,sBAAY,CAAC,iBAAiB,EAC9B,UAAU,CAAC,IAAI,EACf,UAAU,CAAC,QAAQ,EACnB,UAAU,CAAC,MAAM,GAAG,cAAc,CAAC,sBAAsB,EACzD,SAAS,EACT,iBAAiB,CAAC,QAAQ,EAC1B,SAAS,CAAC,CAAC;gBAEf,IAAM,EAAE,GAAG,IAAI,oCAA0B,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;gBAEjG,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE;oBACzC,IAAI;wBACA,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;wBACrE,6BAA6B;qBAChC;oBAAC,OAAO,KAAK,EAAE;wBACZ,+CAA+C;wBAC/C,kBAAkB;qBACrB;iBACJ;gBACD,MAAM;YACV,KAAK,eAAe;gBAChB,2GAA2G;gBAC3G,6BAA6B;gBAC7B,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC;gBAEtE,IAAM,MAAM,GAAuB,4BAAkB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBAC3F,IAAM,YAAY,GAAiB,yBAAe,CAAC,8BAA8B,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;gBAE5G,cAAc,CAAC,mBAAmB,CAAC,cAAc,CAAC,sBAAsB,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;gBAE1F,IAAI,sBAAY,CAAC,QAAQ,KAAK,YAAY,EAAE;oBACxC,IAAM,YAAY,GAAuB,yBAAe,CAAC,yBAAyB,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;oBAE7G,MAAM,GAAG,IAAI,iCAAuB,CAChC,cAAc,CAAC,SAAS,EACxB,YAAY,EACZ,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,iBAAiB,CAAC,QAAQ,EAC1B,SAAS,CAAC,CAAC;oBAEf,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE;wBACtC,IAAM,WAAW,GAAuC,IAAI,4CAAkC,CAC1F,YAAY,EACZ,SAAS,EACT,YAAY,KAAK,4BAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,+BAAqB,CAAC,YAAY,CAAC,CAAC,CAAC,+BAAqB,CAAC,OAAO,EAC9G,SAAS,EACT,cAAc,CAAC,SAAS,CAAC,CAAC;wBAC9B,IAAI;4BACA,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;4BAC3E,6BAA6B;yBAChC;wBAAC,WAAM,GAAG;qBACd;iBACJ;qBAAM;oBACH,IAAI,CAAC,CAAC,cAAc,CAAC,aAAa,IAAI,YAAY,KAAK,sBAAY,CAAC,OAAO,IAAI,MAAM,CAAC,iBAAiB,KAAK,2BAAiB,CAAC,qBAAqB,CAAC,EAAE;wBAClJ,IAAI,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,kCAAwB,CAAC,KAAK,sBAAY,CAAC,sBAAY,CAAC,MAAM,CAAC,EAAE;4BAClH,MAAM,GAAG,IAAI,iCAAuB,CAChC,cAAc,CAAC,SAAS,EACxB,YAAY,EACZ,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,MAAM,GAAG,cAAc,CAAC,sBAAsB,EACrD,SAAS,EACT,iBAAiB,CAAC,QAAQ,EAC1B,SAAS,CAAC,CAAC;yBAClB;6BAAM;4BACH,IAAM,QAAQ,GAAyB,8BAAoB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;4BAEjG,MAAM,GAAG,IAAI,iCAAuB,CAChC,cAAc,CAAC,SAAS,EACxB,YAAY,EACZ,QAAQ,CAAC,iBAAiB,KAAK,2BAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAChG,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,MAAM,GAAG,cAAc,CAAC,sBAAsB,EACvD,SAAS,EACT,iBAAiB,CAAC,QAAQ,EAC1B,SAAS,CAAC,CAAC;yBAClB;wBAED,IAAM,OAAK,GAA+B,IAAI,oCAA0B,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;wBAE1H,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE;4BACxC,IAAI;gCACA,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAAE,OAAK,CAAC,CAAC;gCACvE,6BAA6B;6BAChC;4BAAC,OAAO,KAAK,EAAE;gCACZ,+CAA+C;gCAC/C,kBAAkB;6BACrB;yBACJ;qBACJ;iBACJ;gBAED,4BAA4B;gBAC5B,IAAI,CAAC,CAAC,eAAe,EAAE;oBACnB,IAAI;wBACA,eAAe,CAAC,MAAM,CAAC,CAAC;qBAC3B;oBAAC,OAAO,CAAC,EAAE;wBACR,IAAI,CAAC,CAAC,aAAa,EAAE;4BACjB,aAAa,CAAC,CAAC,CAAC,CAAC;yBACpB;qBACJ;oBACD,kCAAkC;oBAClC,0CAA0C;oBAC1C,oBAAoB;oBACpB,eAAe,GAAG,SAAS,CAAC;oBAC5B,aAAa,GAAG,SAAS,CAAC;iBAC7B;gBACD,MAAM;YACV;gBACI,MAAM;SACb;IACL,CAAC;IAED,uBAAuB;IACb,mDAAiB,GAA3B,UACI,SAAiB,EACjB,SAAiB,EACjB,kBAAsC,EACtC,SAAgC,EAChC,KAAa,EACb,kBAAwD;QAExD,IAAM,UAAU,GAAuB,IAAI,4BAAkB,EAAE,CAAC;QAChE,UAAU,CAAC,WAAW,CAAC,2CAAiC,EAAE,+BAAqB,CAAC,SAAS,CAAC,CAAC,CAAC;QAE5F,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE;YACtC,IAAM,WAAW,GAAuC,IAAI,4CAAkC,CAC1F,kBAAkB,EAClB,KAAK,EACL,SAAS,EACT,SAAS,EACT,SAAS,CAAC,CAAC;YACf,IAAI;gBACA,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;gBAC3E,6BAA6B;aAChC;YAAC,WAAM,GAAG;SACd;QAED,IAAI,CAAC,CAAC,kBAAkB,EAAE;YACtB,IAAM,MAAM,GAA4B,IAAI,iCAAuB,CAC/D,SAAS,EACT,sBAAY,CAAC,QAAQ,EACrB,SAAS,EAAE,OAAO;YAClB,SAAS,EAAE,WAAW;YACtB,SAAS,EAAE,SAAS;YACpB,KAAK,EACL,SAAS,EAAE,OAAO;YAClB,UAAU,CAAC,CAAC;YAChB,IAAI;gBACA,kBAAkB,CAAC,MAAM,CAAC,CAAC;gBAC3B,6BAA6B;aAChC;YAAC,WAAM,GAAG;SACd;IACL,CAAC;IACL,8BAAC;AAAD,CA1LA,AA0LC,CA1L4C,+BAAqB,GA0LjE;AA1LY,0DAAuB","file":"SpeechServiceRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IAudioSource, IConnection } from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    OutputFormat,\n    PropertyCollection,\n    ResultReason,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult,\n    SpeechRecognizer,\n} from \"../sdk/Exports\";\nimport {\n    CancellationErrorCodePropertyName,\n    DetailedSpeechPhrase,\n    EnumTranslation,\n    OutputFormatPropertyName,\n    RecognitionStatus,\n    RequestSession,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechHypothesis,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\n\n    private privSpeechRecognizer: SpeechRecognizer;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        speechRecognizer: SpeechRecognizer) {\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\n        this.privSpeechRecognizer = speechRecognizer;\n    }\n\n    protected processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        requestSession: RequestSession,\n        connection: IConnection,\n        successCallback?: (e: SpeechRecognitionResult) => void,\n        errorCallBack?: (e: string) => void): void {\n\n        let result: SpeechRecognitionResult;\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.hypothesis\":\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n\n                result = new SpeechRecognitionResult(\n                    requestSession.requestId,\n                    ResultReason.RecognizingSpeech,\n                    hypothesis.Text,\n                    hypothesis.Duration,\n                    hypothesis.Offset + requestSession.currentTurnAudioOffset,\n                    undefined,\n                    connectionMessage.textBody,\n                    undefined);\n\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, requestSession.sessionId);\n\n                if (!!this.privSpeechRecognizer.recognizing) {\n                    try {\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                break;\n            case \"speech.phrase\":\n                // Always send telemetry because we want it to to up for recognize once which will listening to the service\n                // after recognition happens.\n                this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n\n                requestSession.onServiceRecognized(requestSession.currentTurnAudioOffset + simple.Offset);\n\n                if (ResultReason.Canceled === resultReason) {\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n\n                    result = new SpeechRecognitionResult(\n                        requestSession.requestId,\n                        resultReason,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        connectionMessage.textBody,\n                        undefined);\n\n                    if (!!this.privSpeechRecognizer.canceled) {\n                        const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\n                            cancelReason,\n                            undefined,\n                            cancelReason === CancellationReason.Error ? CancellationErrorCode.ServiceError : CancellationErrorCode.NoError,\n                            undefined,\n                            requestSession.sessionId);\n                        try {\n                            this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n                            /* tslint:disable:no-empty */\n                        } catch { }\n                    }\n                } else {\n                    if (!(requestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                            result = new SpeechRecognitionResult(\n                                requestSession.requestId,\n                                resultReason,\n                                simple.DisplayText,\n                                simple.Duration,\n                                simple.Offset + requestSession.currentTurnAudioOffset,\n                                undefined,\n                                connectionMessage.textBody,\n                                undefined);\n                        } else {\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n\n                            result = new SpeechRecognitionResult(\n                                requestSession.requestId,\n                                resultReason,\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\n                                detailed.Duration,\n                                detailed.Offset + requestSession.currentTurnAudioOffset,\n                                undefined,\n                                connectionMessage.textBody,\n                                undefined);\n                        }\n\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, requestSession.sessionId);\n\n                        if (!!this.privSpeechRecognizer.recognized) {\n                            try {\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                    }\n                }\n\n                // report result to promise.\n                if (!!successCallback) {\n                    try {\n                        successCallback(result);\n                    } catch (e) {\n                        if (!!errorCallBack) {\n                            errorCallBack(e);\n                        }\n                    }\n                    // Only invoke the call back once.\n                    // and if it's successful don't invoke the\n                    // error after that.\n                    successCallback = undefined;\n                    errorCallBack = undefined;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string,\n        cancelRecoCallback: (e: SpeechRecognitionResult) => void): void {\n\n        const properties: PropertyCollection = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n        if (!!this.privSpeechRecognizer.canceled) {\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\n                cancellationReason,\n                error,\n                errorCode,\n                undefined,\n                sessionId);\n            try {\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n\n        if (!!cancelRecoCallback) {\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\n                requestId,\n                ResultReason.Canceled,\n                undefined, // Text\n                undefined, // Druation\n                undefined, // Offset\n                error,\n                undefined, // Json\n                properties);\n            try {\n                cancelRecoCallback(result);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n    }\n}\n"]}