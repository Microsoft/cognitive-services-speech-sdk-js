{"version":3,"sources":["../../src/common.speech/CognitiveSubscriptionKeyAuthentication.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,6CAA8E;AAC9E,qDAA8D;AAE9D,IAAM,UAAU,GAAW,2BAA2B,CAAC;AAEvD;;GAEG;AACH;IAGI;;;;OAIG;IACH,gDAAY,eAAuB;QAAnC,iBAMC;QAED;;;;;;WAMG;QACI,UAAK,GAAG,UAAC,gBAAwB;YACpC,OAAO,uBAAa,CAAC,UAAU,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;QACvD,CAAC,CAAA;QAED;;;;;;WAMG;QACI,kBAAa,GAAG,UAAC,gBAAwB;YAC5C,OAAO,uBAAa,CAAC,UAAU,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;QACvD,CAAC,CAAA;QA3BG,IAAI,CAAC,eAAe,EAAE;YAClB,MAAM,IAAI,2BAAiB,CAAC,iBAAiB,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,0BAAQ,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;IAClE,CAAC;IAuBL,6CAAC;AAAD,CArCA,AAqCC,IAAA;AArCY,wFAAsC","file":"CognitiveSubscriptionKeyAuthentication.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError, Promise, PromiseHelper } from \"../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\n\n/**\n * @class\n */\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\n    private privAuthInfo: AuthInfo;\n\n    /**\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\n     * @constructor\n     * @param {string} subscriptionKey - The subscription key\n     */\n    constructor(subscriptionKey: string) {\n        if (!subscriptionKey) {\n            throw new ArgumentNullError(\"subscriptionKey\");\n        }\n\n        this.privAuthInfo = new AuthInfo(AuthHeader, subscriptionKey);\n    }\n\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return PromiseHelper.fromResult(this.privAuthInfo);\n    }\n\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return PromiseHelper.fromResult(this.privAuthInfo);\n    }\n}\n"]}