{"version":3,"sources":["../../src/common.speech/TranslationServiceRecognizer.ts"],"names":[],"mappings":"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","file":"TranslationServiceRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IAudioSource, IConnection, TranslationStatus } from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyCollection,\n    ResultReason,\n    SpeechRecognitionResult,\n    TranslationRecognitionCanceledEventArgs,\n    TranslationRecognitionEventArgs,\n    TranslationRecognitionResult,\n    TranslationRecognizer,\n    Translations,\n    TranslationSynthesisEventArgs,\n    TranslationSynthesisResult,\n} from \"../sdk/Exports\";\nimport {\n    CancellationErrorCodePropertyName,\n    EnumTranslation,\n    RecognitionStatus,\n    RequestSession,\n    ServiceRecognizerBase,\n    SynthesisStatus,\n    TranslationHypothesis,\n    TranslationPhrase,\n    TranslationSynthesisEnd,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\n    private privTranslationRecognizer: TranslationRecognizer;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        translationRecognizer: TranslationRecognizer) {\n\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\n        this.privTranslationRecognizer = translationRecognizer;\n\n    }\n\n    protected processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        requestSession: RequestSession,\n        connection: IConnection,\n        successCallback?: (e: TranslationRecognitionResult) => void,\n        errorCallBack?: (e: string) => void): void {\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"translation.hypothesis\":\n\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), requestSession);\n\n                if (!!this.privTranslationRecognizer.recognizing) {\n                    try {\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n\n                break;\n            case \"translation.phrase\":\n                if (this.privRecognizerConfig.isContinuousRecognition) {\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\n                    this.sendTelemetryData(requestSession, requestSession.getTelemetry());\n                }\n\n                const translatedPhrase: TranslationPhrase = TranslationPhrase.fromJSON(connectionMessage.textBody);\n\n                if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\n                    // OK, the recognition was successful. How'd the translation do?\n                    const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, requestSession);\n                    if (!!this.privTranslationRecognizer.recognized) {\n                        try {\n                            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\n                            /* tslint:disable:no-empty */\n                        } catch (error) {\n                            // Not going to let errors in the event handler\n                            // trip things up.\n                        }\n                    }\n\n                    // report result to promise.\n                    if (!!successCallback) {\n                        try {\n                            successCallback(result.result);\n                        } catch (e) {\n                            if (!!errorCallBack) {\n                                errorCallBack(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        successCallback = undefined;\n                        errorCallBack = undefined;\n                    }\n\n                    break;\n                } else {\n                    const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\n\n                    const result = new TranslationRecognitionResult(\n                        undefined,\n                        requestSession.requestId,\n                        reason,\n                        translatedPhrase.Text,\n                        translatedPhrase.Duration,\n                        translatedPhrase.Offset,\n                        undefined,\n                        connectionMessage.textBody,\n                        undefined);\n\n                    if (reason === ResultReason.Canceled) {\n                        const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\n\n                        const ev = new TranslationRecognitionCanceledEventArgs(\n                            requestSession.sessionId,\n                            cancelReason,\n                            null,\n                            cancelReason === CancellationReason.Error ? CancellationErrorCode.ServiceError : CancellationErrorCode.NoError,\n                            result);\n\n                        if (!!this.privTranslationRecognizer.canceled) {\n                            try {\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, ev);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                    } else {\n                        if (!(requestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                            const ev = new TranslationRecognitionEventArgs(result, 0/*offset*/, requestSession.sessionId);\n\n                            if (!!this.privTranslationRecognizer.recognized) {\n                                try {\n                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n                                    /* tslint:disable:no-empty */\n                                } catch (error) {\n                                    // Not going to let errors in the event handler\n                                    // trip things up.\n                                }\n                            }\n                        }\n                    }\n\n                    // report result to promise.\n                    if (!!successCallback) {\n                        try {\n                            successCallback(result);\n                        } catch (e) {\n                            if (!!errorCallBack) {\n                                errorCallBack(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        successCallback = undefined;\n                        errorCallBack = undefined;\n                    }\n                }\n                break;\n\n            case \"translation.synthesis\":\n                this.sendSynthesisAudio(connectionMessage.binaryBody, requestSession.sessionId);\n                break;\n\n            case \"translation.synthesis.end\":\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\n\n                switch (synthEnd.SynthesisStatus) {\n                    case SynthesisStatus.Error:\n                        if (!!this.privTranslationRecognizer.synthesizing) {\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, requestSession.sessionId);\n\n                            try {\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n\n                        if (!!this.privTranslationRecognizer.canceled) {\n                            // And raise a canceled event to send the rich(er) error message back.\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\n                                requestSession.sessionId,\n                                CancellationReason.Error,\n                                synthEnd.FailureReason,\n                                CancellationErrorCode.ServiceError,\n                                null);\n\n                            try {\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                        break;\n                    case SynthesisStatus.Success:\n                        this.sendSynthesisAudio(undefined, requestSession.sessionId);\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string,\n        cancelRecoCallback: (e: SpeechRecognitionResult) => void): void {\n        if (!!this.privTranslationRecognizer.canceled) {\n            const properties: PropertyCollection = new PropertyCollection();\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\n                sessionId,\n                cancellationReason,\n                error,\n                errorCode,\n                undefined);\n\n            try {\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n\n            if (!!cancelRecoCallback) {\n                const result: TranslationRecognitionResult = new TranslationRecognitionResult(\n                    undefined, // Translations\n                    requestId,\n                    ResultReason.Canceled,\n                    undefined, // Text\n                    undefined, // Druation\n                    undefined, // Offset\n                    error,\n                    undefined, // Json\n                    properties);\n                try {\n                    cancelRecoCallback(result);\n                    /* tslint:disable:no-empty */\n                } catch { }\n            }\n        }\n    }\n\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, requestSession: RequestSession): TranslationRecognitionEventArgs {\n        let translations: Translations;\n\n        if (undefined !== serviceResult.Translation.Translations) {\n            translations = new Translations();\n            for (const translation of serviceResult.Translation.Translations) {\n                translations.set(translation.Language, translation.Text);\n            }\n        }\n\n        let resultReason: ResultReason;\n        if (serviceResult instanceof TranslationPhrase) {\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\n                resultReason = ResultReason.TranslatedSpeech;\n            } else {\n                resultReason = ResultReason.RecognizedSpeech;\n            }\n        } else {\n            resultReason = ResultReason.TranslatingSpeech;\n        }\n\n        const result = new TranslationRecognitionResult(\n            translations,\n            requestSession.requestId,\n            resultReason,\n            serviceResult.Text,\n            serviceResult.Duration,\n            serviceResult.Offset,\n            serviceResult.Translation.FailureReason,\n            JSON.stringify(serviceResult),\n            undefined);\n\n        const ev = new TranslationRecognitionEventArgs(result, serviceResult.Offset, requestSession.sessionId);\n        return ev;\n    }\n\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\n        const result = new TranslationSynthesisResult(reason, audio);\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\n\n        if (!!this.privTranslationRecognizer.synthesizing) {\n            try {\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                /* tslint:disable:no-empty */\n            } catch (error) {\n                // Not going to let errors in the event handler\n                // trip things up.\n            }\n        }\n\n    }\n}\n"]}