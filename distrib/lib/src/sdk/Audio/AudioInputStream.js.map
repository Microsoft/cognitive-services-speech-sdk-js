{"version":3,"sources":["../../src/sdk/Audio/AudioInputStream.ts"],"names":[],"mappings":"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","file":"AudioInputStream.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { createNoDashGuid } from \"../../../src/common/Guid\";\nimport {\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStreamChunk,\n    Promise,\n    PromiseHelper,\n    Stream,\n    StreamReader,\n} from \"../../common/Exports\";\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n\nconst bufferSize: number = 4096;\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @class AudioInputStream\n */\nexport abstract class AudioInputStream {\n\n    /**\n     * Creates and initializes an instance.\n     * @constructor\n     */\n    protected constructor() { }\n\n    /**\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\n     * @member AudioInputStream.createPushStream\n     * @function\n     * @public\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     *        written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\n     * @returns {PushAudioInputStream} The audio input stream being created.\n     */\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\n        return PushAudioInputStream.create(format);\n    }\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\n     * and close() methods.\n     * @member AudioInputStream.createPullStream\n     * @function\n     * @public\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\n     *        PullAudioInputStreamCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\n     *        the callback's read() method (currently only support 16 kHz 16bit mono PCM).\n     * @returns {PullAudioInputStream} The audio input stream being created.\n     */\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\n        return PullAudioInputStream.create(callback, format);\n        // throw new Error(\"Oops\");\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @class PushAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\nexport abstract class PushAudioInputStream extends AudioInputStream {\n\n    /**\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\n     * @member PushAudioInputStream.create\n     * @function\n     * @public\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\n     *        push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\n     * @returns {PushAudioInputStream} The push audio input stream being created.\n     */\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\n        return new PushAudioInputStreamImpl(format);\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PushAudioInputStream.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public abstract write(dataBuffer: ArrayBuffer): void;\n\n    /**\n     * Closes the stream.\n     * @member PushAudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @private\n * @class PushAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\n\n    private privFormat: AudioStreamFormat;\n    private privId: string;\n    private privEvents: EventSource<AudioSourceEvent>;\n    private privStream: Stream<ArrayBuffer> = new Stream<ArrayBuffer>();\n\n    /**\n     * Creates and initalizes an instance with the given values.\n     * @constructor\n     * @param {AudioStreamFormat} format - The audio stream format.\n     */\n    public constructor(format?: AudioStreamFormat) {\n        super();\n        if (format === undefined) {\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\n        } else {\n            this.privFormat = format;\n        }\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privId = createNoDashGuid();\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): AudioStreamFormat {\n        return this.privFormat;\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PushAudioInputStreamImpl.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public write(dataBuffer: ArrayBuffer): void {\n        // Break the data up into smaller chunks if needed.\n        let i: number;\n        for (i = bufferSize - 1; i < dataBuffer.byteLength; i += bufferSize) {\n            this.privStream.write(dataBuffer.slice(i - (bufferSize - 1), i + 1));\n        }\n\n        if ((i - (bufferSize - 1)) !== dataBuffer.byteLength) {\n            this.privStream.write(dataBuffer.slice(i - (bufferSize - 1), dataBuffer.byteLength));\n        }\n    }\n\n    /**\n     * Closes the stream.\n     * @member PushAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privStream.close();\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public turnOn(): Promise<boolean> {\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return PromiseHelper.fromResult(true);\n    }\n\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        return this.turnOn()\n            .onSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\n                // For now we support a single parallel reader of the pushed stream.\n                // So we can simiply hand the stream to the recognizer and let it recognize.\n\n                return this.privStream.getReader();\n            })\n            .onSuccessContinueWith((streamReader: StreamReader<ArrayBuffer>) => {\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n\n                return {\n                    detach: () => {\n                        streamReader.close();\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                        this.turnOff();\n                    },\n                    id: () => {\n                        return audioNodeId;\n                    },\n                    read: () => {\n                        return streamReader.read();\n                    },\n                };\n            });\n    }\n\n    public detach(audioNodeId: string): void {\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n\n    public turnOff(): Promise<boolean> {\n        return PromiseHelper.fromResult(false);\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n}\n\n/*\n * Represents audio input stream used for custom audio input configurations.\n * @class PullAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\nexport abstract class PullAudioInputStream extends AudioInputStream {\n    /**\n     * Creates and initializes and instance.\n     * @constructor\n     */\n    protected constructor() { super(); }\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n     * @member PullAudioInputStream.create\n     * @function\n     * @public\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n     *        derived from PullAudioInputStreamCustomCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\n     * @returns {PullAudioInputStream} The push audio input stream being created.\n     */\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\n        return new PullAudioInputStreamImpl(callback, format);\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member PullAudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n\n}\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class PullAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\n\n    private privCallback: PullAudioInputStreamCallback;\n    private privFormat: AudioStreamFormat;\n    private privId: string;\n    private privEvents: EventSource<AudioSourceEvent>;\n    private privIsClosed: boolean;\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n     * @constructor\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n     *        derived from PullAudioInputStreamCustomCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\n     */\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat) {\n        super();\n        if (undefined === format) {\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat();\n        } else {\n            this.privFormat = format;\n        }\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privId = createNoDashGuid();\n        this.privCallback = callback;\n        this.privIsClosed = false;\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): AudioStreamFormat {\n        return this.privFormat;\n    }\n\n    /**\n     * Closes the stream.\n     * @member PullAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privIsClosed = true;\n        this.privCallback.close();\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public turnOn(): Promise<boolean> {\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return PromiseHelper.fromResult(true);\n    }\n\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        return this.turnOn()\n            .onSuccessContinueWith((result: boolean) => {\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n\n                return {\n                    detach: () => {\n                        this.privCallback.close();\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                        this.turnOff();\n                    },\n                    id: () => {\n                        return audioNodeId;\n                    },\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => {\n                        const readBuff: ArrayBuffer = new ArrayBuffer(bufferSize);\n                        const pulledBytes: number = this.privCallback.read(readBuff);\n\n                        return PromiseHelper.fromResult<IStreamChunk<ArrayBuffer>>({\n                            buffer: readBuff.slice(0, pulledBytes),\n                            isEnd: this.privIsClosed,\n                        });\n                    },\n                };\n            });\n\n    }\n\n    public detach(audioNodeId: string): void {\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n\n    public turnOff(): Promise<boolean> {\n        return PromiseHelper.fromResult(false);\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n}\n"]}