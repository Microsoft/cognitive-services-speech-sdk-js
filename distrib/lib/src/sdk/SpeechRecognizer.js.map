{"version":3,"sources":["../../src/sdk/SpeechRecognizer.ts"],"names":[],"mappings":"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","file":"SpeechRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    OutputFormatPropertyName,\n    PlatformConfig,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceRecognizer,\n} from \"../common.speech/Exports\";\nimport { SpeechConnectionFactory } from \"../common.speech/SpeechConnectionFactory\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    KeywordRecognitionModel,\n    OutputFormat,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult,\n} from \"./Exports\";\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\n * @class SpeechRecognizer\n */\nexport class SpeechRecognizer extends Recognizer {\n    private privDisposedSpeechRecognizer: boolean = false;\n    private privProperties: PropertyCollection;\n\n    /**\n     * SpeechRecognizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n     */\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\n        super(audioConfig);\n\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n        this.privProperties = speechConfigImpl.properties.clone();\n\n        Contracts.throwIfNullOrWhitespace(\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member SpeechRecognizer.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member SpeechRecognizer.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member SpeechRecognizer.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\n\n    /**\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\n     * @member SpeechRecognizer.prototype.endpointId\n     * @function\n     * @public\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\n     */\n    public get endpointId(): string {\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n    }\n\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets the spoken language of recognition.\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} The spoken language of recognition.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * Gets the output format of recognition.\n     * @member SpeechRecognizer.prototype.outputFormat\n     * @function\n     * @public\n     * @returns {OutputFormat} The output format of recognition.\n     */\n    public get outputFormat(): OutputFormat {\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\n            return OutputFormat.Simple;\n        } else {\n            return OutputFormat.Detailed;\n        }\n    }\n\n    /**\n     * The collection of properties and their values defined for this SpeechRecognizer.\n     * @member SpeechRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Starts speech recognition, and stops after the first utterance is recognized.\n     * The task returns the recognition text as result.\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n     *       so it is suitable only for single shot recognition\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the SpeechRecognitionResult.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Interactive,\n                this.properties,\n                this.audioConfig,\n                new SpeechConnectionFactory());\n\n            this.implRecognizerStart(this.privReco, (e: SpeechRecognitionResult) => {\n                this.implCloseExistingRecognizer();\n                if (!!cb) {\n                    cb(e);\n                }\n            }, (e: string) => {\n                this.implCloseExistingRecognizer();\n                if (!!err) {\n                    err(e);\n                }\n            });\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Conversation,\n                this.properties,\n                this.audioConfig,\n                new SpeechConnectionFactory());\n\n            this.implRecognizerStart(this.privReco, undefined, undefined);\n\n            // report result to promise.\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n                cb = undefined;\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Stops continuous speech recognition.\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts speech recognition with keyword spotting, until\n     * stopKeywordRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * Note: Key word spotting functionality is only available on the\n     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\n     *        specifies the keyword to be recognized.\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\n        Contracts.throwIfNull(model, \"model\");\n\n        if (!!err) {\n            err(\"Not yet implemented.\");\n        }\n    }\n\n    /**\n     * Stops continuous speech recognition.\n     * Note: Key word spotting functionality is only available on the\n     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        if (!!cb) {\n            cb();\n        }\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member SpeechRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n        this.dispose(true);\n    }\n\n    /**\n     * Disposes any resources held by the object.\n     * @member SpeechRecognizer.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - true if disposing the object.\n     */\n    protected dispose(disposing: boolean): void {\n        if (this.privDisposedSpeechRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.implCloseExistingRecognizer();\n            this.privDisposedSpeechRecognizer = true;\n        }\n\n        super.dispose(disposing);\n    }\n\n    protected createRecognizerConfig(speechConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\n        return new RecognizerConfig(\n            speechConfig,\n            recognitionMode,\n            this.properties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n\n    // tslint:disable-next-line:member-ordering\n    private privReco: ServiceRecognizerBase;\n\n    private implCloseExistingRecognizer(): void {\n        if (this.privReco) {\n            this.privReco.audioSource.turnOff();\n            this.privReco.dispose();\n            this.privReco = undefined;\n        }\n    }\n}\n"]}