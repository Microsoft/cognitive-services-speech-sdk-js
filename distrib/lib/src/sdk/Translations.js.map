{"version":3,"sources":["../../src/sdk/Translations.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,qCAA+C;AAE/C;;;GAGG;AACH;IAAA;QACI,2FAA2F;QACnF,YAAO,GAAuB,IAAI,4BAAkB,EAAE,CAAC;IA4BnE,CAAC;IA1BG;;;;;;;;;;OAUG;IACI,0BAAG,GAAV,UAAW,GAAW,EAAE,GAAY;QAChC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;;;OAOG;IACI,0BAAG,GAAV,UAAW,GAAW,EAAE,KAAa;QACjC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACzC,CAAC;IACL,mBAAC;AAAD,CA9BA,AA8BC,IAAA;AA9BY,oCAAY","file":"Translations.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection } from \"./Exports\";\n\n/**\n * Represents collection of parameters and their values.\n * @class Translation\n */\nexport class Translations {\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\n    private privMap: PropertyCollection = new PropertyCollection();\n\n    /**\n     * Returns the parameter value in type String. The parameter must have the same type as String.\n     * Currently only String, int and bool are allowed.\n     * If the name is not available, the specified defaultValue is returned.\n     * @member Translation.prototype.get\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\n     * @returns {string} value of the parameter.\n     */\n    public get(key: string, def?: string): string {\n        return this.privMap.getProperty(key, def);\n    }\n\n    /**\n     * Sets the String value of the parameter specified by name.\n     * @member Translation.prototype.set\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} value - The value of the parameter.\n     */\n    public set(key: string, value: string): void {\n        this.privMap.setProperty(key, value);\n    }\n}\n"]}