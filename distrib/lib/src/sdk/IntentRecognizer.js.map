{"version":3,"sources":["../../src/sdk/IntentRecognizer.ts"],"names":[],"mappings":"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","file":"IntentRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    AddedLmIntent,\n    IAuthentication,\n    IConnectionFactory,\n    IntentConnectionFactory,\n    IntentServiceRecognizer,\n    PlatformConfig,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n} from \"../common.speech/Exports\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    IntentRecognitionCanceledEventArgs,\n    IntentRecognitionEventArgs,\n    IntentRecognitionResult,\n    KeywordRecognitionModel,\n    LanguageUnderstandingModel,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    SpeechConfig,\n} from \"./Exports\";\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Intent recognizer.\n * @class\n */\nexport class IntentRecognizer extends Recognizer {\n    private privDisposedIntentRecognizer: boolean;\n    private privProperties: PropertyCollection;\n    private privReco: ServiceRecognizerBase;\n\n    private privAddedIntents: string[][];\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\n    private privIntentDataSent: boolean;\n    private privUmbrellaIntent: AddedLmIntent;\n\n    /**\n     * Initializes an instance of the IntentRecognizer.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n     */\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n\n        super(audioConfig);\n        this.privIntentDataSent = false;\n        this.privAddedIntents = [];\n        this.privAddedLmIntents = {};\n\n        this.privDisposedIntentRecognizer = false;\n        this.privProperties = configImpl.properties;\n\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member IntentRecognizer.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member IntentRecognizer.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member IntentRecognizer.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\n\n    /**\n     * Gets the spoken language of recognition.\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} the spoken language of recognition.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member IntentRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\n     * @member IntentRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    public set authorizationToken(value: string) {\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    /**\n     * The collection of properties and their values defined for this IntentRecognizer.\n     * @member IntentRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their\n     *          values defined for this IntentRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Starts intent recognition, and stops after the first utterance is recognized.\n     * The task returns the recognition text and intent as result.\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n     *       so it is suitable only for single shot recognition like command or query.\n     *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            let contextJson: string;\n\n            if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n                contextJson = this.buildSpeechContext();\n                this.privIntentDataSent = true;\n            }\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Interactive,\n                this.properties,\n                this.audioConfig,\n                new IntentConnectionFactory());\n\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n\n            this.implRecognizerStart(this.privReco, (e: IntentRecognitionResult) => {\n                this.implCloseExistingRecognizer();\n                if (!!cb) {\n                    cb(e);\n                }\n            }, (e: string) => {\n                this.implCloseExistingRecognizer();\n                if (!!err) {\n                    err(e);\n                }\n            }, contextJson);\n\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            let contextJson: string;\n\n            if (Object.keys(this.privAddedLmIntents).length !== 0) {\n                contextJson = this.buildSpeechContext();\n                this.privIntentDataSent = true;\n            }\n\n            this.privReco = this.implRecognizerSetup(\n                RecognitionMode.Conversation,\n                this.properties,\n                this.audioConfig,\n                new IntentConnectionFactory());\n\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n\n            this.implRecognizerStart(this.privReco, undefined, undefined, contextJson);\n\n            // report result to promise.\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n                cb = undefined;\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Stops continuous intent recognition.\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n            this.implCloseExistingRecognizer();\n\n            if (!!cb) {\n                try {\n                    cb();\n                } catch (e) {\n                    if (!!err) {\n                        err(e);\n                    }\n                }\n            }\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n     *       This functionality is currently not included in the SDK itself.\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\n        Contracts.throwIfNull(model, \"model\");\n\n        if (!!err) {\n            err(\"Not yet implemented.\");\n        }\n    }\n\n    /**\n     * Stops continuous speech recognition.\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n     *       This functionality is currently not included in the SDK itself.\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        if (!!cb) {\n            cb();\n        }\n    }\n\n    /**\n     * Adds a phrase that should be recognized as intent.\n     * @member IntentRecognizer.prototype.addIntent\n     * @function\n     * @public\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\n     */\n    public addIntent(simplePhrase: string, intentId?: string): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\n\n        this.privAddedIntents.push([intentId, simplePhrase]);\n    }\n\n    /**\n     * Adds an intent from Language Understanding service for recognition.\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\n     * @function\n     * @public\n     * @param {string} intentId - A String that represents the identifier of the intent\n     *        to be recognized. Ignored if intentName is empty.\n     * @param {string} model - The intent model from Language Understanding service.\n     * @param {string} intentName - The intent name defined in the intent model. If it\n     *        is empty, all intent names defined in the model will be added.\n     */\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n        Contracts.throwIfNull(model, \"model\");\n\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\n    }\n\n    /**\n     * @summary Adds all intents from the specified Language Understanding Model.\n     * @member IntentRecognizer.prototype.addAllIntents\n     * @function\n     * @public\n     * @function\n     * @public\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\n     */\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\n        Contracts.throwIfNull(model, \"model\");\n\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member IntentRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n        this.dispose(true);\n    }\n\n    protected createRecognizerConfig(speecgConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\n        return new RecognizerConfig(speecgConfig, recognitionMode, this.properties);\n    }\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this, this.privIntentDataSent);\n    }\n\n    protected dispose(disposing: boolean): void {\n        if (this.privDisposedIntentRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.privDisposedIntentRecognizer = true;\n            super.dispose(disposing);\n        }\n    }\n\n    private implCloseExistingRecognizer(): void {\n        if (this.privReco) {\n            this.privReco.audioSource.turnOff();\n            this.privReco.dispose();\n            this.privReco = undefined;\n        }\n    }\n\n    private buildSpeechContext(): string {\n        let appId: string;\n        let region: string;\n        let subscriptionKey: string;\n        const refGrammers: string[] = [];\n\n        if (undefined !== this.privUmbrellaIntent) {\n            appId = this.privUmbrellaIntent.modelImpl.appId;\n            region = this.privUmbrellaIntent.modelImpl.region;\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\n        }\n\n        // Build the reference grammer array.\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\n\n            // validate all the same model, region, and key...\n            if (appId === undefined) {\n                appId = addedLmIntent.modelImpl.appId;\n            } else {\n                if (appId !== addedLmIntent.modelImpl.appId) {\n                    throw new Error(\"Intents must all be from the same LUIS model\");\n                }\n            }\n\n            if (region === undefined) {\n                region = addedLmIntent.modelImpl.region;\n            } else {\n                if (region !== addedLmIntent.modelImpl.region) {\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\n                }\n            }\n\n            if (subscriptionKey === undefined) {\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\n            } else {\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\n                    throw new Error(\"Intents must all use the same subscription key\");\n                }\n            }\n\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\n            refGrammers.push(grammer);\n        }\n\n        return JSON.stringify({\n            dgi: {\n                ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\n            },\n            intent: {\n                id: appId,\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\n                provider: \"LUIS\",\n            },\n        });\n    }\n}\n"]}