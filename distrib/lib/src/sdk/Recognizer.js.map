{"version":3,"sources":["../../src/sdk/Recognizer.ts"],"names":[],"mappings":"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","file":"Recognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    CognitiveSubscriptionKeyAuthentication,\n    CognitiveTokenAuthentication,\n    Context,\n    IAuthentication,\n    IConnectionFactory,\n    OS,\n    PlatformConfig,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n} from \"../common.speech/Exports\";\nimport { Promise, PromiseHelper } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    PropertyCollection,\n    PropertyId,\n    RecognitionEventArgs,\n    SessionEventArgs,\n    SpeechRecognitionResult,\n} from \"./Exports\";\n\n/**\n * Defines the base class Recognizer which mainly contains common event handlers.\n * @class Recognizer\n */\nexport abstract class Recognizer {\n    private privDisposed: boolean;\n    protected audioConfig: AudioConfig;\n\n    /**\n     * Creates and initializes an instance of a Recognizer\n     * @constructor\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\n     */\n    protected constructor(audioConfig: AudioConfig) {\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\n\n        this.privDisposed = false;\n    }\n\n    /**\n     * Defines event handler for session started events.\n     * @member Recognizer.prototype.sessionStarted\n     * @function\n     * @public\n     */\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for session stopped events.\n     * @member Recognizer.prototype.sessionStopped\n     * @function\n     * @public\n     */\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for speech started events.\n     * @member Recognizer.prototype.speechStartDetected\n     * @function\n     * @public\n     */\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\n\n    /**\n     * Defines event handler for speech stopped events.\n     * @member Recognizer.prototype.speechEndDetected\n     * @function\n     * @public\n     */\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\n\n    /**\n     * Dispose of associated resources.\n     * @member Recognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        Contracts.throwIfDisposed(this.privDisposed);\n\n        this.dispose(true);\n    }\n\n    /**\n     * This method performs cleanup of resources.\n     * The Boolean parameter disposing indicates whether the method is called\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n     * Derived classes should override this method to dispose resource if needed.\n     * @member Recognizer.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - Flag to request disposal.\n     */\n    protected dispose(disposing: boolean): void {\n        if (this.privDisposed) {\n            return;\n        }\n\n        if (disposing) {\n            // disconnect\n        }\n\n        this.privDisposed = true;\n    }\n\n    /**\n     * This method returns the current state of the telemetry setting.\n     * @member Recognizer.prototype.telemetryEnabled\n     * @function\n     * @public\n     * @returns true if the telemetry is enabled, false otherwise.\n     */\n    public static get telemetryEnabled(): boolean {\n        return ServiceRecognizerBase.telemetryDataEnabled;\n    }\n\n    /**\n     * This method globally enables or disables telemetry.\n     * @member Recognizer.prototype.enableTelemetry\n     * @function\n     * @public\n     * @param enabled - Global setting for telemetry collection.\n     * If set to true, telemetry information like microphone errors,\n     * recognition errors are collected and sent to Microsoft.\n     * If set to false, no telemetry is sent to Microsoft.\n     */\n    /* tslint:disable:member-ordering */\n    public static enableTelemetry(enabled: boolean): void {\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\n    }\n\n    //\n    // ################################################################################################################\n    // IMPLEMENTATION.\n    // Move to independent class\n    // ################################################################################################################\n    //\n\n    protected abstract createRecognizerConfig(speecgConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig;\n\n    protected abstract createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory,\n                                               audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\n\n    // Setup the recognizer\n    protected implRecognizerSetup(recognitionMode: RecognitionMode, speechProperties: PropertyCollection,\n                                  audioConfig: AudioConfig, speechConnectionFactory: IConnectionFactory): ServiceRecognizerBase {\n\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\n        let osName = \"unknown\";\n        let osVersion = \"unknown\";\n\n        if (typeof navigator !== \"undefined\") {\n            osPlatform = osPlatform  + \"/\" + navigator.platform;\n            osName = navigator.userAgent;\n            osVersion = navigator.appVersion;\n        }\n\n        const recognizerConfig = this.createRecognizerConfig(\n            new PlatformConfig(\n                new Context(new OS(osPlatform, osName, osVersion))),\n            recognitionMode); // SDK.SpeechResultFormat.Simple (Options - Simple/Detailed)\n\n        const subscriptionKey = speechProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n        const authentication = subscriptionKey ?\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\n            new CognitiveTokenAuthentication(\n                (authFetchEventId: string): Promise<string> => {\n                    const authorizationToken = speechProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n                    return PromiseHelper.fromResult(authorizationToken);\n                },\n                (authFetchEventId: string): Promise<string> => {\n                    const authorizationToken = speechProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n                    return PromiseHelper.fromResult(authorizationToken);\n                });\n\n        return this.createServiceRecognizer(\n            authentication,\n            speechConnectionFactory,\n            audioConfig,\n            recognizerConfig);\n    }\n\n    // Start the recognition\n    protected implRecognizerStart(\n        recognizer: ServiceRecognizerBase,\n        successCallback: (e: SpeechRecognitionResult) => void,\n        errorCallback: (e: string) => void,\n        speechContext?: string,\n    ): void {\n        recognizer.recognize(speechContext, successCallback, errorCallback).on(\n            /* tslint:disable:no-empty */\n            (result: boolean): void => { },\n            (error: string): void => {\n                if (!!errorCallback) {\n                    // Internal error with service communication.\n                    errorCallback(\"Runtime error: \" + error);\n                }\n            });\n    }\n}\n"]}