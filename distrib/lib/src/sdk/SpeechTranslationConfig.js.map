{"version":3,"sources":["../../src/sdk/SpeechTranslationConfig.ts"],"names":[],"mappings":"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","file":"SpeechTranslationConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { OutputFormat, PropertyCollection, PropertyId, SpeechConfig } from \"./Exports\";\n\n/**\n * Speech translation configuration.\n * @class SpeechTranslationConfig\n */\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\n\n    /**\n     * Creates an instance of recognizer config.\n     */\n    protected constructor() {\n        super();\n    }\n\n    /**\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\n     * @member SpeechTranslationConfig.fromSubscription\n     * @function\n     * @public\n     * @param {string} subscriptionKey - The subscription key.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechTranslationConfig} The speech translation config.\n     */\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return ret;\n    }\n\n    /**\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\n     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\n     *      will encounter errors during recognition.\n     * @member SpeechTranslationConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param {string} authorizationToken - The authorization token.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechTranslationConfig} The speech translation config.\n     */\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return ret;\n    }\n\n    /**\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\n     *       set by any other APIs. For example, if language is defined in the uri as query parameter\n     *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\n     *       setting in uri takes precedence, and the effective language is \"de-DE\".\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\n     * @member SpeechTranslationConfig.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} endpoint - The service endpoint to connect to.\n     * @param {string} subscriptionKey - The subscription key.\n     * @returns {SpeechTranslationConfig} A speech config instance.\n     */\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\n        Contracts.throwIfNull(endpoint, \"endpoint\");\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        return ret;\n    }\n\n    /**\n     * Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfig.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set authorizationToken(value: string);\n\n    /**\n     * Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set speechRecognitionLanguage(value: string);\n\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public abstract addTargetLanguage(value: string): void;\n\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfig.prototype.targetLanguages\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public abstract get targetLanguages(): string[];\n\n    /**\n     * Returns the selected voice name.\n     * @member SpeechTranslationConfig.prototype.voiceName\n     * @function\n     * @public\n     * @returns {string} The voice name.\n     */\n    public abstract get voiceName(): string;\n\n    /**\n     * Sets voice of the translated language, enable voice synthesis output.\n     * @member SpeechTranslationConfig.prototype.voiceName\n     * @function\n     * @public\n     * @param {string} value - The name of the voice.\n     */\n    public abstract set voiceName(value: string);\n\n    /**\n     * Sets a named property as value\n     * @member SpeechTranslationConfig.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} value - The value.\n     */\n    public abstract setProperty(name: string, value: string): void;\n\n    /**\n     * Dispose of associated resources.\n     * @member SpeechTranslationConfig.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * @private\n * @class SpeechTranslationConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\n    private privSpeechProperties: PropertyCollection;\n\n    public constructor() {\n        super();\n        this.privSpeechProperties = new PropertyCollection();\n        this.outputFormat = OutputFormat.Simple;\n    }\n    /**\n     * Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public set authorizationToken(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    /**\n     * Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public set speechRecognitionLanguage(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\n     * @function\n     * @public\n     */\n    public get subscriptionKey(): string {\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n    public get outputFormat(): OutputFormat {\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n    public set outputFormat(value: OutputFormat) {\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n    public set endpointId(value: string) {\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, value);\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n    public get endpointId(): string {\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\n    }\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public addTargetLanguage(value: string): void {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        const languages: string[] = this.targetLanguages;\n        languages.push(value);\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n    }\n\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public get targetLanguages(): string[] {\n\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n        } else {\n            return [];\n        }\n\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     */\n    public get voiceName(): string {\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n\n    /**\n     * Sets voice of the translated language, enable voice synthesis output.\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     * @param {string} value - The name of the voice.\n     */\n    public set voiceName(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\n    }\n\n    /**\n     * Provides the region.\n     * @member SpeechTranslationConfigImpl.prototype.region\n     * @function\n     * @public\n     * @returns {string} The region.\n     */\n    public get region(): string {\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\n    }\n\n    /**\n     * Allows for setting arbitrary properties.\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} value - The value of the property.\n     */\n    public setProperty(name: string, value: string): void {\n        this.privSpeechProperties.setProperty(name, value);\n    }\n\n    /**\n     * Allows for retrieving arbitrary property values.\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} def - The default value of the property in case it is not set.\n     * @returns {string} The value of the property.\n     */\n    public getProperty(name: string, def?: string): string {\n        return this.privSpeechProperties.getProperty(name, def);\n    }\n\n    /**\n     * Provides access to custom properties.\n     * @member SpeechTranslationConfigImpl.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The properties.\n     */\n    public get properties(): PropertyCollection {\n        return this.privSpeechProperties;\n    }\n\n    /**\n     * Dispose of associated resources.\n     * @member SpeechTranslationConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        return;\n    }\n}\n"]}